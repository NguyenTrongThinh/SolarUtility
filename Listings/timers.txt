; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\timers.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\timers.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\Driver -I.\Application -I.\System\FreeRTOS\include -I.\System\FreeRTOS\portable\MemMang -I.\System\FreeRTOS\portable\RVDS\ARM_CM3 -I.\System\Libraries\CMSIS\CM3\CoreSupport -I.\System\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I.\System\Libraries\STM32F10x_StdPeriph_Driver\inc -ID:\ARM\SolarUtility\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=516 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\objects\timers.crf System\FreeRTOS\timers.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  xTimerGenericCommand PROC
;;;315    
;;;316    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
000000  b5f0              PUSH     {r4-r7,lr}
;;;317    {
;;;318    BaseType_t xReturn = pdFAIL;
;;;319    DaemonTaskMessage_t xMessage;
;;;320    
;;;321    	/* Send a message to the timer service task to perform a particular action
;;;322    	on a particular timer definition. */
;;;323    	if( xTimerQueue != NULL )
000002  4cfc              LDR      r4,|L1.1012|
000004  b083              SUB      sp,sp,#0xc            ;317
000006  4605              MOV      r5,r0                 ;317
000008  f8d4c000          LDR      r12,[r4,#0]  ; xTimerQueue
00000c  2000              MOVS     r0,#0                 ;318
00000e  9e08              LDR      r6,[sp,#0x20]
000010  461f              MOV      r7,r3                 ;317
000012  f1bc0f00          CMP      r12,#0
;;;324    	{
;;;325    		/* Send a command to the timer service task to start the xTimer timer. */
;;;326    		xMessage.xMessageID = xCommandID;
;;;327    		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
;;;328    		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
;;;329    
;;;330    		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
;;;331    		{
;;;332    			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
;;;333    			{
;;;334    				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
;;;335    			}
;;;336    			else
;;;337    			{
;;;338    				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
;;;339    			}
;;;340    		}
;;;341    		else
;;;342    		{
;;;343    			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
;;;344    		}
;;;345    
;;;346    		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
;;;347    	}
;;;348    	else
;;;349    	{
;;;350    		mtCOVERAGE_TEST_MARKER();
;;;351    	}
;;;352    
;;;353    	return xReturn;
;;;354    }
000016  bf04              ITT      EQ
000018  b003              ADDEQ    sp,sp,#0xc
00001a  bdf0              POPEQ    {r4-r7,pc}
00001c  9502              STR      r5,[sp,#8]            ;328
00001e  e9cd1200          STRD     r1,r2,[sp,#0]         ;328
000022  2906              CMP      r1,#6                 ;330
000024  da13              BGE      |L1.78|
000026  f7fffffe          BL       xTaskGetSchedulerState
00002a  2802              CMP      r0,#2                 ;332
00002c  f04f0300          MOV      r3,#0                 ;338
000030  d006              BEQ      |L1.64|
000032  2200              MOVS     r2,#0                 ;338
000034  4669              MOV      r1,sp                 ;338
000036  6820              LDR      r0,[r4,#0]            ;338  ; xTimerQueue
000038  f7fffffe          BL       xQueueGenericSend
00003c  b003              ADD      sp,sp,#0xc
00003e  bdf0              POP      {r4-r7,pc}
                  |L1.64|
000040  4632              MOV      r2,r6                 ;334
000042  4669              MOV      r1,sp                 ;334
000044  6820              LDR      r0,[r4,#0]            ;334  ; xTimerQueue
000046  f7fffffe          BL       xQueueGenericSend
00004a  b003              ADD      sp,sp,#0xc
00004c  bdf0              POP      {r4-r7,pc}
                  |L1.78|
00004e  2300              MOVS     r3,#0                 ;343
000050  463a              MOV      r2,r7                 ;343
000052  4669              MOV      r1,sp                 ;343
000054  4660              MOV      r0,r12                ;343
000056  f7fffffe          BL       xQueueGenericSendFromISR
00005a  b003              ADD      sp,sp,#0xc
00005c  bdf0              POP      {r4-r7,pc}
;;;355    /*-----------------------------------------------------------*/
                          ENDP

                  prvTimerTask PROC
;;;417    
;;;418    static void prvTimerTask( void *pvParameters )
00005e  4ce5              LDR      r4,|L1.1012|
;;;419    {
000060  b08c              SUB      sp,sp,#0x30
                  |L1.98|
000062  68e0              LDR      r0,[r4,#0xc]  ; pxCurrentTimerList
000064  6801              LDR      r1,[r0,#0]
000066  2900              CMP      r1,#0
000068  bf07              ITTEE    EQ
00006a  2601              MOVEQ    r6,#1
00006c  2500              MOVEQ    r5,#0
00006e  2600              MOVNE    r6,#0
000070  68c0              LDRNE    r0,[r0,#0xc]
000072  bf18              IT       NE
000074  6805              LDRNE    r5,[r0,#0]
000076  f7fffffe          BL       vTaskSuspendAll
00007a  a805              ADD      r0,sp,#0x14
00007c  f7fffffe          BL       prvSampleTimeNow
000080  4607              MOV      r7,r0
000082  9805              LDR      r0,[sp,#0x14]
000084  2800              CMP      r0,#0
000086  d02c              BEQ      |L1.226|
000088  f7fffffe          BL       xTaskResumeAll
                  |L1.140|
00008c  2300              MOVS     r3,#0
00008e  461a              MOV      r2,r3
000090  a905              ADD      r1,sp,#0x14
000092  6820              LDR      r0,[r4,#0]  ; xTimerQueue
000094  f7fffffe          BL       xQueueGenericReceive
000098  2800              CMP      r0,#0
00009a  d0e2              BEQ      |L1.98|
                  |L1.156|
00009c  9805              LDR      r0,[sp,#0x14]
00009e  2800              CMP      r0,#0
0000a0  f2c080f0          BLT.W    |L1.644|
0000a4  9f07              LDR      r7,[sp,#0x1c]
0000a6  6978              LDR      r0,[r7,#0x14]
0000a8  2800              CMP      r0,#0
0000aa  bf1c              ITT      NE
0000ac  1d38              ADDNE    r0,r7,#4
0000ae  f7fffffe          BLNE     uxListRemove
0000b2  f7fffffe          BL       xTaskGetTickCount
0000b6  68a1              LDR      r1,[r4,#8]  ; xLastTime
0000b8  4680              MOV      r8,r0
0000ba  4288              CMP      r0,r1
0000bc  d27e              BCS      |L1.444|
0000be  68e0              LDR      r0,[r4,#0xc]  ; pxCurrentTimerList
0000c0  6800              LDR      r0,[r0,#0]
0000c2  2800              CMP      r0,#0
0000c4  d07e              BEQ      |L1.452|
                  |L1.198|
0000c6  68e0              LDR      r0,[r4,#0xc]  ; pxCurrentTimerList
0000c8  68c0              LDR      r0,[r0,#0xc]
0000ca  68c5              LDR      r5,[r0,#0xc]
0000cc  6806              LDR      r6,[r0,#0]
0000ce  1d28              ADDS     r0,r5,#4
0000d0  f7fffffe          BL       uxListRemove
0000d4  6a69              LDR      r1,[r5,#0x24]
0000d6  4628              MOV      r0,r5
0000d8  4788              BLX      r1
0000da  69e8              LDR      r0,[r5,#0x1c]
0000dc  2801              CMP      r0,#1
0000de  d04d              BEQ      |L1.380|
0000e0  e069              B        |L1.438|
                  |L1.226|
0000e2  2e00              CMP      r6,#0
0000e4  d13f              BNE      |L1.358|
0000e6  42bd              CMP      r5,r7
0000e8  d83d              BHI      |L1.358|
0000ea  f7fffffe          BL       xTaskResumeAll
0000ee  68e0              LDR      r0,[r4,#0xc]  ; pxCurrentTimerList
0000f0  68c0              LDR      r0,[r0,#0xc]
0000f2  68c6              LDR      r6,[r0,#0xc]
0000f4  1d30              ADDS     r0,r6,#4
0000f6  f7fffffe          BL       uxListRemove
0000fa  69f0              LDR      r0,[r6,#0x1c]
0000fc  2801              CMP      r0,#1
0000fe  d128              BNE      |L1.338|
000100  69b0              LDR      r0,[r6,#0x18]
000102  6136              STR      r6,[r6,#0x10]
000104  4428              ADD      r0,r0,r5
000106  6070              STR      r0,[r6,#4]
000108  42b8              CMP      r0,r7
00010a  d807              BHI      |L1.284|
00010c  69b0              LDR      r0,[r6,#0x18]
00010e  1b79              SUBS     r1,r7,r5
000110  4281              CMP      r1,r0
000112  bf3c              ITT      CC
000114  1d31              ADDCC    r1,r6,#4
000116  6920              LDRCC    r0,[r4,#0x10]  ; pxOverflowTimerList
000118  d209              BCS      |L1.302|
00011a  e005              B        |L1.296|
                  |L1.284|
00011c  42bd              CMP      r5,r7
00011e  d901              BLS      |L1.292|
000120  4285              CMP      r5,r0
000122  d904              BLS      |L1.302|
                  |L1.292|
000124  1d31              ADDS     r1,r6,#4
000126  68e0              LDR      r0,[r4,#0xc]  ; pxCurrentTimerList
                  |L1.296|
000128  f7fffffe          BL       vListInsert
00012c  e011              B        |L1.338|
                  |L1.302|
00012e  2000              MOVS     r0,#0
000130  6821              LDR      r1,[r4,#0]  ; xTimerQueue
000132  4607              MOV      r7,r0
000134  b169              CBZ      r1,|L1.338|
000136  e9cd0500          STRD     r0,r5,[sp,#0]
00013a  9602              STR      r6,[sp,#8]
00013c  f7fffffe          BL       xTaskGetSchedulerState
000140  2802              CMP      r0,#2
000142  f04f0300          MOV      r3,#0
000146  d008              BEQ      |L1.346|
000148  2200              MOVS     r2,#0
00014a  4669              MOV      r1,sp
00014c  6820              LDR      r0,[r4,#0]  ; xTimerQueue
00014e  f7fffffe          BL       xQueueGenericSend
                  |L1.338|
000152  6a71              LDR      r1,[r6,#0x24]
000154  4630              MOV      r0,r6
000156  4788              BLX      r1
000158  e798              B        |L1.140|
                  |L1.346|
00015a  463a              MOV      r2,r7
00015c  4669              MOV      r1,sp
00015e  6820              LDR      r0,[r4,#0]  ; xTimerQueue
000160  f7fffffe          BL       xQueueGenericSend
000164  e7f5              B        |L1.338|
                  |L1.358|
000166  1be9              SUBS     r1,r5,r7
000168  6820              LDR      r0,[r4,#0]  ; xTimerQueue
00016a  f7fffffe          BL       vQueueWaitForMessageRestricted
00016e  f7fffffe          BL       xTaskResumeAll
000172  2800              CMP      r0,#0
000174  bf08              IT       EQ
000176  f7fffffe          BLEQ     vPortYield
00017a  e787              B        |L1.140|
                  |L1.380|
00017c  69a8              LDR      r0,[r5,#0x18]
00017e  4430              ADD      r0,r0,r6
000180  42b0              CMP      r0,r6
000182  d906              BLS      |L1.402|
000184  612d              STR      r5,[r5,#0x10]
000186  6068              STR      r0,[r5,#4]
000188  1d29              ADDS     r1,r5,#4
00018a  68e0              LDR      r0,[r4,#0xc]  ; pxCurrentTimerList
00018c  f7fffffe          BL       vListInsert
000190  e011              B        |L1.438|
                  |L1.402|
000192  2000              MOVS     r0,#0
000194  6821              LDR      r1,[r4,#0]  ; xTimerQueue
000196  4681              MOV      r9,r0
000198  b169              CBZ      r1,|L1.438|
00019a  e9cd0608          STRD     r0,r6,[sp,#0x20]
00019e  950a              STR      r5,[sp,#0x28]
0001a0  f7fffffe          BL       xTaskGetSchedulerState
0001a4  2802              CMP      r0,#2
0001a6  f04f0300          MOV      r3,#0
0001aa  d01b              BEQ      |L1.484|
0001ac  2200              MOVS     r2,#0
0001ae  a908              ADD      r1,sp,#0x20
0001b0  6820              LDR      r0,[r4,#0]  ; xTimerQueue
0001b2  f7fffffe          BL       xQueueGenericSend
                  |L1.438|
0001b6  68e0              LDR      r0,[r4,#0xc]  ; pxCurrentTimerList
0001b8  6800              LDR      r0,[r0,#0]
0001ba  e001              B        |L1.448|
                  |L1.444|
0001bc  e006              B        |L1.460|
0001be  e001              B        |L1.452|
                  |L1.448|
0001c0  2800              CMP      r0,#0
0001c2  d180              BNE      |L1.198|
                  |L1.452|
0001c4  e9d41003          LDRD     r1,r0,[r4,#0xc]
0001c8  e9c40103          STRD     r0,r1,[r4,#0xc]
                  |L1.460|
0001cc  f8c48008          STR      r8,[r4,#8]  ; xLastTime
0001d0  9805              LDR      r0,[sp,#0x14]
0001d2  280a              CMP      r0,#0xa
0001d4  d256              BCS      |L1.644|
0001d6  e8dff000          TBB      [pc,r0]
0001da  0b0b              DCB      0x0b,0x0b
0001dc  0b554252          DCB      0x0b,0x55,0x42,0x52
0001e0  0b0b5542          DCB      0x0b,0x0b,0x55,0x42
                  |L1.484|
0001e4  464a              MOV      r2,r9
0001e6  a908              ADD      r1,sp,#0x20
0001e8  6820              LDR      r0,[r4,#0]  ; xTimerQueue
0001ea  f7fffffe          BL       xQueueGenericSend
0001ee  e7e2              B        |L1.438|
0001f0  9906              LDR      r1,[sp,#0x18]
0001f2  69b8              LDR      r0,[r7,#0x18]
0001f4  613f              STR      r7,[r7,#0x10]
0001f6  4408              ADD      r0,r0,r1
0001f8  6078              STR      r0,[r7,#4]
0001fa  4540              CMP      r0,r8
0001fc  d805              BHI      |L1.522|
0001fe  69b8              LDR      r0,[r7,#0x18]
000200  eba80101          SUB      r1,r8,r1
000204  4281              CMP      r1,r0
000206  d204              BCS      |L1.530|
000208  e033              B        |L1.626|
                  |L1.522|
00020a  4541              CMP      r1,r8
00020c  d934              BLS      |L1.632|
00020e  4281              CMP      r1,r0
000210  d832              BHI      |L1.632|
                  |L1.530|
000212  6a79              LDR      r1,[r7,#0x24]
000214  4638              MOV      r0,r7
000216  4788              BLX      r1
000218  69f8              LDR      r0,[r7,#0x1c]
00021a  2801              CMP      r0,#1
00021c  d132              BNE      |L1.644|
00021e  e002              B        |L1.550|
                  |L1.544|
000220  f7fffffe          BL       vListInsert
000224  e02e              B        |L1.644|
                  |L1.550|
000226  9906              LDR      r1,[sp,#0x18]
000228  69ba              LDR      r2,[r7,#0x18]
00022a  2000              MOVS     r0,#0
00022c  4411              ADD      r1,r1,r2
00022e  6822              LDR      r2,[r4,#0]  ; xTimerQueue
000230  4605              MOV      r5,r0
000232  b33a              CBZ      r2,|L1.644|
000234  9703              STR      r7,[sp,#0xc]
000236  e9cd0101          STRD     r0,r1,[sp,#4]
00023a  f7fffffe          BL       xTaskGetSchedulerState
00023e  2802              CMP      r0,#2
000240  f04f0300          MOV      r3,#0
000244  d005              BEQ      |L1.594|
000246  2200              MOVS     r2,#0
000248  a901              ADD      r1,sp,#4
00024a  6820              LDR      r0,[r4,#0]  ; xTimerQueue
00024c  f7fffffe          BL       xQueueGenericSend
000250  e018              B        |L1.644|
                  |L1.594|
000252  462a              MOV      r2,r5
000254  a901              ADD      r1,sp,#4
000256  6820              LDR      r0,[r4,#0]  ; xTimerQueue
000258  f7fffffe          BL       xQueueGenericSend
00025c  e012              B        |L1.644|
00025e  9806              LDR      r0,[sp,#0x18]
000260  61b8              STR      r0,[r7,#0x18]
000262  4440              ADD      r0,r0,r8
000264  613f              STR      r7,[r7,#0x10]
000266  6078              STR      r0,[r7,#4]
000268  4580              CMP      r8,r0
00026a  d305              BCC      |L1.632|
00026c  69b8              LDR      r0,[r7,#0x18]
00026e  2800              CMP      r0,#0
000270  d908              BLS      |L1.644|
                  |L1.626|
000272  1d39              ADDS     r1,r7,#4
000274  6920              LDR      r0,[r4,#0x10]  ; pxOverflowTimerList
000276  e7d3              B        |L1.544|
                  |L1.632|
000278  1d39              ADDS     r1,r7,#4
00027a  68e0              LDR      r0,[r4,#0xc]  ; pxCurrentTimerList
00027c  e7d0              B        |L1.544|
00027e  4638              MOV      r0,r7
000280  f7fffffe          BL       vPortFree
                  |L1.644|
000284  2300              MOVS     r3,#0
000286  461a              MOV      r2,r3
000288  a905              ADD      r1,sp,#0x14
00028a  6820              LDR      r0,[r4,#0]  ; xTimerQueue
00028c  f7fffffe          BL       xQueueGenericReceive
000290  2800              CMP      r0,#0
000292  f47faf03          BNE      |L1.156|
000296  e6e4              B        |L1.98|
;;;420    TickType_t xNextExpireTime;
;;;421    BaseType_t xListWasEmpty;
;;;422    
;;;423    	/* Just to avoid compiler warnings. */
;;;424    	( void ) pvParameters;
;;;425    
;;;426    	for( ;; )
;;;427    	{
;;;428    		/* Query the timers list to see if it contains any timers, and if so,
;;;429    		obtain the time at which the next timer will expire. */
;;;430    		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
;;;431    
;;;432    		/* If a timer has expired, process it.  Otherwise, block this task
;;;433    		until either a timer does expire, or a command is received. */
;;;434    		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
;;;435    
;;;436    		/* Empty the command queue. */
;;;437    		prvProcessReceivedCommands();
;;;438    	}
;;;439    }
;;;440    /*-----------------------------------------------------------*/
                          ENDP

                  xTimerCreateTimerTask PROC
;;;239    
;;;240    BaseType_t xTimerCreateTimerTask( void )
000298  b530              PUSH     {r4,r5,lr}
;;;241    {
00029a  b085              SUB      sp,sp,#0x14
;;;242    BaseType_t xReturn = pdFAIL;
00029c  2500              MOVS     r5,#0
00029e  f7fffffe          BL       vPortEnterCritical
0002a2  4c54              LDR      r4,|L1.1012|
0002a4  6820              LDR      r0,[r4,#0]  ; xTimerQueue
0002a6  b978              CBNZ     r0,|L1.712|
0002a8  4853              LDR      r0,|L1.1016|
0002aa  f7fffffe          BL       vListInitialise
0002ae  4853              LDR      r0,|L1.1020|
0002b0  f7fffffe          BL       vListInitialise
0002b4  4850              LDR      r0,|L1.1016|
0002b6  60e0              STR      r0,[r4,#0xc]  ; pxCurrentTimerList
0002b8  3014              ADDS     r0,r0,#0x14
0002ba  6120              STR      r0,[r4,#0x10]  ; pxOverflowTimerList
0002bc  2200              MOVS     r2,#0
0002be  210c              MOVS     r1,#0xc
0002c0  2001              MOVS     r0,#1
0002c2  f7fffffe          BL       xQueueGenericCreate
0002c6  6020              STR      r0,[r4,#0]  ; xTimerQueue
                  |L1.712|
0002c8  f7fffffe          BL       vPortExitCritical
;;;243    
;;;244    	/* This function is called when the scheduler is started if
;;;245    	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
;;;246    	timer service task has been created/initialised.  If timers have already
;;;247    	been created then the initialisation will already have been performed. */
;;;248    	prvCheckForValidListAndQueue();
;;;249    
;;;250    	if( xTimerQueue != NULL )
0002cc  6820              LDR      r0,[r4,#0]  ; xTimerQueue
0002ce  b168              CBZ      r0,|L1.748|
;;;251    	{
;;;252    		#if ( INCLUDE_xTimerGetTimerDaemonTaskHandle == 1 )
;;;253    		{
;;;254    			/* Create the timer task, storing its handle in xTimerTaskHandle so
;;;255    			it can be returned by the xTimerGetTimerDaemonTaskHandle() function. */
;;;256    			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
0002d0  2201              MOVS     r2,#1
0002d2  2000              MOVS     r0,#0
0002d4  9200              STR      r2,[sp,#0]
0002d6  494a              LDR      r1,|L1.1024|
0002d8  e9cd1001          STRD     r1,r0,[sp,#4]
0002dc  4603              MOV      r3,r0
0002de  9003              STR      r0,[sp,#0xc]
0002e0  2280              MOVS     r2,#0x80
0002e2  a148              ADR      r1,|L1.1028|
0002e4  4849              LDR      r0,|L1.1036|
0002e6  f7fffffe          BL       xTaskGenericCreate
0002ea  4605              MOV      r5,r0
                  |L1.748|
;;;257    		}
;;;258    		#else
;;;259    		{
;;;260    			/* Create the timer task without storing its handle. */
;;;261    			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
;;;262    		}
;;;263    		#endif
;;;264    	}
;;;265    	else
;;;266    	{
;;;267    		mtCOVERAGE_TEST_MARKER();
;;;268    	}
;;;269    
;;;270    	configASSERT( xReturn );
;;;271    	return xReturn;
;;;272    }
0002ec  b005              ADD      sp,sp,#0x14
0002ee  4628              MOV      r0,r5                 ;271
0002f0  bd30              POP      {r4,r5,pc}
;;;273    /*-----------------------------------------------------------*/
                          ENDP

                  xTimerCreate PROC
;;;274    
;;;275    TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
0002f2  e92d47f0          PUSH     {r4-r10,lr}
;;;276    {
0002f6  461f              MOV      r7,r3
0002f8  f8dda020          LDR      r10,[sp,#0x20]
0002fc  4690              MOV      r8,r2
0002fe  000e              MOVS     r6,r1
000300  4681              MOV      r9,r0
;;;277    Timer_t *pxNewTimer;
;;;278    
;;;279    	/* Allocate the timer structure. */
;;;280    	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
;;;281    	{
;;;282    		pxNewTimer = NULL;
000302  bf08              IT       EQ
000304  2400              MOVEQ    r4,#0
000306  d024              BEQ      |L1.850|
;;;283    	}
;;;284    	else
;;;285    	{
;;;286    		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
000308  2028              MOVS     r0,#0x28
00030a  f7fffffe          BL       pvPortMalloc
00030e  0004              MOVS     r4,r0
;;;287    		if( pxNewTimer != NULL )
000310  d01f              BEQ      |L1.850|
000312  f7fffffe          BL       vPortEnterCritical
000316  4d37              LDR      r5,|L1.1012|
000318  6828              LDR      r0,[r5,#0]  ; xTimerQueue
00031a  b978              CBNZ     r0,|L1.828|
00031c  4836              LDR      r0,|L1.1016|
00031e  f7fffffe          BL       vListInitialise
000322  4836              LDR      r0,|L1.1020|
000324  f7fffffe          BL       vListInitialise
000328  4833              LDR      r0,|L1.1016|
00032a  60e8              STR      r0,[r5,#0xc]  ; pxCurrentTimerList
00032c  3014              ADDS     r0,r0,#0x14
00032e  6128              STR      r0,[r5,#0x10]  ; pxOverflowTimerList
000330  2200              MOVS     r2,#0
000332  210c              MOVS     r1,#0xc
000334  2001              MOVS     r0,#1
000336  f7fffffe          BL       xQueueGenericCreate
00033a  6028              STR      r0,[r5,#0]  ; xTimerQueue
                  |L1.828|
00033c  f7fffffe          BL       vPortExitCritical
;;;288    		{
;;;289    			/* Ensure the infrastructure used by the timer service task has been
;;;290    			created/initialised. */
;;;291    			prvCheckForValidListAndQueue();
;;;292    
;;;293    			/* Initialise the timer structure members using the function parameters. */
;;;294    			pxNewTimer->pcTimerName = pcTimerName;
;;;295    			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
;;;296    			pxNewTimer->uxAutoReload = uxAutoReload;
;;;297    			pxNewTimer->pvTimerID = pvTimerID;
;;;298    			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
;;;299    			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
000340  f8c49000          STR      r9,[r4,#0]
000344  e9c46806          STRD     r6,r8,[r4,#0x18]
000348  e9c47a08          STRD     r7,r10,[r4,#0x20]
00034c  1d20              ADDS     r0,r4,#4
00034e  f7fffffe          BL       vListInitialiseItem
                  |L1.850|
;;;300    
;;;301    			traceTIMER_CREATE( pxNewTimer );
;;;302    		}
;;;303    		else
;;;304    		{
;;;305    			traceTIMER_CREATE_FAILED();
;;;306    		}
;;;307    	}
;;;308    
;;;309    	/* 0 is not a valid value for xTimerPeriodInTicks. */
;;;310    	configASSERT( ( xTimerPeriodInTicks > 0 ) );
;;;311    
;;;312    	return ( TimerHandle_t ) pxNewTimer;
000352  4620              MOV      r0,r4
;;;313    }
000354  e8bd87f0          POP      {r4-r10,pc}
;;;314    /*-----------------------------------------------------------*/
                          ENDP

                  xTimerGetTimerDaemonTaskHandle PROC
;;;358    
;;;359    	TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
000358  4826              LDR      r0,|L1.1012|
;;;360    	{
;;;361    		/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
;;;362    		started, then xTimerTaskHandle will be NULL. */
;;;363    		configASSERT( ( xTimerTaskHandle != NULL ) );
;;;364    		return xTimerTaskHandle;
00035a  6840              LDR      r0,[r0,#4]  ; xTimerTaskHandle
;;;365    	}
00035c  4770              BX       lr
;;;366    
                          ENDP

                  pcTimerGetTimerName PROC
;;;369    
;;;370    const char * pcTimerGetTimerName( TimerHandle_t xTimer )
00035e  6800              LDR      r0,[r0,#0]
;;;371    {
;;;372    Timer_t *pxTimer = ( Timer_t * ) xTimer;
;;;373    
;;;374    	return pxTimer->pcTimerName;
;;;375    }
000360  4770              BX       lr
;;;376    /*-----------------------------------------------------------*/
                          ENDP

                  xTimerIsTimerActive PROC
;;;807    
;;;808    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
000362  b510              PUSH     {r4,lr}
;;;809    {
;;;810    BaseType_t xTimerIsInActiveList;
;;;811    Timer_t *pxTimer = ( Timer_t * ) xTimer;
000364  4604              MOV      r4,r0
;;;812    
;;;813    	/* Is the timer in the list of active timers? */
;;;814    	taskENTER_CRITICAL();
000366  f7fffffe          BL       vPortEnterCritical
;;;815    	{
;;;816    		/* Checking to see if it is in the NULL list in effect checks to see if
;;;817    		it is referenced from either the current or the overflow timer lists in
;;;818    		one go, but the logic has to be reversed, hence the '!'. */
;;;819    		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
00036a  6960              LDR      r0,[r4,#0x14]
00036c  2800              CMP      r0,#0
00036e  bf14              ITE      NE
000370  2401              MOVNE    r4,#1
000372  2400              MOVEQ    r4,#0
;;;820    	}
;;;821    	taskEXIT_CRITICAL();
000374  f7fffffe          BL       vPortExitCritical
;;;822    
;;;823    	return xTimerIsInActiveList;
000378  4620              MOV      r0,r4
;;;824    } /*lint !e818 Can't be pointer to const due to the typedef. */
00037a  bd10              POP      {r4,pc}
;;;825    /*-----------------------------------------------------------*/
                          ENDP

                  pvTimerGetTimerID PROC
;;;826    
;;;827    void *pvTimerGetTimerID( const TimerHandle_t xTimer )
00037c  b510              PUSH     {r4,lr}
;;;828    {
;;;829    Timer_t * const pxTimer = ( Timer_t * ) xTimer;
00037e  4604              MOV      r4,r0
;;;830    void *pvReturn;
;;;831    
;;;832    	configASSERT( xTimer );
;;;833    
;;;834    	taskENTER_CRITICAL();
000380  f7fffffe          BL       vPortEnterCritical
;;;835    	{
;;;836    		pvReturn = pxTimer->pvTimerID;
000384  6a24              LDR      r4,[r4,#0x20]
;;;837    	}
;;;838    	taskEXIT_CRITICAL();
000386  f7fffffe          BL       vPortExitCritical
;;;839    
;;;840    	return pvReturn;
00038a  4620              MOV      r0,r4
;;;841    }
00038c  bd10              POP      {r4,pc}
;;;842    /*-----------------------------------------------------------*/
                          ENDP

                  vTimerSetTimerID PROC
;;;843    
;;;844    void vTimerSetTimerID( const TimerHandle_t xTimer, void *pvNewID )
00038e  b570              PUSH     {r4-r6,lr}
;;;845    {
000390  460d              MOV      r5,r1
;;;846    Timer_t * const pxTimer = ( Timer_t * ) xTimer;
000392  4604              MOV      r4,r0
;;;847    
;;;848    	configASSERT( xTimer );
;;;849    
;;;850    	taskENTER_CRITICAL();
000394  f7fffffe          BL       vPortEnterCritical
;;;851    	{
;;;852    		pxTimer->pvTimerID = pvNewID;
;;;853    	}
;;;854    	taskEXIT_CRITICAL();
000398  6225              STR      r5,[r4,#0x20]
00039a  e8bd4070          POP      {r4-r6,lr}
00039e  f7ffbffe          B.W      vPortExitCritical
;;;855    }
;;;856    /*-----------------------------------------------------------*/
                          ENDP

                  prvSampleTimeNow PROC
;;;520    
;;;521    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
0003a2  e92d43f0          PUSH     {r4-r9,lr}
;;;522    {
0003a6  b083              SUB      sp,sp,#0xc
0003a8  4680              MOV      r8,r0
;;;523    TickType_t xTimeNow;
;;;524    PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */
;;;525    
;;;526    	xTimeNow = xTaskGetTickCount();
0003aa  f7fffffe          BL       xTaskGetTickCount
;;;527    
;;;528    	if( xTimeNow < xLastTime )
0003ae  4c11              LDR      r4,|L1.1012|
0003b0  4607              MOV      r7,r0                 ;526
0003b2  68a0              LDR      r0,[r4,#8]  ; xLastTime
0003b4  4287              CMP      r7,r0
;;;529    	{
;;;530    		prvSwitchTimerLists();
;;;531    		*pxTimerListsWereSwitched = pdTRUE;
;;;532    	}
;;;533    	else
;;;534    	{
;;;535    		*pxTimerListsWereSwitched = pdFALSE;
0003b6  bf28              IT       CS
0003b8  2000              MOVCS    r0,#0
0003ba  d244              BCS      |L1.1094|
0003bc  68e0              LDR      r0,[r4,#0xc]          ;528  ; pxCurrentTimerList
0003be  6800              LDR      r0,[r0,#0]            ;528
0003c0  2800              CMP      r0,#0                 ;528
0003c2  d03b              BEQ      |L1.1084|
                  |L1.964|
0003c4  68e0              LDR      r0,[r4,#0xc]          ;528  ; pxCurrentTimerList
0003c6  68c0              LDR      r0,[r0,#0xc]          ;528
0003c8  68c5              LDR      r5,[r0,#0xc]          ;528
0003ca  6806              LDR      r6,[r0,#0]            ;528
0003cc  1d28              ADDS     r0,r5,#4              ;528
0003ce  f7fffffe          BL       uxListRemove
0003d2  6a69              LDR      r1,[r5,#0x24]         ;528
0003d4  4628              MOV      r0,r5                 ;528
0003d6  4788              BLX      r1                    ;528
0003d8  69e8              LDR      r0,[r5,#0x1c]         ;528
0003da  2801              CMP      r0,#1                 ;528
0003dc  d12a              BNE      |L1.1076|
0003de  69a8              LDR      r0,[r5,#0x18]         ;528
0003e0  4430              ADD      r0,r0,r6              ;528
0003e2  42b0              CMP      r0,r6                 ;528
0003e4  d914              BLS      |L1.1040|
0003e6  612d              STR      r5,[r5,#0x10]         ;528
0003e8  6068              STR      r0,[r5,#4]            ;528
0003ea  1d29              ADDS     r1,r5,#4              ;528
0003ec  68e0              LDR      r0,[r4,#0xc]          ;528  ; pxCurrentTimerList
0003ee  f7fffffe          BL       vListInsert
0003f2  e01f              B        |L1.1076|
                  |L1.1012|
                          DCD      ||.data||
                  |L1.1016|
                          DCD      ||.bss||
                  |L1.1020|
                          DCD      ||.bss||+0x14
                  |L1.1024|
                          DCD      ||.data||+0x4
                  |L1.1028|
000404  546d7220          DCB      "Tmr Svc",0
000408  53766300
                  |L1.1036|
                          DCD      prvTimerTask
                  |L1.1040|
000410  2000              MOVS     r0,#0                 ;528
000412  6821              LDR      r1,[r4,#0]            ;528  ; xTimerQueue
000414  4681              MOV      r9,r0                 ;528
000416  b169              CBZ      r1,|L1.1076|
000418  e9cd0600          STRD     r0,r6,[sp,#0]         ;528
00041c  9502              STR      r5,[sp,#8]            ;528
00041e  f7fffffe          BL       xTaskGetSchedulerState
000422  2802              CMP      r0,#2                 ;528
000424  f04f0300          MOV      r3,#0                 ;528
000428  d014              BEQ      |L1.1108|
00042a  2200              MOVS     r2,#0                 ;528
00042c  4669              MOV      r1,sp                 ;528
00042e  6820              LDR      r0,[r4,#0]            ;528  ; xTimerQueue
000430  f7fffffe          BL       xQueueGenericSend
                  |L1.1076|
000434  68e0              LDR      r0,[r4,#0xc]          ;528  ; pxCurrentTimerList
000436  6800              LDR      r0,[r0,#0]            ;528
000438  2800              CMP      r0,#0                 ;528
00043a  d1c3              BNE      |L1.964|
                  |L1.1084|
00043c  e9d41003          LDRD     r1,r0,[r4,#0xc]       ;528
000440  e9c40103          STRD     r0,r1,[r4,#0xc]       ;528
000444  2001              MOVS     r0,#1                 ;531
                  |L1.1094|
;;;536    	}
;;;537    
;;;538    	xLastTime = xTimeNow;
000446  f8c80000          STR      r0,[r8,#0]
;;;539    
;;;540    	return xTimeNow;
00044a  60a7              STR      r7,[r4,#8]  ; xLastTime
;;;541    }
00044c  b003              ADD      sp,sp,#0xc
00044e  4638              MOV      r0,r7                 ;540
000450  e8bd83f0          POP      {r4-r9,pc}
                  |L1.1108|
000454  464a              MOV      r2,r9
000456  4669              MOV      r1,sp
000458  6820              LDR      r0,[r4,#0]  ; xTimerQueue
00045a  f7fffffe          BL       xQueueGenericSend
00045e  e7e9              B        |L1.1076|
;;;542    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  xActiveTimerList1
                          %        20
                  xActiveTimerList2
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  xTimerQueue
                          DCD      0x00000000
                  xTimerTaskHandle
                          DCD      0x00000000
                  xLastTime
                          DCD      0x00000000
                  pxCurrentTimerList
                          DCD      0x00000000
                  pxOverflowTimerList
                          DCD      0x00000000
