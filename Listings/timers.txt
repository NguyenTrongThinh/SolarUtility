; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\timers.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\timers.d --cpu=Cortex-M3 --apcs=interwork -Otime --diag_suppress=9931 -I.\Driver -I.\Application -I.\System\FreeRTOS\include -I.\System\FreeRTOS\portable\MemMang -I.\System\FreeRTOS\portable\RVDS\ARM_CM3 -I.\System\Libraries\CMSIS\CM3\CoreSupport -I.\System\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I.\System\Libraries\STM32F10x_StdPeriph_Driver\inc -ID:\EmbeddedSystem\STM32F10xx\SolarUtility\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=515 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\objects\timers.crf System\FreeRTOS\timers.c]
                          THUMB

                          AREA ||i.pcTimerGetTimerName||, CODE, READONLY, ALIGN=1

                  pcTimerGetTimerName PROC
;;;369    
;;;370    const char * pcTimerGetTimerName( TimerHandle_t xTimer )
000000  6800              LDR      r0,[r0,#0]
;;;371    {
;;;372    Timer_t *pxTimer = ( Timer_t * ) xTimer;
;;;373    
;;;374    	return pxTimer->pcTimerName;
;;;375    }
000002  4770              BX       lr
;;;376    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.prvInsertTimerInActiveList||, CODE, READONLY, ALIGN=2

                  prvInsertTimerInActiveList PROC
;;;543    
;;;544    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
000000  b510              PUSH     {r4,lr}
;;;545    {
;;;546    BaseType_t xProcessTimerNow = pdFALSE;
000002  2400              MOVS     r4,#0
;;;547    
;;;548    	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
;;;549    	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
000004  6041              STR      r1,[r0,#4]
;;;550    
;;;551    	if( xNextExpiryTime <= xTimeNow )
;;;552    	{
;;;553    		/* Has the expiry time elapsed between the command to start/reset a
;;;554    		timer was issued, and the time the command was processed? */
;;;555    		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
;;;556    		{
;;;557    			/* The time between a command being issued and the command being
;;;558    			processed actually exceeds the timers period.  */
;;;559    			xProcessTimerNow = pdTRUE;
;;;560    		}
;;;561    		else
;;;562    		{
;;;563    			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
000006  f8dfc034          LDR      r12,|L2.60|
00000a  6100              STR      r0,[r0,#0x10]         ;549
00000c  4291              CMP      r1,r2                 ;551
00000e  d808              BHI      |L2.34|
000010  1ad1              SUBS     r1,r2,r3              ;555
000012  6982              LDR      r2,[r0,#0x18]         ;555
000014  4291              CMP      r1,r2                 ;555
000016  bf3c              ITT      CC
000018  1d01              ADDCC    r1,r0,#4
00001a  f8dc0010          LDRCC    r0,[r12,#0x10]  ; pxOverflowTimerList
00001e  d204              BCS      |L2.42|
000020  e008              B        |L2.52|
                  |L2.34|
;;;564    		}
;;;565    	}
;;;566    	else
;;;567    	{
;;;568    		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
000022  4293              CMP      r3,r2
000024  d903              BLS      |L2.46|
000026  428b              CMP      r3,r1
000028  d801              BHI      |L2.46|
                  |L2.42|
;;;569    		{
;;;570    			/* If, since the command was issued, the tick count has overflowed
;;;571    			but the expiry time has not, then the timer must have already passed
;;;572    			its expiry time and should be processed immediately. */
;;;573    			xProcessTimerNow = pdTRUE;
00002a  2401              MOVS     r4,#1
00002c  e004              B        |L2.56|
                  |L2.46|
;;;574    		}
;;;575    		else
;;;576    		{
;;;577    			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
00002e  1d01              ADDS     r1,r0,#4
000030  f8dc000c          LDR      r0,[r12,#0xc]  ; pxCurrentTimerList
                  |L2.52|
000034  f7fffffe          BL       vListInsert
                  |L2.56|
;;;578    		}
;;;579    	}
;;;580    
;;;581    	return xProcessTimerNow;
000038  4620              MOV      r0,r4
;;;582    }
00003a  bd10              POP      {r4,pc}
;;;583    /*-----------------------------------------------------------*/
                          ENDP

                  |L2.60|
                          DCD      ||.data||

                          AREA ||i.prvSampleTimeNow||, CODE, READONLY, ALIGN=2

                  prvSampleTimeNow PROC
;;;520    
;;;521    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;522    {
000004  b083              SUB      sp,sp,#0xc
000006  4607              MOV      r7,r0
;;;523    TickType_t xTimeNow;
;;;524    PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */
;;;525    
;;;526    	xTimeNow = xTaskGetTickCount();
000008  f7fffffe          BL       xTaskGetTickCount
;;;527    
;;;528    	if( xTimeNow < xLastTime )
00000c  4e25              LDR      r6,|L3.164|
00000e  4680              MOV      r8,r0                 ;526
000010  68b0              LDR      r0,[r6,#8]  ; xLastTime
000012  4580              CMP      r8,r0
;;;529    	{
;;;530    		prvSwitchTimerLists();
;;;531    		*pxTimerListsWereSwitched = pdTRUE;
;;;532    	}
;;;533    	else
;;;534    	{
;;;535    		*pxTimerListsWereSwitched = pdFALSE;
000014  bf28              IT       CS
000016  2000              MOVCS    r0,#0
000018  d236              BCS      |L3.136|
00001a  68f0              LDR      r0,[r6,#0xc]          ;528  ; pxCurrentTimerList
00001c  6800              LDR      r0,[r0,#0]            ;528
00001e  2800              CMP      r0,#0                 ;528
000020  d02d              BEQ      |L3.126|
                  |L3.34|
000022  68f0              LDR      r0,[r6,#0xc]          ;528  ; pxCurrentTimerList
000024  68c0              LDR      r0,[r0,#0xc]          ;528
000026  68c4              LDR      r4,[r0,#0xc]          ;528
000028  6805              LDR      r5,[r0,#0]            ;528
00002a  1d20              ADDS     r0,r4,#4              ;528
00002c  f7fffffe          BL       uxListRemove
000030  6a61              LDR      r1,[r4,#0x24]         ;528
000032  4620              MOV      r0,r4                 ;528
000034  4788              BLX      r1                    ;528
000036  69e0              LDR      r0,[r4,#0x1c]         ;528
000038  2801              CMP      r0,#1                 ;528
00003a  d11c              BNE      |L3.118|
00003c  69a0              LDR      r0,[r4,#0x18]         ;528
00003e  4428              ADD      r0,r0,r5              ;528
000040  42a8              CMP      r0,r5                 ;528
000042  d906              BLS      |L3.82|
000044  6124              STR      r4,[r4,#0x10]         ;528
000046  6060              STR      r0,[r4,#4]            ;528
000048  1d21              ADDS     r1,r4,#4              ;528
00004a  68f0              LDR      r0,[r6,#0xc]          ;528  ; pxCurrentTimerList
00004c  f7fffffe          BL       vListInsert
000050  e011              B        |L3.118|
                  |L3.82|
000052  2000              MOVS     r0,#0                 ;528
000054  6831              LDR      r1,[r6,#0]            ;528  ; xTimerQueue
000056  4681              MOV      r9,r0                 ;528
000058  b169              CBZ      r1,|L3.118|
00005a  e9cd0500          STRD     r0,r5,[sp,#0]         ;528
00005e  9402              STR      r4,[sp,#8]            ;528
000060  f7fffffe          BL       xTaskGetSchedulerState
000064  2802              CMP      r0,#2                 ;528
000066  f04f0300          MOV      r3,#0                 ;528
00006a  d014              BEQ      |L3.150|
00006c  2200              MOVS     r2,#0                 ;528
00006e  4669              MOV      r1,sp                 ;528
000070  6830              LDR      r0,[r6,#0]            ;528  ; xTimerQueue
000072  f7fffffe          BL       xQueueGenericSend
                  |L3.118|
000076  68f0              LDR      r0,[r6,#0xc]          ;528  ; pxCurrentTimerList
000078  6800              LDR      r0,[r0,#0]            ;528
00007a  2800              CMP      r0,#0                 ;528
00007c  d1d1              BNE      |L3.34|
                  |L3.126|
00007e  e9d61003          LDRD     r1,r0,[r6,#0xc]       ;528
000082  e9c60103          STRD     r0,r1,[r6,#0xc]       ;528
000086  2001              MOVS     r0,#1                 ;531
                  |L3.136|
;;;536    	}
;;;537    
;;;538    	xLastTime = xTimeNow;
000088  6038              STR      r0,[r7,#0]
;;;539    
;;;540    	return xTimeNow;
00008a  f8c68008          STR      r8,[r6,#8]  ; xLastTime
;;;541    }
00008e  b003              ADD      sp,sp,#0xc
000090  4640              MOV      r0,r8                 ;540
000092  e8bd83f0          POP      {r4-r9,pc}
                  |L3.150|
000096  464a              MOV      r2,r9
000098  4669              MOV      r1,sp
00009a  6830              LDR      r0,[r6,#0]  ; xTimerQueue
00009c  f7fffffe          BL       xQueueGenericSend
0000a0  e7e9              B        |L3.118|
;;;542    /*-----------------------------------------------------------*/
                          ENDP

0000a2  0000              DCW      0x0000
                  |L3.164|
                          DCD      ||.data||

                          AREA ||i.prvTimerTask||, CODE, READONLY, ALIGN=2

                  prvTimerTask PROC
;;;417    
;;;418    static void prvTimerTask( void *pvParameters )
000000  4d5e              LDR      r5,|L4.380|
;;;419    {
000002  b088              SUB      sp,sp,#0x20
000004  2600              MOVS     r6,#0
                  |L4.6|
000006  68e8              LDR      r0,[r5,#0xc]  ; pxCurrentTimerList
000008  6801              LDR      r1,[r0,#0]
00000a  2900              CMP      r1,#0
00000c  bf0c              ITE      EQ
00000e  f04f0801          MOVEQ    r8,#1
000012  f04f0800          MOVNE    r8,#0
000016  f1b80f00          CMP      r8,#0
00001a  bf06              ITTE     EQ
00001c  68c0              LDREQ    r0,[r0,#0xc]
00001e  6807              LDREQ    r7,[r0,#0]
000020  2700              MOVNE    r7,#0
000022  f7fffffe          BL       vTaskSuspendAll
000026  a801              ADD      r0,sp,#4
000028  f7fffffe          BL       prvSampleTimeNow
00002c  4604              MOV      r4,r0
00002e  9801              LDR      r0,[sp,#4]
000030  b300              CBZ      r0,|L4.116|
000032  f7fffffe          BL       xTaskResumeAll
                  |L4.54|
000036  2300              MOVS     r3,#0
000038  461a              MOV      r2,r3
00003a  4669              MOV      r1,sp
00003c  6828              LDR      r0,[r5,#0]  ; xTimerQueue
00003e  f7fffffe          BL       xQueueGenericReceive
000042  2800              CMP      r0,#0
000044  d0df              BEQ      |L4.6|
                  |L4.70|
000046  9800              LDR      r0,[sp,#0]
000048  2800              CMP      r0,#0
00004a  db5c              BLT      |L4.262|
00004c  9c02              LDR      r4,[sp,#8]
00004e  6960              LDR      r0,[r4,#0x14]
000050  2800              CMP      r0,#0
000052  bf1c              ITT      NE
000054  1d20              ADDNE    r0,r4,#4
000056  f7fffffe          BLNE     uxListRemove
00005a  a806              ADD      r0,sp,#0x18
00005c  f7fffffe          BL       prvSampleTimeNow
000060  9900              LDR      r1,[sp,#0]
000062  290a              CMP      r1,#0xa
000064  d27f              BCS      |L4.358|
000066  e8dff001          TBB      [pc,r1]
00006a  3535              DCB      0x35,0x35
00006c  357e6b7b          DCB      0x35,0x7e,0x6b,0x7b
000070  35357e6b          DCB      0x35,0x35,0x7e,0x6b
                  |L4.116|
000074  f1b80f00          CMP      r8,#0
000078  d121              BNE      |L4.190|
00007a  42a7              CMP      r7,r4
00007c  d81f              BHI      |L4.190|
00007e  f7fffffe          BL       xTaskResumeAll
000082  68e8              LDR      r0,[r5,#0xc]  ; pxCurrentTimerList
000084  46a0              MOV      r8,r4
000086  68c0              LDR      r0,[r0,#0xc]
000088  68c4              LDR      r4,[r0,#0xc]
00008a  1d20              ADDS     r0,r4,#4
00008c  f7fffffe          BL       uxListRemove
000090  69e0              LDR      r0,[r4,#0x1c]
000092  2801              CMP      r0,#1
000094  d10f              BNE      |L4.182|
000096  69a0              LDR      r0,[r4,#0x18]
000098  463b              MOV      r3,r7
00009a  19c1              ADDS     r1,r0,r7
00009c  4642              MOV      r2,r8
00009e  4620              MOV      r0,r4
0000a0  f7fffffe          BL       prvInsertTimerInActiveList
0000a4  2801              CMP      r0,#1
0000a6  d106              BNE      |L4.182|
0000a8  2300              MOVS     r3,#0
0000aa  463a              MOV      r2,r7
0000ac  4619              MOV      r1,r3
0000ae  4620              MOV      r0,r4
0000b0  9600              STR      r6,[sp,#0]
0000b2  f7fffffe          BL       xTimerGenericCommand
                  |L4.182|
0000b6  6a61              LDR      r1,[r4,#0x24]
0000b8  4620              MOV      r0,r4
0000ba  4788              BLX      r1
0000bc  e7bb              B        |L4.54|
                  |L4.190|
0000be  1b39              SUBS     r1,r7,r4
0000c0  6828              LDR      r0,[r5,#0]  ; xTimerQueue
0000c2  f7fffffe          BL       vQueueWaitForMessageRestricted
0000c6  f7fffffe          BL       xTaskResumeAll
0000ca  2800              CMP      r0,#0
0000cc  bf08              IT       EQ
0000ce  f7fffffe          BLEQ     vPortYield
0000d2  e7b0              B        |L4.54|
0000d4  9901              LDR      r1,[sp,#4]
0000d6  69a2              LDR      r2,[r4,#0x18]
0000d8  6124              STR      r4,[r4,#0x10]
0000da  440a              ADD      r2,r2,r1
0000dc  6062              STR      r2,[r4,#4]
0000de  4282              CMP      r2,r0
0000e0  d804              BHI      |L4.236|
0000e2  1a41              SUBS     r1,r0,r1
0000e4  69a0              LDR      r0,[r4,#0x18]
0000e6  4281              CMP      r1,r0
0000e8  d204              BCS      |L4.244|
0000ea  e033              B        |L4.340|
                  |L4.236|
0000ec  4281              CMP      r1,r0
0000ee  d934              BLS      |L4.346|
0000f0  4291              CMP      r1,r2
0000f2  d832              BHI      |L4.346|
                  |L4.244|
0000f4  6a61              LDR      r1,[r4,#0x24]
0000f6  4620              MOV      r0,r4
0000f8  4788              BLX      r1
0000fa  69e0              LDR      r0,[r4,#0x1c]
0000fc  2801              CMP      r0,#1
0000fe  d132              BNE      |L4.358|
000100  e002              B        |L4.264|
                  |L4.258|
000102  f7fffffe          BL       vListInsert
                  |L4.262|
000106  e02e              B        |L4.358|
                  |L4.264|
000108  9901              LDR      r1,[sp,#4]
00010a  69a2              LDR      r2,[r4,#0x18]
00010c  2000              MOVS     r0,#0
00010e  4411              ADD      r1,r1,r2
000110  682a              LDR      r2,[r5,#0]  ; xTimerQueue
000112  4607              MOV      r7,r0
000114  b33a              CBZ      r2,|L4.358|
000116  9405              STR      r4,[sp,#0x14]
000118  e9cd0103          STRD     r0,r1,[sp,#0xc]
00011c  f7fffffe          BL       xTaskGetSchedulerState
000120  2802              CMP      r0,#2
000122  f04f0300          MOV      r3,#0
000126  d005              BEQ      |L4.308|
000128  2200              MOVS     r2,#0
00012a  a903              ADD      r1,sp,#0xc
00012c  6828              LDR      r0,[r5,#0]  ; xTimerQueue
00012e  f7fffffe          BL       xQueueGenericSend
000132  e018              B        |L4.358|
                  |L4.308|
000134  463a              MOV      r2,r7
000136  a903              ADD      r1,sp,#0xc
000138  6828              LDR      r0,[r5,#0]  ; xTimerQueue
00013a  f7fffffe          BL       xQueueGenericSend
00013e  e012              B        |L4.358|
000140  9901              LDR      r1,[sp,#4]
000142  61a1              STR      r1,[r4,#0x18]
000144  4401              ADD      r1,r1,r0
000146  6124              STR      r4,[r4,#0x10]
000148  6061              STR      r1,[r4,#4]
00014a  4288              CMP      r0,r1
00014c  d305              BCC      |L4.346|
00014e  69a0              LDR      r0,[r4,#0x18]
000150  2800              CMP      r0,#0
000152  d908              BLS      |L4.358|
                  |L4.340|
000154  1d21              ADDS     r1,r4,#4
000156  6928              LDR      r0,[r5,#0x10]  ; pxOverflowTimerList
000158  e7d3              B        |L4.258|
                  |L4.346|
00015a  1d21              ADDS     r1,r4,#4
00015c  68e8              LDR      r0,[r5,#0xc]  ; pxCurrentTimerList
00015e  e7d0              B        |L4.258|
000160  4620              MOV      r0,r4
000162  f7fffffe          BL       vPortFree
                  |L4.358|
000166  2300              MOVS     r3,#0
000168  461a              MOV      r2,r3
00016a  4669              MOV      r1,sp
00016c  6828              LDR      r0,[r5,#0]  ; xTimerQueue
00016e  f7fffffe          BL       xQueueGenericReceive
000172  2800              CMP      r0,#0
000174  f47faf67          BNE      |L4.70|
000178  e745              B        |L4.6|
;;;420    TickType_t xNextExpireTime;
;;;421    BaseType_t xListWasEmpty;
;;;422    
;;;423    	/* Just to avoid compiler warnings. */
;;;424    	( void ) pvParameters;
;;;425    
;;;426    	for( ;; )
;;;427    	{
;;;428    		/* Query the timers list to see if it contains any timers, and if so,
;;;429    		obtain the time at which the next timer will expire. */
;;;430    		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
;;;431    
;;;432    		/* If a timer has expired, process it.  Otherwise, block this task
;;;433    		until either a timer does expire, or a command is received. */
;;;434    		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
;;;435    
;;;436    		/* Empty the command queue. */
;;;437    		prvProcessReceivedCommands();
;;;438    	}
;;;439    }
;;;440    /*-----------------------------------------------------------*/
                          ENDP

00017a  0000              DCW      0x0000
                  |L4.380|
                          DCD      ||.data||

                          AREA ||i.pvTimerGetTimerID||, CODE, READONLY, ALIGN=1

                  pvTimerGetTimerID PROC
;;;826    
;;;827    void *pvTimerGetTimerID( const TimerHandle_t xTimer )
000000  b510              PUSH     {r4,lr}
;;;828    {
000002  4604              MOV      r4,r0
;;;829    Timer_t * const pxTimer = ( Timer_t * ) xTimer;
;;;830    void *pvReturn;
;;;831    
;;;832    	configASSERT( xTimer );
;;;833    
;;;834    	taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;835    	{
;;;836    		pvReturn = pxTimer->pvTimerID;
000008  6a24              LDR      r4,[r4,#0x20]
;;;837    	}
;;;838    	taskEXIT_CRITICAL();
00000a  f7fffffe          BL       vPortExitCritical
;;;839    
;;;840    	return pvReturn;
00000e  4620              MOV      r0,r4
;;;841    }
000010  bd10              POP      {r4,pc}
;;;842    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vTimerSetTimerID||, CODE, READONLY, ALIGN=1

                  vTimerSetTimerID PROC
;;;843    
;;;844    void vTimerSetTimerID( const TimerHandle_t xTimer, void *pvNewID )
000000  b570              PUSH     {r4-r6,lr}
;;;845    {
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;846    Timer_t * const pxTimer = ( Timer_t * ) xTimer;
;;;847    
;;;848    	configASSERT( xTimer );
;;;849    
;;;850    	taskENTER_CRITICAL();
000006  f7fffffe          BL       vPortEnterCritical
;;;851    	{
;;;852    		pxTimer->pvTimerID = pvNewID;
;;;853    	}
;;;854    	taskEXIT_CRITICAL();
00000a  6225              STR      r5,[r4,#0x20]
00000c  e8bd4070          POP      {r4-r6,lr}
000010  f7ffbffe          B.W      vPortExitCritical
;;;855    }
;;;856    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xTimerCreate||, CODE, READONLY, ALIGN=2

                  xTimerCreate PROC
;;;274    
;;;275    TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;276    {
000004  4698              MOV      r8,r3
000006  9e08              LDR      r6,[sp,#0x20]
000008  4691              MOV      r9,r2
00000a  000d              MOVS     r5,r1
00000c  4682              MOV      r10,r0
;;;277    Timer_t *pxNewTimer;
;;;278    
;;;279    	/* Allocate the timer structure. */
;;;280    	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
;;;281    	{
;;;282    		pxNewTimer = NULL;
00000e  bf08              IT       EQ
000010  2400              MOVEQ    r4,#0
000012  d024              BEQ      |L7.94|
;;;283    	}
;;;284    	else
;;;285    	{
;;;286    		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
000014  2028              MOVS     r0,#0x28
000016  f7fffffe          BL       pvPortMalloc
00001a  0004              MOVS     r4,r0
;;;287    		if( pxNewTimer != NULL )
00001c  d01f              BEQ      |L7.94|
00001e  f7fffffe          BL       vPortEnterCritical
000022  4f10              LDR      r7,|L7.100|
000024  6838              LDR      r0,[r7,#0]  ; xTimerQueue
000026  b978              CBNZ     r0,|L7.72|
000028  480f              LDR      r0,|L7.104|
00002a  f7fffffe          BL       vListInitialise
00002e  480f              LDR      r0,|L7.108|
000030  f7fffffe          BL       vListInitialise
000034  480c              LDR      r0,|L7.104|
000036  60f8              STR      r0,[r7,#0xc]  ; pxCurrentTimerList
000038  3014              ADDS     r0,r0,#0x14
00003a  6138              STR      r0,[r7,#0x10]  ; pxOverflowTimerList
00003c  2200              MOVS     r2,#0
00003e  210c              MOVS     r1,#0xc
000040  2001              MOVS     r0,#1
000042  f7fffffe          BL       xQueueGenericCreate
000046  6038              STR      r0,[r7,#0]  ; xTimerQueue
                  |L7.72|
000048  f7fffffe          BL       vPortExitCritical
;;;288    		{
;;;289    			/* Ensure the infrastructure used by the timer service task has been
;;;290    			created/initialised. */
;;;291    			prvCheckForValidListAndQueue();
;;;292    
;;;293    			/* Initialise the timer structure members using the function parameters. */
;;;294    			pxNewTimer->pcTimerName = pcTimerName;
;;;295    			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
;;;296    			pxNewTimer->uxAutoReload = uxAutoReload;
;;;297    			pxNewTimer->pvTimerID = pvTimerID;
;;;298    			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
;;;299    			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
00004c  f8c4a000          STR      r10,[r4,#0]
000050  e9c45906          STRD     r5,r9,[r4,#0x18]
000054  e9c48608          STRD     r8,r6,[r4,#0x20]
000058  1d20              ADDS     r0,r4,#4
00005a  f7fffffe          BL       vListInitialiseItem
                  |L7.94|
;;;300    
;;;301    			traceTIMER_CREATE( pxNewTimer );
;;;302    		}
;;;303    		else
;;;304    		{
;;;305    			traceTIMER_CREATE_FAILED();
;;;306    		}
;;;307    	}
;;;308    
;;;309    	/* 0 is not a valid value for xTimerPeriodInTicks. */
;;;310    	configASSERT( ( xTimerPeriodInTicks > 0 ) );
;;;311    
;;;312    	return ( TimerHandle_t ) pxNewTimer;
00005e  4620              MOV      r0,r4
;;;313    }
000060  e8bd87f0          POP      {r4-r10,pc}
;;;314    /*-----------------------------------------------------------*/
                          ENDP

                  |L7.100|
                          DCD      ||.data||
                  |L7.104|
                          DCD      ||.bss||
                  |L7.108|
                          DCD      ||.bss||+0x14

                          AREA ||i.xTimerCreateTimerTask||, CODE, READONLY, ALIGN=2

                  xTimerCreateTimerTask PROC
;;;239    
;;;240    BaseType_t xTimerCreateTimerTask( void )
000000  b530              PUSH     {r4,r5,lr}
;;;241    {
000002  b085              SUB      sp,sp,#0x14
;;;242    BaseType_t xReturn = pdFAIL;
000004  2400              MOVS     r4,#0
000006  f7fffffe          BL       vPortEnterCritical
00000a  4d14              LDR      r5,|L8.92|
00000c  6828              LDR      r0,[r5,#0]  ; xTimerQueue
00000e  b978              CBNZ     r0,|L8.48|
000010  4813              LDR      r0,|L8.96|
000012  f7fffffe          BL       vListInitialise
000016  4813              LDR      r0,|L8.100|
000018  f7fffffe          BL       vListInitialise
00001c  4810              LDR      r0,|L8.96|
00001e  60e8              STR      r0,[r5,#0xc]  ; pxCurrentTimerList
000020  3014              ADDS     r0,r0,#0x14
000022  6128              STR      r0,[r5,#0x10]  ; pxOverflowTimerList
000024  2200              MOVS     r2,#0
000026  210c              MOVS     r1,#0xc
000028  2001              MOVS     r0,#1
00002a  f7fffffe          BL       xQueueGenericCreate
00002e  6028              STR      r0,[r5,#0]  ; xTimerQueue
                  |L8.48|
000030  f7fffffe          BL       vPortExitCritical
;;;243    
;;;244    	/* This function is called when the scheduler is started if
;;;245    	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
;;;246    	timer service task has been created/initialised.  If timers have already
;;;247    	been created then the initialisation will already have been performed. */
;;;248    	prvCheckForValidListAndQueue();
;;;249    
;;;250    	if( xTimerQueue != NULL )
000034  6828              LDR      r0,[r5,#0]  ; xTimerQueue
000036  b168              CBZ      r0,|L8.84|
;;;251    	{
;;;252    		#if ( INCLUDE_xTimerGetTimerDaemonTaskHandle == 1 )
;;;253    		{
;;;254    			/* Create the timer task, storing its handle in xTimerTaskHandle so
;;;255    			it can be returned by the xTimerGetTimerDaemonTaskHandle() function. */
;;;256    			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
000038  2201              MOVS     r2,#1
00003a  2000              MOVS     r0,#0
00003c  9200              STR      r2,[sp,#0]
00003e  490a              LDR      r1,|L8.104|
000040  e9cd1001          STRD     r1,r0,[sp,#4]
000044  4603              MOV      r3,r0
000046  9003              STR      r0,[sp,#0xc]
000048  2280              MOVS     r2,#0x80
00004a  a108              ADR      r1,|L8.108|
00004c  4809              LDR      r0,|L8.116|
00004e  f7fffffe          BL       xTaskGenericCreate
000052  4604              MOV      r4,r0
                  |L8.84|
;;;257    		}
;;;258    		#else
;;;259    		{
;;;260    			/* Create the timer task without storing its handle. */
;;;261    			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
;;;262    		}
;;;263    		#endif
;;;264    	}
;;;265    	else
;;;266    	{
;;;267    		mtCOVERAGE_TEST_MARKER();
;;;268    	}
;;;269    
;;;270    	configASSERT( xReturn );
;;;271    	return xReturn;
;;;272    }
000054  b005              ADD      sp,sp,#0x14
000056  4620              MOV      r0,r4                 ;271
000058  bd30              POP      {r4,r5,pc}
;;;273    /*-----------------------------------------------------------*/
                          ENDP

00005a  0000              DCW      0x0000
                  |L8.92|
                          DCD      ||.data||
                  |L8.96|
                          DCD      ||.bss||
                  |L8.100|
                          DCD      ||.bss||+0x14
                  |L8.104|
                          DCD      ||.data||+0x4
                  |L8.108|
00006c  546d7220          DCB      "Tmr Svc",0
000070  53766300
                  |L8.116|
                          DCD      prvTimerTask

                          AREA ||i.xTimerGenericCommand||, CODE, READONLY, ALIGN=2

                  xTimerGenericCommand PROC
;;;315    
;;;316    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;317    {
;;;318    BaseType_t xReturn = pdFAIL;
;;;319    DaemonTaskMessage_t xMessage;
;;;320    
;;;321    	/* Send a message to the timer service task to perform a particular action
;;;322    	on a particular timer definition. */
;;;323    	if( xTimerQueue != NULL )
000002  4c15              LDR      r4,|L9.88|
000004  b084              SUB      sp,sp,#0x10           ;317
000006  469c              MOV      r12,r3                ;317
000008  4606              MOV      r6,r0                 ;317
00000a  4613              MOV      r3,r2                 ;317
00000c  9d08              LDR      r5,[sp,#0x20]
00000e  6820              LDR      r0,[r4,#0]            ;317  ; xTimerQueue
000010  2200              MOVS     r2,#0                 ;318
000012  b1e8              CBZ      r0,|L9.80|
;;;324    	{
;;;325    		/* Send a command to the timer service task to start the xTimer timer. */
;;;326    		xMessage.xMessageID = xCommandID;
;;;327    		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
;;;328    		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
000014  e9cd1300          STRD     r1,r3,[sp,#0]
000018  9602              STR      r6,[sp,#8]
;;;329    
;;;330    		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
00001a  2906              CMP      r1,#6
00001c  da12              BGE      |L9.68|
;;;331    		{
;;;332    			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
00001e  f7fffffe          BL       xTaskGetSchedulerState
000022  2802              CMP      r0,#2
;;;333    			{
;;;334    				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
;;;335    			}
;;;336    			else
;;;337    			{
;;;338    				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
000024  f04f0300          MOV      r3,#0
000028  d005              BEQ      |L9.54|
00002a  2200              MOVS     r2,#0
00002c  4669              MOV      r1,sp
00002e  6820              LDR      r0,[r4,#0]  ; xTimerQueue
000030  f7fffffe          BL       xQueueGenericSend
000034  e00b              B        |L9.78|
                  |L9.54|
000036  462a              MOV      r2,r5                 ;334
000038  4669              MOV      r1,sp                 ;334
00003a  6820              LDR      r0,[r4,#0]            ;334  ; xTimerQueue
00003c  f7fffffe          BL       xQueueGenericSend
000040  4602              MOV      r2,r0                 ;334
000042  e005              B        |L9.80|
                  |L9.68|
;;;339    			}
;;;340    		}
;;;341    		else
;;;342    		{
;;;343    			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
000044  2300              MOVS     r3,#0
000046  4662              MOV      r2,r12
000048  4669              MOV      r1,sp
00004a  f7fffffe          BL       xQueueGenericSendFromISR
                  |L9.78|
00004e  4602              MOV      r2,r0
                  |L9.80|
;;;344    		}
;;;345    
;;;346    		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
;;;347    	}
;;;348    	else
;;;349    	{
;;;350    		mtCOVERAGE_TEST_MARKER();
;;;351    	}
;;;352    
;;;353    	return xReturn;
;;;354    }
000050  b004              ADD      sp,sp,#0x10
000052  4610              MOV      r0,r2                 ;353
000054  bd70              POP      {r4-r6,pc}
;;;355    /*-----------------------------------------------------------*/
                          ENDP

000056  0000              DCW      0x0000
                  |L9.88|
                          DCD      ||.data||

                          AREA ||i.xTimerGetTimerDaemonTaskHandle||, CODE, READONLY, ALIGN=2

                  xTimerGetTimerDaemonTaskHandle PROC
;;;358    
;;;359    	TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
000000  4801              LDR      r0,|L10.8|
;;;360    	{
;;;361    		/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
;;;362    		started, then xTimerTaskHandle will be NULL. */
;;;363    		configASSERT( ( xTimerTaskHandle != NULL ) );
;;;364    		return xTimerTaskHandle;
000002  6840              LDR      r0,[r0,#4]  ; xTimerTaskHandle
;;;365    	}
000004  4770              BX       lr
;;;366    
                          ENDP

000006  0000              DCW      0x0000
                  |L10.8|
                          DCD      ||.data||

                          AREA ||i.xTimerIsTimerActive||, CODE, READONLY, ALIGN=1

                  xTimerIsTimerActive PROC
;;;807    
;;;808    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
000000  b510              PUSH     {r4,lr}
;;;809    {
000002  4604              MOV      r4,r0
;;;810    BaseType_t xTimerIsInActiveList;
;;;811    Timer_t *pxTimer = ( Timer_t * ) xTimer;
;;;812    
;;;813    	/* Is the timer in the list of active timers? */
;;;814    	taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;815    	{
;;;816    		/* Checking to see if it is in the NULL list in effect checks to see if
;;;817    		it is referenced from either the current or the overflow timer lists in
;;;818    		one go, but the logic has to be reversed, hence the '!'. */
;;;819    		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
000008  6960              LDR      r0,[r4,#0x14]
00000a  2800              CMP      r0,#0
00000c  bf14              ITE      NE
00000e  2401              MOVNE    r4,#1
000010  2400              MOVEQ    r4,#0
;;;820    	}
;;;821    	taskEXIT_CRITICAL();
000012  f7fffffe          BL       vPortExitCritical
;;;822    
;;;823    	return xTimerIsInActiveList;
000016  4620              MOV      r0,r4
;;;824    } /*lint !e818 Can't be pointer to const due to the typedef. */
000018  bd10              POP      {r4,pc}
;;;825    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  xActiveTimerList1
                          %        20
                  xActiveTimerList2
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  xTimerQueue
                          DCD      0x00000000
                  xTimerTaskHandle
                          DCD      0x00000000
                  xLastTime
                          DCD      0x00000000
                  pxCurrentTimerList
                          DCD      0x00000000
                  pxOverflowTimerList
                          DCD      0x00000000
