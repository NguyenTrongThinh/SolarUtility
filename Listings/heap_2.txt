; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\heap_2.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\heap_2.d --cpu=Cortex-M3 --apcs=interwork -Otime --diag_suppress=9931 -I.\Driver -I.\Application -I.\System\FreeRTOS\include -I.\System\FreeRTOS\portable\MemMang -I.\System\FreeRTOS\portable\RVDS\ARM_CM3 -I.\System\Libraries\CMSIS\CM3\CoreSupport -I.\System\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I.\System\Libraries\STM32F10x_StdPeriph_Driver\inc -ID:\EmbeddedSystem\STM32F10xx\SolarUtility\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=515 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\objects\heap_2.crf System\FreeRTOS\portable\MemMang\heap_2.c]
                          THUMB

                          AREA ||i.pvPortMalloc||, CODE, READONLY, ALIGN=2

                  pvPortMalloc PROC
;;;148    
;;;149    void *pvPortMalloc( size_t xWantedSize )
000000  b570              PUSH     {r4-r6,lr}
;;;150    {
000002  4604              MOV      r4,r0
;;;151    BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
;;;152    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
;;;153    void *pvReturn = NULL;
000004  2500              MOVS     r5,#0
;;;154    
;;;155    	vTaskSuspendAll();
000006  f7fffffe          BL       vTaskSuspendAll
;;;156    	{
;;;157    		/* If this is the first call to malloc then the heap will require
;;;158    		initialisation to setup the list of free blocks. */
;;;159    		if( xHeapHasBeenInitialised == pdFALSE )
00000a  4e29              LDR      r6,|L1.176|
00000c  f1060108          ADD      r1,r6,#8
000010  6870              LDR      r0,[r6,#4]  ; xHeapHasBeenInitialised
000012  f1010308          ADD      r3,r1,#8
000016  b968              CBNZ     r0,|L1.52|
000018  4826              LDR      r0,|L1.180|
00001a  2200              MOVS     r2,#0
00001c  f0200007          BIC      r0,r0,#7
000020  e9c10200          STRD     r0,r2,[r1,#0]
000024  f6433cf8          MOV      r12,#0x3bf8
000028  e9c32c00          STRD     r2,r12,[r3,#0]
00002c  e9c03c00          STRD     r3,r12,[r0,#0]
;;;160    		{
;;;161    			prvHeapInit();
;;;162    			xHeapHasBeenInitialised = pdTRUE;
000030  2001              MOVS     r0,#1
000032  6070              STR      r0,[r6,#4]  ; xHeapHasBeenInitialised
                  |L1.52|
;;;163    		}
;;;164    
;;;165    		/* The wanted size is increased so it can contain a BlockLink_t
;;;166    		structure in addition to the requested amount of bytes. */
;;;167    		if( xWantedSize > 0 )
000034  2c00              CMP      r4,#0
000036  bf1c              ITT      NE
000038  3408              ADDNE    r4,r4,#8
;;;168    		{
;;;169    			xWantedSize += heapSTRUCT_SIZE;
;;;170    
;;;171    			/* Ensure that blocks are always aligned to the required number of bytes. */
;;;172    			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
00003a  f0140f07          TSTNE    r4,#7
00003e  d004              BEQ      |L1.74|
;;;173    			{
;;;174    				/* Byte alignment required. */
;;;175    				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
000040  f0040007          AND      r0,r4,#7
000044  f1c00008          RSB      r0,r0,#8
000048  4404              ADD      r4,r4,r0
                  |L1.74|
;;;176    			}
;;;177    		}
;;;178    
;;;179    		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
00004a  1e60              SUBS     r0,r4,#1
00004c  f64332f7          MOV      r2,#0x3bf7
000050  4290              CMP      r0,r2
;;;180    		{
;;;181    			/* Blocks are stored in byte order - traverse the list from the start
;;;182    			(smallest) block until one of adequate size is found. */
;;;183    			pxPreviousBlock = &xStart;
000052  bf3c              ITT      CC
000054  4a18              LDRCC    r2,|L1.184|
;;;184    			pxBlock = xStart.pxNextFreeBlock;
000056  6809              LDRCC    r1,[r1,#0]  ; xStart
000058  d225              BCS      |L1.166|
                  |L1.90|
;;;185    			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
00005a  6848              LDR      r0,[r1,#4]
00005c  42a0              CMP      r0,r4
00005e  d205              BCS      |L1.108|
000060  6808              LDR      r0,[r1,#0]
000062  2800              CMP      r0,#0
;;;186    			{
;;;187    				pxPreviousBlock = pxBlock;
000064  bf1c              ITT      NE
000066  460a              MOVNE    r2,r1
;;;188    				pxBlock = pxBlock->pxNextFreeBlock;
000068  4601              MOVNE    r1,r0
00006a  d1f6              BNE      |L1.90|
                  |L1.108|
;;;189    			}
;;;190    
;;;191    			/* If we found the end marker then a block of adequate size was not found. */
;;;192    			if( pxBlock != &xEnd )
00006c  4299              CMP      r1,r3
00006e  d01a              BEQ      |L1.166|
;;;193    			{
;;;194    				/* Return the memory space - jumping over the BlockLink_t structure
;;;195    				at its start. */
;;;196    				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
000070  6810              LDR      r0,[r2,#0]
000072  f1000508          ADD      r5,r0,#8
;;;197    
;;;198    				/* This block is being returned for use so must be taken out of the
;;;199    				list of free blocks. */
;;;200    				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
000076  6808              LDR      r0,[r1,#0]
;;;201    
;;;202    				/* If the block is larger than required it can be split into two. */
;;;203    				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
000078  6010              STR      r0,[r2,#0]
00007a  6848              LDR      r0,[r1,#4]
00007c  1b00              SUBS     r0,r0,r4
00007e  2810              CMP      r0,#0x10
000080  d90d              BLS      |L1.158|
;;;204    				{
;;;205    					/* This block is to be split into two.  Create a new block
;;;206    					following the number of bytes requested. The void cast is
;;;207    					used to prevent byte alignment warnings from the compiler. */
;;;208    					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
000082  190b              ADDS     r3,r1,r4
;;;209    
;;;210    					/* Calculate the sizes of two blocks split from the single
;;;211    					block. */
;;;212    					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
;;;213    					pxBlock->xBlockSize = xWantedSize;
000084  6058              STR      r0,[r3,#4]
;;;214    
;;;215    					/* Insert the new block into the list of free blocks. */
;;;216    					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
000086  604c              STR      r4,[r1,#4]
000088  480b              LDR      r0,|L1.184|
00008a  f8d3c004          LDR      r12,[r3,#4]
                  |L1.142|
00008e  6802              LDR      r2,[r0,#0]
000090  6854              LDR      r4,[r2,#4]
000092  4564              CMP      r4,r12
000094  bf38              IT       CC
000096  4610              MOVCC    r0,r2
000098  d3f9              BCC      |L1.142|
00009a  601a              STR      r2,[r3,#0]
00009c  6003              STR      r3,[r0,#0]
                  |L1.158|
;;;217    				}
;;;218    
;;;219    				xFreeBytesRemaining -= pxBlock->xBlockSize;
00009e  6848              LDR      r0,[r1,#4]
0000a0  6831              LDR      r1,[r6,#0]  ; xFreeBytesRemaining
0000a2  1a08              SUBS     r0,r1,r0
0000a4  6030              STR      r0,[r6,#0]  ; xFreeBytesRemaining
                  |L1.166|
;;;220    			}
;;;221    		}
;;;222    
;;;223    		traceMALLOC( pvReturn, xWantedSize );
;;;224    	}
;;;225    	( void ) xTaskResumeAll();
0000a6  f7fffffe          BL       xTaskResumeAll
;;;226    
;;;227    	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
;;;228    	{
;;;229    		if( pvReturn == NULL )
;;;230    		{
;;;231    			extern void vApplicationMallocFailedHook( void );
;;;232    			vApplicationMallocFailedHook();
;;;233    		}
;;;234    	}
;;;235    	#endif
;;;236    
;;;237    	return pvReturn;
0000aa  4628              MOV      r0,r5
;;;238    }
0000ac  bd70              POP      {r4-r6,pc}
;;;239    /*-----------------------------------------------------------*/
                          ENDP

0000ae  0000              DCW      0x0000
                  |L1.176|
                          DCD      ||.data||
                  |L1.180|
                          DCD      ||.bss||+0x8
                  |L1.184|
                          DCD      ||.data||+0x8

                          AREA ||i.vPortFree||, CODE, READONLY, ALIGN=2

                  vPortFree PROC
;;;240    
;;;241    void vPortFree( void *pv )
000000  2800              CMP      r0,#0
;;;242    {
;;;243    uint8_t *puc = ( uint8_t * ) pv;
;;;244    BlockLink_t *pxLink;
;;;245    
;;;246    	if( pv != NULL )
;;;247    	{
;;;248    		/* The memory being freed will have an BlockLink_t structure immediately
;;;249    		before it. */
;;;250    		puc -= heapSTRUCT_SIZE;
;;;251    
;;;252    		/* This unexpected casting is to keep some compilers from issuing
;;;253    		byte alignment warnings. */
;;;254    		pxLink = ( void * ) puc;
;;;255    
;;;256    		vTaskSuspendAll();
;;;257    		{
;;;258    			/* Add this block to the list of free blocks. */
;;;259    			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
;;;260    			xFreeBytesRemaining += pxLink->xBlockSize;
;;;261    			traceFREE( pv, pxLink->xBlockSize );
;;;262    		}
;;;263    		( void ) xTaskResumeAll();
;;;264    	}
;;;265    }
000002  bf08              IT       EQ
000004  4770              BXEQ     lr
000006  b510              PUSH     {r4,lr}               ;242
000008  f1a00408          SUB      r4,r0,#8              ;250
00000c  f7fffffe          BL       vTaskSuspendAll
000010  4809              LDR      r0,|L2.56|
000012  6862              LDR      r2,[r4,#4]            ;259
                  |L2.20|
000014  6801              LDR      r1,[r0,#0]            ;259
000016  684b              LDR      r3,[r1,#4]            ;259
000018  4293              CMP      r3,r2                 ;259
00001a  bf38              IT       CC                    ;259
00001c  4608              MOVCC    r0,r1                 ;259
00001e  d3f9              BCC      |L2.20|
000020  6021              STR      r1,[r4,#0]            ;259
000022  6004              STR      r4,[r0,#0]            ;260
000024  4805              LDR      r0,|L2.60|
000026  6861              LDR      r1,[r4,#4]            ;260
000028  6802              LDR      r2,[r0,#0]            ;260  ; xFreeBytesRemaining
00002a  4411              ADD      r1,r1,r2              ;260
00002c  6001              STR      r1,[r0,#0]            ;263  ; xFreeBytesRemaining
00002e  e8bd4010          POP      {r4,lr}               ;263
000032  f7ffbffe          B.W      xTaskResumeAll
;;;266    /*-----------------------------------------------------------*/
                          ENDP

000036  0000              DCW      0x0000
                  |L2.56|
                          DCD      ||.data||+0x8
                  |L2.60|
                          DCD      ||.data||

                          AREA ||i.vPortInitialiseBlocks||, CODE, READONLY, ALIGN=1

                  vPortInitialiseBlocks PROC
;;;273    
;;;274    void vPortInitialiseBlocks( void )
000000  4770              BX       lr
;;;275    {
;;;276    	/* This just exists to keep the linker quiet. */
;;;277    }
;;;278    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xPortGetFreeHeapSize||, CODE, READONLY, ALIGN=2

                  xPortGetFreeHeapSize PROC
;;;267    
;;;268    size_t xPortGetFreeHeapSize( void )
000000  4801              LDR      r0,|L4.8|
;;;269    {
;;;270    	return xFreeBytesRemaining;
000002  6800              LDR      r0,[r0,#0]  ; xFreeBytesRemaining
;;;271    }
000004  4770              BX       lr
;;;272    /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ucHeap
                          %        15360

                          AREA ||.data||, DATA, ALIGN=2

                  xFreeBytesRemaining
                          DCD      0x00003bf8
                  xHeapHasBeenInitialised
                          DCD      0x00000000
                  xStart
                          %        8
                  xEnd
                          %        8
