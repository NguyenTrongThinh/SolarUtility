; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\queue.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\queue.d --cpu=Cortex-M3 --apcs=interwork -Otime --diag_suppress=9931 -I.\Driver -I.\Application -I.\System\FreeRTOS\include -I.\System\FreeRTOS\portable\MemMang -I.\System\FreeRTOS\portable\RVDS\ARM_CM3 -I.\System\Libraries\CMSIS\CM3\CoreSupport -I.\System\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I.\System\Libraries\STM32F10x_StdPeriph_Driver\inc -ID:\EmbeddedSystem\STM32F10xx\SolarUtility\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=515 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\objects\queue.crf System\FreeRTOS\queue.c]
                          THUMB

                          AREA ||i.prvCopyDataToQueue||, CODE, READONLY, ALIGN=1

                  prvCopyDataToQueue PROC
;;;1787   
;;;1788   static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
000000  b570              PUSH     {r4-r6,lr}
;;;1789   {
000002  4615              MOV      r5,r2
000004  6c02              LDR      r2,[r0,#0x40]
000006  4604              MOV      r4,r0
;;;1790   BaseType_t xReturn = pdFALSE;
000008  2600              MOVS     r6,#0
00000a  b312              CBZ      r2,|L1.82|
;;;1791   
;;;1792   	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
;;;1793   	{
;;;1794   		#if ( configUSE_MUTEXES == 1 )
;;;1795   		{
;;;1796   			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
;;;1797   			{
;;;1798   				/* The mutex is no longer being held. */
;;;1799   				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
;;;1800   				pxQueue->pxMutexHolder = NULL;
;;;1801   			}
;;;1802   			else
;;;1803   			{
;;;1804   				mtCOVERAGE_TEST_MARKER();
;;;1805   			}
;;;1806   		}
;;;1807   		#endif /* configUSE_MUTEXES */
;;;1808   	}
;;;1809   	else if( xPosition == queueSEND_TO_BACK )
00000c  b17d              CBZ      r5,|L1.46|
;;;1810   	{
;;;1811   		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
;;;1812   		pxQueue->pcWriteTo += pxQueue->uxItemSize;
;;;1813   		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
;;;1814   		{
;;;1815   			pxQueue->pcWriteTo = pxQueue->pcHead;
;;;1816   		}
;;;1817   		else
;;;1818   		{
;;;1819   			mtCOVERAGE_TEST_MARKER();
;;;1820   		}
;;;1821   	}
;;;1822   	else
;;;1823   	{
;;;1824   		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
00000e  68e0              LDR      r0,[r4,#0xc]
000010  f7fffffe          BL       __aeabi_memcpy
;;;1825   		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
000014  68e1              LDR      r1,[r4,#0xc]
000016  6c20              LDR      r0,[r4,#0x40]
000018  1a09              SUBS     r1,r1,r0
;;;1826   		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
00001a  60e1              STR      r1,[r4,#0xc]
00001c  6822              LDR      r2,[r4,#0]
00001e  4291              CMP      r1,r2
000020  d202              BCS      |L1.40|
;;;1827   		{
;;;1828   			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
000022  6861              LDR      r1,[r4,#4]
000024  1a08              SUBS     r0,r1,r0
000026  60e0              STR      r0,[r4,#0xc]
                  |L1.40|
;;;1829   		}
;;;1830   		else
;;;1831   		{
;;;1832   			mtCOVERAGE_TEST_MARKER();
;;;1833   		}
;;;1834   
;;;1835   		if( xPosition == queueOVERWRITE )
000028  2d02              CMP      r5,#2
00002a  d112              BNE      |L1.82|
00002c  e00c              B        |L1.72|
                  |L1.46|
00002e  68a0              LDR      r0,[r4,#8]            ;1811
000030  f7fffffe          BL       __aeabi_memcpy
000034  6c21              LDR      r1,[r4,#0x40]         ;1812
000036  68a0              LDR      r0,[r4,#8]            ;1812
000038  4408              ADD      r0,r0,r1              ;1812
00003a  60a0              STR      r0,[r4,#8]            ;1813
00003c  6861              LDR      r1,[r4,#4]            ;1813
00003e  4288              CMP      r0,r1                 ;1813
000040  bf24              ITT      CS                    ;1815
000042  6820              LDRCS    r0,[r4,#0]            ;1815
000044  60a0              STRCS    r0,[r4,#8]            ;1815
000046  e004              B        |L1.82|
                  |L1.72|
;;;1836   		{
;;;1837   			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
000048  6ba0              LDR      r0,[r4,#0x38]
00004a  b110              CBZ      r0,|L1.82|
;;;1838   			{
;;;1839   				/* An item is not being added but overwritten, so subtract
;;;1840   				one from the recorded number of items in the queue so when
;;;1841   				one is added again below the number of recorded items remains
;;;1842   				correct. */
;;;1843   				--( pxQueue->uxMessagesWaiting );
00004c  6ba0              LDR      r0,[r4,#0x38]
00004e  1e40              SUBS     r0,r0,#1
000050  63a0              STR      r0,[r4,#0x38]
                  |L1.82|
;;;1844   			}
;;;1845   			else
;;;1846   			{
;;;1847   				mtCOVERAGE_TEST_MARKER();
;;;1848   			}
;;;1849   		}
;;;1850   		else
;;;1851   		{
;;;1852   			mtCOVERAGE_TEST_MARKER();
;;;1853   		}
;;;1854   	}
;;;1855   
;;;1856   	++( pxQueue->uxMessagesWaiting );
000052  6ba0              LDR      r0,[r4,#0x38]
000054  1c40              ADDS     r0,r0,#1
000056  63a0              STR      r0,[r4,#0x38]
;;;1857   
;;;1858   	return xReturn;
000058  4630              MOV      r0,r6
;;;1859   }
00005a  bd70              POP      {r4-r6,pc}
;;;1860   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.prvUnlockQueue||, CODE, READONLY, ALIGN=1

                  prvUnlockQueue PROC
;;;1879   
;;;1880   static void prvUnlockQueue( Queue_t * const pxQueue )
000000  b570              PUSH     {r4-r6,lr}
;;;1881   {
000002  4604              MOV      r4,r0
;;;1882   	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
;;;1883   
;;;1884   	/* The lock counts contains the number of extra data items placed or
;;;1885   	removed from the queue while the queue was locked.  When a queue is
;;;1886   	locked items can be added or removed, but the event lists cannot be
;;;1887   	updated. */
;;;1888   	taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1889   	{
;;;1890   		/* See if data was added to the queue while it was locked. */
;;;1891   		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
000008  6ca0              LDR      r0,[r4,#0x48]
00000a  2800              CMP      r0,#0
00000c  dd0f              BLE      |L2.46|
                  |L2.14|
;;;1892   		{
;;;1893   			/* Data was posted while the queue was locked.  Are any tasks
;;;1894   			blocked waiting for data to become available? */
;;;1895   			#if ( configUSE_QUEUE_SETS == 1 )
;;;1896   			{
;;;1897   				if( pxQueue->pxQueueSetContainer != NULL )
;;;1898   				{
;;;1899   					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
;;;1900   					{
;;;1901   						/* The queue is a member of a queue set, and posting to
;;;1902   						the queue set caused a higher priority task to unblock.
;;;1903   						A context switch is required. */
;;;1904   						vTaskMissedYield();
;;;1905   					}
;;;1906   					else
;;;1907   					{
;;;1908   						mtCOVERAGE_TEST_MARKER();
;;;1909   					}
;;;1910   				}
;;;1911   				else
;;;1912   				{
;;;1913   					/* Tasks that are removed from the event list will get added to
;;;1914   					the pending ready list as the scheduler is still suspended. */
;;;1915   					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;1916   					{
;;;1917   						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
;;;1918   						{
;;;1919   							/* The task waiting has a higher priority so record that a
;;;1920   							context	switch is required. */
;;;1921   							vTaskMissedYield();
;;;1922   						}
;;;1923   						else
;;;1924   						{
;;;1925   							mtCOVERAGE_TEST_MARKER();
;;;1926   						}
;;;1927   					}
;;;1928   					else
;;;1929   					{
;;;1930   						break;
;;;1931   					}
;;;1932   				}
;;;1933   			}
;;;1934   			#else /* configUSE_QUEUE_SETS */
;;;1935   			{
;;;1936   				/* Tasks that are removed from the event list will get added to
;;;1937   				the pending ready list as the scheduler is still suspended. */
;;;1938   				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
00000e  6a60              LDR      r0,[r4,#0x24]
000010  b168              CBZ      r0,|L2.46|
;;;1939   				{
;;;1940   					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
000012  f1040024          ADD      r0,r4,#0x24
000016  f7fffffe          BL       xTaskRemoveFromEventList
00001a  2800              CMP      r0,#0
;;;1941   					{
;;;1942   						/* The task waiting has a higher priority so record that a
;;;1943   						context	switch is required. */
;;;1944   						vTaskMissedYield();
00001c  bf18              IT       NE
00001e  f7fffffe          BLNE     vTaskMissedYield
;;;1945   					}
;;;1946   					else
;;;1947   					{
;;;1948   						mtCOVERAGE_TEST_MARKER();
;;;1949   					}
;;;1950   				}
;;;1951   				else
;;;1952   				{
;;;1953   					break;
;;;1954   				}
;;;1955   			}
;;;1956   			#endif /* configUSE_QUEUE_SETS */
;;;1957   
;;;1958   			--( pxQueue->xTxLock );
000022  6ca0              LDR      r0,[r4,#0x48]
000024  1e40              SUBS     r0,r0,#1
000026  64a0              STR      r0,[r4,#0x48]
000028  6ca0              LDR      r0,[r4,#0x48]         ;1891
00002a  2800              CMP      r0,#0                 ;1891
00002c  dcef              BGT      |L2.14|
                  |L2.46|
;;;1959   		}
;;;1960   
;;;1961   		pxQueue->xTxLock = queueUNLOCKED;
00002e  f04f35ff          MOV      r5,#0xffffffff
000032  64a5              STR      r5,[r4,#0x48]
;;;1962   	}
;;;1963   	taskEXIT_CRITICAL();
000034  f7fffffe          BL       vPortExitCritical
;;;1964   
;;;1965   	/* Do the same for the Rx lock. */
;;;1966   	taskENTER_CRITICAL();
000038  f7fffffe          BL       vPortEnterCritical
;;;1967   	{
;;;1968   		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
00003c  6c60              LDR      r0,[r4,#0x44]
00003e  2800              CMP      r0,#0
000040  dd0f              BLE      |L2.98|
                  |L2.66|
;;;1969   		{
;;;1970   			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
000042  6920              LDR      r0,[r4,#0x10]
000044  b168              CBZ      r0,|L2.98|
;;;1971   			{
;;;1972   				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
000046  f1040010          ADD      r0,r4,#0x10
00004a  f7fffffe          BL       xTaskRemoveFromEventList
00004e  2800              CMP      r0,#0
;;;1973   				{
;;;1974   					vTaskMissedYield();
000050  bf18              IT       NE
000052  f7fffffe          BLNE     vTaskMissedYield
;;;1975   				}
;;;1976   				else
;;;1977   				{
;;;1978   					mtCOVERAGE_TEST_MARKER();
;;;1979   				}
;;;1980   
;;;1981   				--( pxQueue->xRxLock );
000056  6c60              LDR      r0,[r4,#0x44]
000058  1e40              SUBS     r0,r0,#1
00005a  6460              STR      r0,[r4,#0x44]
00005c  6c60              LDR      r0,[r4,#0x44]         ;1968
00005e  2800              CMP      r0,#0                 ;1968
000060  dcef              BGT      |L2.66|
                  |L2.98|
;;;1982   			}
;;;1983   			else
;;;1984   			{
;;;1985   				break;
;;;1986   			}
;;;1987   		}
;;;1988   
;;;1989   		pxQueue->xRxLock = queueUNLOCKED;
000062  6465              STR      r5,[r4,#0x44]
;;;1990   	}
;;;1991   	taskEXIT_CRITICAL();
000064  e8bd4070          POP      {r4-r6,lr}
000068  f7ffbffe          B.W      vPortExitCritical
;;;1992   }
;;;1993   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.uxQueueMessagesWaiting||, CODE, READONLY, ALIGN=1

                  uxQueueMessagesWaiting PROC
;;;1695   
;;;1696   UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
000000  b510              PUSH     {r4,lr}
;;;1697   {
000002  4604              MOV      r4,r0
;;;1698   UBaseType_t uxReturn;
;;;1699   
;;;1700   	configASSERT( xQueue );
;;;1701   
;;;1702   	taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1703   	{
;;;1704   		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
000008  6ba4              LDR      r4,[r4,#0x38]
;;;1705   	}
;;;1706   	taskEXIT_CRITICAL();
00000a  f7fffffe          BL       vPortExitCritical
;;;1707   
;;;1708   	return uxReturn;
00000e  4620              MOV      r0,r4
;;;1709   } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
000010  bd10              POP      {r4,pc}
;;;1710   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.uxQueueMessagesWaitingFromISR||, CODE, READONLY, ALIGN=1

                  uxQueueMessagesWaitingFromISR PROC
;;;1729   
;;;1730   UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
000000  6b80              LDR      r0,[r0,#0x38]
;;;1731   {
;;;1732   UBaseType_t uxReturn;
;;;1733   
;;;1734   	configASSERT( xQueue );
;;;1735   
;;;1736   	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
;;;1737   
;;;1738   	return uxReturn;
;;;1739   } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
000002  4770              BX       lr
;;;1740   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.uxQueueSpacesAvailable||, CODE, READONLY, ALIGN=1

                  uxQueueSpacesAvailable PROC
;;;1711   
;;;1712   UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
000000  b510              PUSH     {r4,lr}
;;;1713   {
000002  4604              MOV      r4,r0
;;;1714   UBaseType_t uxReturn;
;;;1715   Queue_t *pxQueue;
;;;1716   
;;;1717   	pxQueue = ( Queue_t * ) xQueue;
;;;1718   	configASSERT( pxQueue );
;;;1719   
;;;1720   	taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1721   	{
;;;1722   		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
000008  6ba1              LDR      r1,[r4,#0x38]
00000a  6be0              LDR      r0,[r4,#0x3c]
00000c  1a44              SUBS     r4,r0,r1
;;;1723   	}
;;;1724   	taskEXIT_CRITICAL();
00000e  f7fffffe          BL       vPortExitCritical
;;;1725   
;;;1726   	return uxReturn;
000012  4620              MOV      r0,r4
;;;1727   } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
000014  bd10              POP      {r4,pc}
;;;1728   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vQueueDelete||, CODE, READONLY, ALIGN=1

                  vQueueDelete PROC
;;;1741   
;;;1742   void vQueueDelete( QueueHandle_t xQueue )
000000  f7ffbffe          B.W      vPortFree
;;;1743   {
;;;1744   Queue_t * const pxQueue = ( Queue_t * ) xQueue;
;;;1745   
;;;1746   	configASSERT( pxQueue );
;;;1747   
;;;1748   	traceQUEUE_DELETE( pxQueue );
;;;1749   	#if ( configQUEUE_REGISTRY_SIZE > 0 )
;;;1750   	{
;;;1751   		vQueueUnregisterQueue( pxQueue );
;;;1752   	}
;;;1753   	#endif
;;;1754   	vPortFree( pxQueue );
;;;1755   }
;;;1756   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vQueueWaitForMessageRestricted||, CODE, READONLY, ALIGN=1

                  vQueueWaitForMessageRestricted PROC
;;;2405   
;;;2406   	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;2407   	{
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;2408   	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
;;;2409   
;;;2410   		/* This function should not be called by application code hence the
;;;2411   		'Restricted' in its name.  It is not part of the public API.  It is
;;;2412   		designed for use by kernel code, and has special calling requirements.
;;;2413   		It can result in vListInsert() being called on a list that can only
;;;2414   		possibly ever have one item in it, so the list will be fast, but even
;;;2415   		so it should be called with the scheduler locked and not from a critical
;;;2416   		section. */
;;;2417   
;;;2418   		/* Only do anything if there are no messages in the queue.  This function
;;;2419   		will not actually cause the task to block, just place it on a blocked
;;;2420   		list.  It will not block until the scheduler is unlocked - at which
;;;2421   		time a yield will be performed.  If an item is added to the queue while
;;;2422   		the queue is locked, and the calling task blocks on the queue, then the
;;;2423   		calling task will be immediately unblocked when the queue is unlocked. */
;;;2424   		prvLockQueue( pxQueue );
000006  f7fffffe          BL       vPortEnterCritical
00000a  6c60              LDR      r0,[r4,#0x44]
00000c  f1b03fff          CMP      r0,#0xffffffff
000010  f04f0000          MOV      r0,#0
000014  bf08              IT       EQ
000016  6460              STREQ    r0,[r4,#0x44]
000018  6ca1              LDR      r1,[r4,#0x48]
00001a  f1b13fff          CMP      r1,#0xffffffff
00001e  bf08              IT       EQ
000020  64a0              STREQ    r0,[r4,#0x48]
000022  f7fffffe          BL       vPortExitCritical
;;;2425   		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
000026  6ba0              LDR      r0,[r4,#0x38]
000028  b920              CBNZ     r0,|L7.52|
;;;2426   		{
;;;2427   			/* There is nothing in the queue, block for the specified period. */
;;;2428   			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
00002a  4629              MOV      r1,r5
00002c  f1040024          ADD      r0,r4,#0x24
000030  f7fffffe          BL       vTaskPlaceOnEventListRestricted
                  |L7.52|
;;;2429   		}
;;;2430   		else
;;;2431   		{
;;;2432   			mtCOVERAGE_TEST_MARKER();
;;;2433   		}
;;;2434   		prvUnlockQueue( pxQueue );
000034  4620              MOV      r0,r4
000036  e8bd4070          POP      {r4-r6,lr}
00003a  f7ffbffe          B.W      prvUnlockQueue
;;;2435   	}
;;;2436   
                          ENDP


                          AREA ||i.xQueueCreateCountingSemaphore||, CODE, READONLY, ALIGN=1

                  xQueueCreateCountingSemaphore PROC
;;;585    
;;;586    	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
000000  b510              PUSH     {r4,lr}
;;;587    	{
000002  460c              MOV      r4,r1
;;;588    	QueueHandle_t xHandle;
;;;589    
;;;590    		configASSERT( uxMaxCount != 0 );
;;;591    		configASSERT( uxInitialCount <= uxMaxCount );
;;;592    
;;;593    		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
000004  2202              MOVS     r2,#2
000006  2100              MOVS     r1,#0
000008  f7fffffe          BL       xQueueGenericCreate
;;;594    
;;;595    		if( xHandle != NULL )
00000c  2800              CMP      r0,#0
;;;596    		{
;;;597    			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
00000e  bf18              IT       NE
000010  6384              STRNE    r4,[r0,#0x38]
;;;598    
;;;599    			traceCREATE_COUNTING_SEMAPHORE();
;;;600    		}
;;;601    		else
;;;602    		{
;;;603    			traceCREATE_COUNTING_SEMAPHORE_FAILED();
;;;604    		}
;;;605    
;;;606    		configASSERT( xHandle );
;;;607    		return xHandle;
;;;608    	}
000012  bd10              POP      {r4,pc}
;;;609    
                          ENDP


                          AREA ||i.xQueueGenericCreate||, CODE, READONLY, ALIGN=1

                  xQueueGenericCreate PROC
;;;312    
;;;313    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
000000  b570              PUSH     {r4-r6,lr}
;;;314    {
000002  000d              MOVS     r5,r1
000004  4606              MOV      r6,r0
;;;315    Queue_t *pxNewQueue;
;;;316    size_t xQueueSizeInBytes;
;;;317    QueueHandle_t xReturn = NULL;
000006  f04f0400          MOV      r4,#0
;;;318    int8_t *pcAllocatedBuffer;
;;;319    
;;;320    	/* Remove compiler warnings about unused parameters should
;;;321    	configUSE_TRACE_FACILITY not be set to 1. */
;;;322    	( void ) ucQueueType;
;;;323    
;;;324    	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
;;;325    
;;;326    	if( uxItemSize == ( UBaseType_t ) 0 )
;;;327    	{
;;;328    		/* There is not going to be a queue storage area. */
;;;329    		xQueueSizeInBytes = ( size_t ) 0;
00000a  bf0e              ITEE     EQ
00000c  2000              MOVEQ    r0,#0
;;;330    	}
;;;331    	else
;;;332    	{
;;;333    		/* The queue is one byte longer than asked for to make wrap checking
;;;334    		easier/faster. */
;;;335    		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
00000e  fb06f005          MULNE    r0,r6,r5
000012  1c40              ADDNE    r0,r0,#1
000014  304c              ADDS     r0,r0,#0x4c
;;;336    	}
;;;337    
;;;338    	/* Allocate the new queue structure and storage area. */
;;;339    	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
000016  f7fffffe          BL       pvPortMalloc
;;;340    
;;;341    	if( pcAllocatedBuffer != NULL )
00001a  b330              CBZ      r0,|L9.106|
;;;342    	{
;;;343    		pxNewQueue = ( Queue_t * ) pcAllocatedBuffer; /*lint !e826 MISRA The buffer cannot be too small because it was dimensioned by sizeof( Queue_t ) + xQueueSizeInBytes. */
00001c  4604              MOV      r4,r0
;;;344    
;;;345    		if( uxItemSize == ( UBaseType_t ) 0 )
00001e  2d00              CMP      r5,#0
;;;346    		{
;;;347    			/* No RAM was allocated for the queue storage area, but PC head
;;;348    			cannot be set to NULL because NULL is used as a key to say the queue
;;;349    			is used as a mutex.  Therefore just set pcHead to point to the queue
;;;350    			as a benign value that is known to be within the memory map. */
;;;351    			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
000020  bf0e              ITEE     EQ
000022  6024              STREQ    r4,[r4,#0]
;;;352    		}
;;;353    		else
;;;354    		{
;;;355    			/* Jump past the queue structure to find the location of the queue
;;;356    			storage area - adding the padding bytes to get a better alignment. */
;;;357    			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
000024  f104004c          ADDNE    r0,r4,#0x4c
000028  6020              STRNE    r0,[r4,#0]
00002a  e9c4650f          STRD     r6,r5,[r4,#0x3c]
00002e  f7fffffe          BL       vPortEnterCritical
000032  e9d4120f          LDRD     r1,r2,[r4,#0x3c]
000036  6820              LDR      r0,[r4,#0]
000038  fb010002          MLA      r0,r1,r2,r0
00003c  6060              STR      r0,[r4,#4]
00003e  2000              MOVS     r0,#0
000040  63a0              STR      r0,[r4,#0x38]
000042  6820              LDR      r0,[r4,#0]
000044  1e49              SUBS     r1,r1,#1
000046  60a0              STR      r0,[r4,#8]
000048  fb010002          MLA      r0,r1,r2,r0
00004c  60e0              STR      r0,[r4,#0xc]
00004e  f04f30ff          MOV      r0,#0xffffffff
000052  6460              STR      r0,[r4,#0x44]
000054  64a0              STR      r0,[r4,#0x48]
000056  f1040010          ADD      r0,r4,#0x10
00005a  f7fffffe          BL       vListInitialise
00005e  f1040024          ADD      r0,r4,#0x24
000062  f7fffffe          BL       vListInitialise
000066  f7fffffe          BL       vPortExitCritical
                  |L9.106|
;;;358    		}
;;;359    
;;;360    		/* Initialise the queue members as described above where the queue type
;;;361    		is defined. */
;;;362    		pxNewQueue->uxLength = uxQueueLength;
;;;363    		pxNewQueue->uxItemSize = uxItemSize;
;;;364    		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
;;;365    
;;;366    		#if ( configUSE_TRACE_FACILITY == 1 )
;;;367    		{
;;;368    			pxNewQueue->ucQueueType = ucQueueType;
;;;369    		}
;;;370    		#endif /* configUSE_TRACE_FACILITY */
;;;371    
;;;372    		#if( configUSE_QUEUE_SETS == 1 )
;;;373    		{
;;;374    			pxNewQueue->pxQueueSetContainer = NULL;
;;;375    		}
;;;376    		#endif /* configUSE_QUEUE_SETS */
;;;377    
;;;378    		traceQUEUE_CREATE( pxNewQueue );
;;;379    		xReturn = pxNewQueue;
;;;380    	}
;;;381    	else
;;;382    	{
;;;383    		mtCOVERAGE_TEST_MARKER();
;;;384    	}
;;;385    
;;;386    	configASSERT( xReturn );
;;;387    
;;;388    	return xReturn;
00006a  4620              MOV      r0,r4
;;;389    }
00006c  bd70              POP      {r4-r6,pc}
;;;390    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xQueueGenericReceive||, CODE, READONLY, ALIGN=1

                  xQueueGenericReceive PROC
;;;1367   
;;;1368   BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
000000  e92d43ff          PUSH     {r0-r9,lr}
;;;1369   {
;;;1370   BaseType_t xEntryTimeSet = pdFALSE;
000004  2600              MOVS     r6,#0
000006  b083              SUB      sp,sp,#0xc            ;1369
000008  4699              MOV      r9,r3                 ;1369
00000a  4688              MOV      r8,r1                 ;1369
00000c  4604              MOV      r4,r0                 ;1369
00000e  4637              MOV      r7,r6
                  |L10.16|
;;;1371   TimeOut_t xTimeOut;
;;;1372   int8_t *pcOriginalReadPosition;
;;;1373   Queue_t * const pxQueue = ( Queue_t * ) xQueue;
;;;1374   
;;;1375   	configASSERT( pxQueue );
;;;1376   	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
;;;1377   	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;1378   	{
;;;1379   		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
;;;1380   	}
;;;1381   	#endif
;;;1382   
;;;1383   	/* This function relaxes the coding standard somewhat to allow return
;;;1384   	statements within the function itself.  This is done in the interest
;;;1385   	of execution time efficiency. */
;;;1386   
;;;1387   	for( ;; )
;;;1388   	{
;;;1389   		taskENTER_CRITICAL();
000010  f7fffffe          BL       vPortEnterCritical
;;;1390   		{
;;;1391   			/* Is there data in the queue now?  To be running the calling task
;;;1392   			must be	the highest priority task wanting to access the queue. */
;;;1393   			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
000014  6ba0              LDR      r0,[r4,#0x38]
000016  2800              CMP      r0,#0
000018  d02d              BEQ      |L10.118|
00001a  68e5              LDR      r5,[r4,#0xc]
00001c  6c22              LDR      r2,[r4,#0x40]
00001e  b152              CBZ      r2,|L10.54|
000020  18a8              ADDS     r0,r5,r2
000022  60e0              STR      r0,[r4,#0xc]
000024  6861              LDR      r1,[r4,#4]
000026  4288              CMP      r0,r1
000028  bf24              ITT      CS
00002a  6820              LDRCS    r0,[r4,#0]
00002c  60e0              STRCS    r0,[r4,#0xc]
00002e  4601              MOV      r1,r0
000030  4640              MOV      r0,r8
000032  f7fffffe          BL       __aeabi_memcpy
                  |L10.54|
;;;1394   			{
;;;1395   				/* Remember the read position in case the queue is only being
;;;1396   				peeked. */
;;;1397   				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
;;;1398   
;;;1399   				prvCopyDataFromQueue( pxQueue, pvBuffer );
;;;1400   
;;;1401   				if( xJustPeeking == pdFALSE )
000036  f1b90f00          CMP      r9,#0
00003a  d00f              BEQ      |L10.92|
;;;1402   				{
;;;1403   					traceQUEUE_RECEIVE( pxQueue );
;;;1404   
;;;1405   					/* Actually removing data, not just peeking. */
;;;1406   					--( pxQueue->uxMessagesWaiting );
;;;1407   
;;;1408   					#if ( configUSE_MUTEXES == 1 )
;;;1409   					{
;;;1410   						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
;;;1411   						{
;;;1412   							/* Record the information required to implement
;;;1413   							priority inheritance should it become necessary. */
;;;1414   							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
;;;1415   						}
;;;1416   						else
;;;1417   						{
;;;1418   							mtCOVERAGE_TEST_MARKER();
;;;1419   						}
;;;1420   					}
;;;1421   					#endif /* configUSE_MUTEXES */
;;;1422   
;;;1423   					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
;;;1424   					{
;;;1425   						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
;;;1426   						{
;;;1427   							queueYIELD_IF_USING_PREEMPTION();
;;;1428   						}
;;;1429   						else
;;;1430   						{
;;;1431   							mtCOVERAGE_TEST_MARKER();
;;;1432   						}
;;;1433   					}
;;;1434   					else
;;;1435   					{
;;;1436   						mtCOVERAGE_TEST_MARKER();
;;;1437   					}
;;;1438   				}
;;;1439   				else
;;;1440   				{
;;;1441   					traceQUEUE_PEEK( pxQueue );
;;;1442   
;;;1443   					/* The data is not being removed, so reset the read
;;;1444   					pointer. */
;;;1445   					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
;;;1446   
;;;1447   					/* The data is being left in the queue, so see if there are
;;;1448   					any other tasks waiting for the data. */
;;;1449   					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
00003c  60e5              STR      r5,[r4,#0xc]
00003e  6a60              LDR      r0,[r4,#0x24]
000040  b130              CBZ      r0,|L10.80|
;;;1450   					{
;;;1451   						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
000042  f1040024          ADD      r0,r4,#0x24
000046  f7fffffe          BL       xTaskRemoveFromEventList
00004a  b108              CBZ      r0,|L10.80|
                  |L10.76|
;;;1452   						{
;;;1453   							/* The task waiting has a higher priority than this task. */
;;;1454   							queueYIELD_IF_USING_PREEMPTION();
00004c  f7fffffe          BL       vPortYield
                  |L10.80|
;;;1455   						}
;;;1456   						else
;;;1457   						{
;;;1458   							mtCOVERAGE_TEST_MARKER();
;;;1459   						}
;;;1460   					}
;;;1461   					else
;;;1462   					{
;;;1463   						mtCOVERAGE_TEST_MARKER();
;;;1464   					}
;;;1465   				}
;;;1466   
;;;1467   				taskEXIT_CRITICAL();
000050  f7fffffe          BL       vPortExitCritical
;;;1468   				return pdPASS;
;;;1469   			}
;;;1470   			else
;;;1471   			{
;;;1472   				if( xTicksToWait == ( TickType_t ) 0 )
;;;1473   				{
;;;1474   					/* The queue was empty and no block time is specified (or
;;;1475   					the block time has expired) so leave now. */
;;;1476   					taskEXIT_CRITICAL();
;;;1477   					traceQUEUE_RECEIVE_FAILED( pxQueue );
;;;1478   					return errQUEUE_EMPTY;
;;;1479   				}
;;;1480   				else if( xEntryTimeSet == pdFALSE )
;;;1481   				{
;;;1482   					/* The queue was empty and a block time was specified so
;;;1483   					configure the timeout structure. */
;;;1484   					vTaskSetTimeOutState( &xTimeOut );
;;;1485   					xEntryTimeSet = pdTRUE;
;;;1486   				}
;;;1487   				else
;;;1488   				{
;;;1489   					/* Entry time was already set. */
;;;1490   					mtCOVERAGE_TEST_MARKER();
;;;1491   				}
;;;1492   			}
;;;1493   		}
;;;1494   		taskEXIT_CRITICAL();
;;;1495   
;;;1496   		/* Interrupts and other tasks can send to and receive from the queue
;;;1497   		now the critical section has been exited. */
;;;1498   
;;;1499   		vTaskSuspendAll();
;;;1500   		prvLockQueue( pxQueue );
;;;1501   
;;;1502   		/* Update the timeout state to see if it has expired yet. */
;;;1503   		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
;;;1504   		{
;;;1505   			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
;;;1506   			{
;;;1507   				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
;;;1508   
;;;1509   				#if ( configUSE_MUTEXES == 1 )
;;;1510   				{
;;;1511   					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
;;;1512   					{
;;;1513   						taskENTER_CRITICAL();
;;;1514   						{
;;;1515   							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
;;;1516   						}
;;;1517   						taskEXIT_CRITICAL();
;;;1518   					}
;;;1519   					else
;;;1520   					{
;;;1521   						mtCOVERAGE_TEST_MARKER();
;;;1522   					}
;;;1523   				}
;;;1524   				#endif
;;;1525   
;;;1526   				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
;;;1527   				prvUnlockQueue( pxQueue );
;;;1528   				if( xTaskResumeAll() == pdFALSE )
;;;1529   				{
;;;1530   					portYIELD_WITHIN_API();
;;;1531   				}
;;;1532   				else
;;;1533   				{
;;;1534   					mtCOVERAGE_TEST_MARKER();
;;;1535   				}
;;;1536   			}
;;;1537   			else
;;;1538   			{
;;;1539   				/* Try again. */
;;;1540   				prvUnlockQueue( pxQueue );
;;;1541   				( void ) xTaskResumeAll();
;;;1542   			}
;;;1543   		}
;;;1544   		else
;;;1545   		{
;;;1546   			prvUnlockQueue( pxQueue );
;;;1547   			( void ) xTaskResumeAll();
;;;1548   			traceQUEUE_RECEIVE_FAILED( pxQueue );
;;;1549   			return errQUEUE_EMPTY;
;;;1550   		}
;;;1551   	}
;;;1552   }
000054  b007              ADD      sp,sp,#0x1c
000056  2001              MOVS     r0,#1                 ;1468
000058  e8bd83f0          POP      {r4-r9,pc}
                  |L10.92|
00005c  6ba0              LDR      r0,[r4,#0x38]         ;1406
00005e  1e40              SUBS     r0,r0,#1              ;1406
000060  63a0              STR      r0,[r4,#0x38]         ;1406
000062  6920              LDR      r0,[r4,#0x10]         ;1423
000064  2800              CMP      r0,#0                 ;1423
000066  d0f3              BEQ      |L10.80|
000068  f1040010          ADD      r0,r4,#0x10           ;1425
00006c  f7fffffe          BL       xTaskRemoveFromEventList
000070  2801              CMP      r0,#1                 ;1425
000072  d0eb              BEQ      |L10.76|
000074  e7ec              B        |L10.80|
                  |L10.118|
000076  9805              LDR      r0,[sp,#0x14]         ;1472
000078  b108              CBZ      r0,|L10.126|
00007a  b11e              CBZ      r6,|L10.132|
00007c  e006              B        |L10.140|
                  |L10.126|
00007e  f7fffffe          BL       vPortExitCritical
000082  e01f              B        |L10.196|
                  |L10.132|
000084  4668              MOV      r0,sp                 ;1484
000086  f7fffffe          BL       vTaskSetTimeOutState
00008a  2601              MOVS     r6,#1                 ;1485
                  |L10.140|
00008c  f7fffffe          BL       vPortExitCritical
000090  f7fffffe          BL       vTaskSuspendAll
000094  f7fffffe          BL       vPortEnterCritical
000098  6c60              LDR      r0,[r4,#0x44]         ;1500
00009a  f1b03fff          CMP      r0,#0xffffffff        ;1500
00009e  bf08              IT       EQ                    ;1500
0000a0  6467              STREQ    r7,[r4,#0x44]         ;1500
0000a2  6ca0              LDR      r0,[r4,#0x48]         ;1500
0000a4  f1b03fff          CMP      r0,#0xffffffff        ;1500
0000a8  bf08              IT       EQ                    ;1500
0000aa  64a7              STREQ    r7,[r4,#0x48]         ;1500
0000ac  f7fffffe          BL       vPortExitCritical
0000b0  a905              ADD      r1,sp,#0x14           ;1503
0000b2  4668              MOV      r0,sp                 ;1503
0000b4  f7fffffe          BL       xTaskCheckForTimeOut
0000b8  b140              CBZ      r0,|L10.204|
0000ba  4620              MOV      r0,r4                 ;1546
0000bc  f7fffffe          BL       prvUnlockQueue
0000c0  f7fffffe          BL       xTaskResumeAll
                  |L10.196|
0000c4  b007              ADD      sp,sp,#0x1c
0000c6  2000              MOVS     r0,#0                 ;1549
0000c8  e8bd83f0          POP      {r4-r9,pc}
                  |L10.204|
0000cc  f7fffffe          BL       vPortEnterCritical
0000d0  6ba0              LDR      r0,[r4,#0x38]
0000d2  2800              CMP      r0,#0
0000d4  bf14              ITE      NE
0000d6  2500              MOVNE    r5,#0
0000d8  2501              MOVEQ    r5,#1
0000da  f7fffffe          BL       vPortExitCritical
0000de  b175              CBZ      r5,|L10.254|
0000e0  f1040024          ADD      r0,r4,#0x24           ;1526
0000e4  9905              LDR      r1,[sp,#0x14]         ;1526
0000e6  f7fffffe          BL       vTaskPlaceOnEventList
0000ea  4620              MOV      r0,r4                 ;1527
0000ec  f7fffffe          BL       prvUnlockQueue
0000f0  f7fffffe          BL       xTaskResumeAll
0000f4  2800              CMP      r0,#0                 ;1528
0000f6  bf08              IT       EQ                    ;1530
0000f8  f7fffffe          BLEQ     vPortYield
0000fc  e788              B        |L10.16|
                  |L10.254|
0000fe  4620              MOV      r0,r4                 ;1540
000100  f7fffffe          BL       prvUnlockQueue
000104  f7fffffe          BL       xTaskResumeAll
000108  e782              B        |L10.16|
;;;1553   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xQueueGenericReset||, CODE, READONLY, ALIGN=1

                  xQueueGenericReset PROC
;;;259    
;;;260    BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
000000  b570              PUSH     {r4-r6,lr}
;;;261    {
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;262    Queue_t * const pxQueue = ( Queue_t * ) xQueue;
;;;263    
;;;264    	configASSERT( pxQueue );
;;;265    
;;;266    	taskENTER_CRITICAL();
000006  f7fffffe          BL       vPortEnterCritical
;;;267    	{
;;;268    		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
00000a  e9d4120f          LDRD     r1,r2,[r4,#0x3c]
00000e  6820              LDR      r0,[r4,#0]
000010  fb010002          MLA      r0,r1,r2,r0
;;;269    		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
000014  6060              STR      r0,[r4,#4]
000016  2000              MOVS     r0,#0
000018  63a0              STR      r0,[r4,#0x38]
;;;270    		pxQueue->pcWriteTo = pxQueue->pcHead;
00001a  6820              LDR      r0,[r4,#0]
00001c  1e49              SUBS     r1,r1,#1
;;;271    		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
00001e  60a0              STR      r0,[r4,#8]
000020  fb010002          MLA      r0,r1,r2,r0
;;;272    		pxQueue->xRxLock = queueUNLOCKED;
000024  60e0              STR      r0,[r4,#0xc]
000026  f04f30ff          MOV      r0,#0xffffffff
00002a  6460              STR      r0,[r4,#0x44]
;;;273    		pxQueue->xTxLock = queueUNLOCKED;
00002c  64a0              STR      r0,[r4,#0x48]
;;;274    
;;;275    		if( xNewQueue == pdFALSE )
00002e  b15d              CBZ      r5,|L11.72|
;;;276    		{
;;;277    			/* If there are tasks blocked waiting to read from the queue, then
;;;278    			the tasks will remain blocked as after this function exits the queue
;;;279    			will still be empty.  If there are tasks blocked waiting to write to
;;;280    			the queue, then one should be unblocked as after this function exits
;;;281    			it will be possible to write to it. */
;;;282    			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
;;;283    			{
;;;284    				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
;;;285    				{
;;;286    					queueYIELD_IF_USING_PREEMPTION();
;;;287    				}
;;;288    				else
;;;289    				{
;;;290    					mtCOVERAGE_TEST_MARKER();
;;;291    				}
;;;292    			}
;;;293    			else
;;;294    			{
;;;295    				mtCOVERAGE_TEST_MARKER();
;;;296    			}
;;;297    		}
;;;298    		else
;;;299    		{
;;;300    			/* Ensure the event queues start in the correct state. */
;;;301    			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
000030  f1040010          ADD      r0,r4,#0x10
000034  f7fffffe          BL       vListInitialise
;;;302    			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
000038  f1040024          ADD      r0,r4,#0x24
00003c  f7fffffe          BL       vListInitialise
                  |L11.64|
;;;303    		}
;;;304    	}
;;;305    	taskEXIT_CRITICAL();
000040  f7fffffe          BL       vPortExitCritical
;;;306    
;;;307    	/* A value is returned for calling semantic consistency with previous
;;;308    	versions. */
;;;309    	return pdPASS;
000044  2001              MOVS     r0,#1
;;;310    }
000046  bd70              POP      {r4-r6,pc}
                  |L11.72|
000048  6920              LDR      r0,[r4,#0x10]         ;282
00004a  2800              CMP      r0,#0                 ;282
00004c  d0f8              BEQ      |L11.64|
00004e  f1040010          ADD      r0,r4,#0x10           ;284
000052  f7fffffe          BL       xTaskRemoveFromEventList
000056  2801              CMP      r0,#1                 ;284
000058  bf08              IT       EQ                    ;286
00005a  f7fffffe          BLEQ     vPortYield
00005e  e7ef              B        |L11.64|
;;;311    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xQueueGenericSend||, CODE, READONLY, ALIGN=1

                  xQueueGenericSend PROC
;;;612    
;;;613    BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
000000  e92d43ff          PUSH     {r0-r9,lr}
;;;614    {
;;;615    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
000004  2600              MOVS     r6,#0
000006  b083              SUB      sp,sp,#0xc            ;614
000008  4698              MOV      r8,r3                 ;614
00000a  4689              MOV      r9,r1                 ;614
00000c  4604              MOV      r4,r0                 ;614
00000e  4637              MOV      r7,r6
                  |L12.16|
;;;616    TimeOut_t xTimeOut;
;;;617    Queue_t * const pxQueue = ( Queue_t * ) xQueue;
;;;618    
;;;619    	configASSERT( pxQueue );
;;;620    	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
;;;621    	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
;;;622    	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;623    	{
;;;624    		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
;;;625    	}
;;;626    	#endif
;;;627    
;;;628    
;;;629    	/* This function relaxes the coding standard somewhat to allow return
;;;630    	statements within the function itself.  This is done in the interest
;;;631    	of execution time efficiency. */
;;;632    	for( ;; )
;;;633    	{
;;;634    		taskENTER_CRITICAL();
000010  f7fffffe          BL       vPortEnterCritical
;;;635    		{
;;;636    			/* Is there room on the queue now?  The running task must be the
;;;637    			highest priority task wanting to access the queue.  If the head item
;;;638    			in the queue is to be overwritten then it does not matter if the
;;;639    			queue is full. */
;;;640    			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
000014  6ba0              LDR      r0,[r4,#0x38]
000016  6be1              LDR      r1,[r4,#0x3c]
000018  4288              CMP      r0,r1
00001a  d308              BCC      |L12.46|
00001c  f1b80f02          CMP      r8,#2
000020  d005              BEQ      |L12.46|
;;;641    			{
;;;642    				traceQUEUE_SEND( pxQueue );
;;;643    				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
;;;644    
;;;645    				#if ( configUSE_QUEUE_SETS == 1 )
;;;646    				{
;;;647    					if( pxQueue->pxQueueSetContainer != NULL )
;;;648    					{
;;;649    						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
;;;650    						{
;;;651    							/* The queue is a member of a queue set, and posting
;;;652    							to the queue set caused a higher priority task to
;;;653    							unblock. A context switch is required. */
;;;654    							queueYIELD_IF_USING_PREEMPTION();
;;;655    						}
;;;656    						else
;;;657    						{
;;;658    							mtCOVERAGE_TEST_MARKER();
;;;659    						}
;;;660    					}
;;;661    					else
;;;662    					{
;;;663    						/* If there was a task waiting for data to arrive on the
;;;664    						queue then unblock it now. */
;;;665    						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;666    						{
;;;667    							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
;;;668    							{
;;;669    								/* The unblocked task has a priority higher than
;;;670    								our own so yield immediately.  Yes it is ok to
;;;671    								do this from within the critical section - the
;;;672    								kernel takes care of that. */
;;;673    								queueYIELD_IF_USING_PREEMPTION();
;;;674    							}
;;;675    							else
;;;676    							{
;;;677    								mtCOVERAGE_TEST_MARKER();
;;;678    							}
;;;679    						}
;;;680    						else if( xYieldRequired != pdFALSE )
;;;681    						{
;;;682    							/* This path is a special case that will only get
;;;683    							executed if the task was holding multiple mutexes
;;;684    							and the mutexes were given back in an order that is
;;;685    							different to that in which they were taken. */
;;;686    							queueYIELD_IF_USING_PREEMPTION();
;;;687    						}
;;;688    						else
;;;689    						{
;;;690    							mtCOVERAGE_TEST_MARKER();
;;;691    						}
;;;692    					}
;;;693    				}
;;;694    				#else /* configUSE_QUEUE_SETS */
;;;695    				{
;;;696    					/* If there was a task waiting for data to arrive on the
;;;697    					queue then unblock it now. */
;;;698    					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;699    					{
;;;700    						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
;;;701    						{
;;;702    							/* The unblocked task has a priority higher than
;;;703    							our own so yield immediately.  Yes it is ok to do
;;;704    							this from within the critical section - the kernel
;;;705    							takes care of that. */
;;;706    							queueYIELD_IF_USING_PREEMPTION();
;;;707    						}
;;;708    						else
;;;709    						{
;;;710    							mtCOVERAGE_TEST_MARKER();
;;;711    						}
;;;712    					}
;;;713    					else if( xYieldRequired != pdFALSE )
;;;714    					{
;;;715    						/* This path is a special case that will only get
;;;716    						executed if the task was holding multiple mutexes and
;;;717    						the mutexes were given back in an order that is
;;;718    						different to that in which they were taken. */
;;;719    						queueYIELD_IF_USING_PREEMPTION();
;;;720    					}
;;;721    					else
;;;722    					{
;;;723    						mtCOVERAGE_TEST_MARKER();
;;;724    					}
;;;725    				}
;;;726    				#endif /* configUSE_QUEUE_SETS */
;;;727    
;;;728    				taskEXIT_CRITICAL();
;;;729    				return pdPASS;
;;;730    			}
;;;731    			else
;;;732    			{
;;;733    				if( xTicksToWait == ( TickType_t ) 0 )
000022  9805              LDR      r0,[sp,#0x14]
000024  2800              CMP      r0,#0
000026  d03f              BEQ      |L12.168|
;;;734    				{
;;;735    					/* The queue was full and no block time is specified (or
;;;736    					the block time has expired) so leave now. */
;;;737    					taskEXIT_CRITICAL();
;;;738    
;;;739    					/* Return to the original privilege level before exiting
;;;740    					the function. */
;;;741    					traceQUEUE_SEND_FAILED( pxQueue );
;;;742    					return errQUEUE_FULL;
;;;743    				}
;;;744    				else if( xEntryTimeSet == pdFALSE )
000028  2e00              CMP      r6,#0
00002a  d040              BEQ      |L12.174|
00002c  e043              B        |L12.182|
                  |L12.46|
00002e  6c22              LDR      r2,[r4,#0x40]         ;643
000030  b30a              CBZ      r2,|L12.118|
000032  f1b80f00          CMP      r8,#0                 ;643
000036  d011              BEQ      |L12.92|
000038  4649              MOV      r1,r9                 ;643
00003a  68e0              LDR      r0,[r4,#0xc]          ;643
00003c  f7fffffe          BL       __aeabi_memcpy
000040  6c21              LDR      r1,[r4,#0x40]         ;643
000042  68e0              LDR      r0,[r4,#0xc]          ;643
000044  1a40              SUBS     r0,r0,r1              ;643
000046  60e0              STR      r0,[r4,#0xc]          ;643
000048  6822              LDR      r2,[r4,#0]            ;643
00004a  4290              CMP      r0,r2                 ;643
00004c  d202              BCS      |L12.84|
00004e  6860              LDR      r0,[r4,#4]            ;643
000050  1a40              SUBS     r0,r0,r1              ;643
000052  60e0              STR      r0,[r4,#0xc]          ;643
                  |L12.84|
000054  f1b80f02          CMP      r8,#2                 ;643
000058  d113              BNE      |L12.130|
00005a  e00d              B        |L12.120|
                  |L12.92|
00005c  4649              MOV      r1,r9                 ;643
00005e  68a0              LDR      r0,[r4,#8]            ;643
000060  f7fffffe          BL       __aeabi_memcpy
000064  6c21              LDR      r1,[r4,#0x40]         ;643
000066  68a0              LDR      r0,[r4,#8]            ;643
000068  4408              ADD      r0,r0,r1              ;643
00006a  60a0              STR      r0,[r4,#8]            ;643
00006c  6861              LDR      r1,[r4,#4]            ;643
00006e  4288              CMP      r0,r1                 ;643
000070  bf24              ITT      CS                    ;643
000072  6820              LDRCS    r0,[r4,#0]            ;643
000074  60a0              STRCS    r0,[r4,#8]            ;643
                  |L12.118|
000076  e004              B        |L12.130|
                  |L12.120|
000078  6ba0              LDR      r0,[r4,#0x38]         ;643
00007a  b110              CBZ      r0,|L12.130|
00007c  6ba0              LDR      r0,[r4,#0x38]         ;643
00007e  1e40              SUBS     r0,r0,#1              ;643
000080  63a0              STR      r0,[r4,#0x38]         ;643
                  |L12.130|
000082  6ba0              LDR      r0,[r4,#0x38]         ;643
000084  1c40              ADDS     r0,r0,#1              ;643
000086  63a0              STR      r0,[r4,#0x38]         ;643
000088  6a60              LDR      r0,[r4,#0x24]         ;698
00008a  b138              CBZ      r0,|L12.156|
00008c  f1040024          ADD      r0,r4,#0x24           ;700
000090  f7fffffe          BL       xTaskRemoveFromEventList
000094  2801              CMP      r0,#1                 ;700
000096  bf08              IT       EQ                    ;706
000098  f7fffffe          BLEQ     vPortYield
                  |L12.156|
00009c  f7fffffe          BL       vPortExitCritical
;;;745    				{
;;;746    					/* The queue was full and a block time was specified so
;;;747    					configure the timeout structure. */
;;;748    					vTaskSetTimeOutState( &xTimeOut );
;;;749    					xEntryTimeSet = pdTRUE;
;;;750    				}
;;;751    				else
;;;752    				{
;;;753    					/* Entry time was already set. */
;;;754    					mtCOVERAGE_TEST_MARKER();
;;;755    				}
;;;756    			}
;;;757    		}
;;;758    		taskEXIT_CRITICAL();
;;;759    
;;;760    		/* Interrupts and other tasks can send to and receive from the queue
;;;761    		now the critical section has been exited. */
;;;762    
;;;763    		vTaskSuspendAll();
;;;764    		prvLockQueue( pxQueue );
;;;765    
;;;766    		/* Update the timeout state to see if it has expired yet. */
;;;767    		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
;;;768    		{
;;;769    			if( prvIsQueueFull( pxQueue ) != pdFALSE )
;;;770    			{
;;;771    				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
;;;772    				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
;;;773    
;;;774    				/* Unlocking the queue means queue events can effect the
;;;775    				event list.  It is possible	that interrupts occurring now
;;;776    				remove this task from the event	list again - but as the
;;;777    				scheduler is suspended the task will go onto the pending
;;;778    				ready last instead of the actual ready list. */
;;;779    				prvUnlockQueue( pxQueue );
;;;780    
;;;781    				/* Resuming the scheduler will move tasks from the pending
;;;782    				ready list into the ready list - so it is feasible that this
;;;783    				task is already in a ready list before it yields - in which
;;;784    				case the yield will not cause a context switch unless there
;;;785    				is also a higher priority task in the pending ready list. */
;;;786    				if( xTaskResumeAll() == pdFALSE )
;;;787    				{
;;;788    					portYIELD_WITHIN_API();
;;;789    				}
;;;790    			}
;;;791    			else
;;;792    			{
;;;793    				/* Try again. */
;;;794    				prvUnlockQueue( pxQueue );
;;;795    				( void ) xTaskResumeAll();
;;;796    			}
;;;797    		}
;;;798    		else
;;;799    		{
;;;800    			/* The timeout has expired. */
;;;801    			prvUnlockQueue( pxQueue );
;;;802    			( void ) xTaskResumeAll();
;;;803    
;;;804    			/* Return to the original privilege level before exiting the
;;;805    			function. */
;;;806    			traceQUEUE_SEND_FAILED( pxQueue );
;;;807    			return errQUEUE_FULL;
;;;808    		}
;;;809    	}
;;;810    }
0000a0  b007              ADD      sp,sp,#0x1c
0000a2  2001              MOVS     r0,#1                 ;729
0000a4  e8bd83f0          POP      {r4-r9,pc}
                  |L12.168|
0000a8  f7fffffe          BL       vPortExitCritical
0000ac  e01f              B        |L12.238|
                  |L12.174|
0000ae  4668              MOV      r0,sp                 ;748
0000b0  f7fffffe          BL       vTaskSetTimeOutState
0000b4  2601              MOVS     r6,#1                 ;749
                  |L12.182|
0000b6  f7fffffe          BL       vPortExitCritical
0000ba  f7fffffe          BL       vTaskSuspendAll
0000be  f7fffffe          BL       vPortEnterCritical
0000c2  6c60              LDR      r0,[r4,#0x44]         ;764
0000c4  f1b03fff          CMP      r0,#0xffffffff        ;764
0000c8  bf08              IT       EQ                    ;764
0000ca  6467              STREQ    r7,[r4,#0x44]         ;764
0000cc  6ca0              LDR      r0,[r4,#0x48]         ;764
0000ce  f1b03fff          CMP      r0,#0xffffffff        ;764
0000d2  bf08              IT       EQ                    ;764
0000d4  64a7              STREQ    r7,[r4,#0x48]         ;764
0000d6  f7fffffe          BL       vPortExitCritical
0000da  a905              ADD      r1,sp,#0x14           ;767
0000dc  4668              MOV      r0,sp                 ;767
0000de  f7fffffe          BL       xTaskCheckForTimeOut
0000e2  b140              CBZ      r0,|L12.246|
0000e4  4620              MOV      r0,r4                 ;801
0000e6  f7fffffe          BL       prvUnlockQueue
0000ea  f7fffffe          BL       xTaskResumeAll
                  |L12.238|
0000ee  b007              ADD      sp,sp,#0x1c
0000f0  2000              MOVS     r0,#0                 ;807
0000f2  e8bd83f0          POP      {r4-r9,pc}
                  |L12.246|
0000f6  f7fffffe          BL       vPortEnterCritical
0000fa  6ba0              LDR      r0,[r4,#0x38]
0000fc  6be1              LDR      r1,[r4,#0x3c]
0000fe  4288              CMP      r0,r1
000100  bf14              ITE      NE
000102  2500              MOVNE    r5,#0
000104  2501              MOVEQ    r5,#1
000106  f7fffffe          BL       vPortExitCritical
00010a  b175              CBZ      r5,|L12.298|
00010c  f1040010          ADD      r0,r4,#0x10           ;772
000110  9905              LDR      r1,[sp,#0x14]         ;772
000112  f7fffffe          BL       vTaskPlaceOnEventList
000116  4620              MOV      r0,r4                 ;779
000118  f7fffffe          BL       prvUnlockQueue
00011c  f7fffffe          BL       xTaskResumeAll
000120  2800              CMP      r0,#0                 ;786
000122  bf08              IT       EQ                    ;788
000124  f7fffffe          BLEQ     vPortYield
000128  e772              B        |L12.16|
                  |L12.298|
00012a  4620              MOV      r0,r4                 ;794
00012c  f7fffffe          BL       prvUnlockQueue
000130  f7fffffe          BL       xTaskResumeAll
000134  e76c              B        |L12.16|
;;;811    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xQueueGenericSendFromISR||, CODE, READONLY, ALIGN=1

                  xQueueGenericSendFromISR PROC
;;;1057   
;;;1058   BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1059   {
000004  461e              MOV      r6,r3
000006  4615              MOV      r5,r2
000008  460f              MOV      r7,r1
00000a  4604              MOV      r4,r0
;;;1060   BaseType_t xReturn;
;;;1061   UBaseType_t uxSavedInterruptStatus;
;;;1062   Queue_t * const pxQueue = ( Queue_t * ) xQueue;
;;;1063   
;;;1064   	configASSERT( pxQueue );
;;;1065   	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
;;;1066   	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
;;;1067   
;;;1068   	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;1069   	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;1070   	above the maximum system call priority are kept permanently enabled, even
;;;1071   	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;1072   	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;1073   	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1074   	failure if a FreeRTOS API function is called from an interrupt that has been
;;;1075   	assigned a priority above the configured maximum system call priority.
;;;1076   	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;1077   	that have been assigned a priority at or (logically) below the maximum
;;;1078   	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;1079   	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;1080   	More information (albeit Cortex-M specific) is provided on the following
;;;1081   	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1082   	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;1083   
;;;1084   	/* Similar to xQueueGenericSend, except without blocking if there is no room
;;;1085   	in the queue.  Also don't directly wake a task that was blocked on a queue
;;;1086   	read, instead return a flag to say whether a context switch is required or
;;;1087   	not (i.e. has a task with a higher priority than us been woken by this
;;;1088   	post). */
;;;1089   	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
00000c  f7fffffe          BL       ulPortSetInterruptMask
000010  4680              MOV      r8,r0
;;;1090   	{
;;;1091   		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
000012  6ba0              LDR      r0,[r4,#0x38]
000014  6be1              LDR      r1,[r4,#0x3c]
000016  4288              CMP      r0,r1
000018  d309              BCC      |L13.46|
00001a  2e02              CMP      r6,#2
;;;1092   		{
;;;1093   			traceQUEUE_SEND_FROM_ISR( pxQueue );
;;;1094   
;;;1095   			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
;;;1096   			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
;;;1097   			in a task disinheriting a priority and prvCopyDataToQueue() can be
;;;1098   			called here even though the disinherit function does not check if
;;;1099   			the scheduler is suspended before accessing the ready lists. */
;;;1100   			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
;;;1101   
;;;1102   			/* The event list is not altered if the queue is locked.  This will
;;;1103   			be done when the queue is unlocked later. */
;;;1104   			if( pxQueue->xTxLock == queueUNLOCKED )
;;;1105   			{
;;;1106   				#if ( configUSE_QUEUE_SETS == 1 )
;;;1107   				{
;;;1108   					if( pxQueue->pxQueueSetContainer != NULL )
;;;1109   					{
;;;1110   						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
;;;1111   						{
;;;1112   							/* The queue is a member of a queue set, and posting
;;;1113   							to the queue set caused a higher priority task to
;;;1114   							unblock.  A context switch is required. */
;;;1115   							if( pxHigherPriorityTaskWoken != NULL )
;;;1116   							{
;;;1117   								*pxHigherPriorityTaskWoken = pdTRUE;
;;;1118   							}
;;;1119   							else
;;;1120   							{
;;;1121   								mtCOVERAGE_TEST_MARKER();
;;;1122   							}
;;;1123   						}
;;;1124   						else
;;;1125   						{
;;;1126   							mtCOVERAGE_TEST_MARKER();
;;;1127   						}
;;;1128   					}
;;;1129   					else
;;;1130   					{
;;;1131   						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;1132   						{
;;;1133   							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
;;;1134   							{
;;;1135   								/* The task waiting has a higher priority so
;;;1136   								record that a context switch is required. */
;;;1137   								if( pxHigherPriorityTaskWoken != NULL )
;;;1138   								{
;;;1139   									*pxHigherPriorityTaskWoken = pdTRUE;
;;;1140   								}
;;;1141   								else
;;;1142   								{
;;;1143   									mtCOVERAGE_TEST_MARKER();
;;;1144   								}
;;;1145   							}
;;;1146   							else
;;;1147   							{
;;;1148   								mtCOVERAGE_TEST_MARKER();
;;;1149   							}
;;;1150   						}
;;;1151   						else
;;;1152   						{
;;;1153   							mtCOVERAGE_TEST_MARKER();
;;;1154   						}
;;;1155   					}
;;;1156   				}
;;;1157   				#else /* configUSE_QUEUE_SETS */
;;;1158   				{
;;;1159   					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;1160   					{
;;;1161   						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
;;;1162   						{
;;;1163   							/* The task waiting has a higher priority so record that a
;;;1164   							context	switch is required. */
;;;1165   							if( pxHigherPriorityTaskWoken != NULL )
;;;1166   							{
;;;1167   								*pxHigherPriorityTaskWoken = pdTRUE;
;;;1168   							}
;;;1169   							else
;;;1170   							{
;;;1171   								mtCOVERAGE_TEST_MARKER();
;;;1172   							}
;;;1173   						}
;;;1174   						else
;;;1175   						{
;;;1176   							mtCOVERAGE_TEST_MARKER();
;;;1177   						}
;;;1178   					}
;;;1179   					else
;;;1180   					{
;;;1181   						mtCOVERAGE_TEST_MARKER();
;;;1182   					}
;;;1183   				}
;;;1184   				#endif /* configUSE_QUEUE_SETS */
;;;1185   			}
;;;1186   			else
;;;1187   			{
;;;1188   				/* Increment the lock count so the task that unlocks the queue
;;;1189   				knows that data was posted while it was locked. */
;;;1190   				++( pxQueue->xTxLock );
;;;1191   			}
;;;1192   
;;;1193   			xReturn = pdPASS;
;;;1194   		}
;;;1195   		else
;;;1196   		{
;;;1197   			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
;;;1198   			xReturn = errQUEUE_FULL;
00001c  bf18              IT       NE
00001e  2400              MOVNE    r4,#0
000020  d005              BEQ      |L13.46|
                  |L13.34|
;;;1199   		}
;;;1200   	}
;;;1201   	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
000022  4640              MOV      r0,r8
000024  f7fffffe          BL       vPortClearInterruptMask
;;;1202   
;;;1203   	return xReturn;
000028  4620              MOV      r0,r4
;;;1204   }
00002a  e8bd81f0          POP      {r4-r8,pc}
                  |L13.46|
00002e  4632              MOV      r2,r6                 ;1100
000030  4639              MOV      r1,r7                 ;1100
000032  4620              MOV      r0,r4                 ;1100
000034  f7fffffe          BL       prvCopyDataToQueue
000038  6ca0              LDR      r0,[r4,#0x48]         ;1104
00003a  f1b03fff          CMP      r0,#0xffffffff        ;1104
00003e  d004              BEQ      |L13.74|
000040  6ca0              LDR      r0,[r4,#0x48]         ;1190
000042  1c40              ADDS     r0,r0,#1              ;1190
000044  64a0              STR      r0,[r4,#0x48]         ;1190
                  |L13.70|
000046  2401              MOVS     r4,#1                 ;1193
000048  e7eb              B        |L13.34|
                  |L13.74|
00004a  6a60              LDR      r0,[r4,#0x24]         ;1159
00004c  2800              CMP      r0,#0                 ;1159
00004e  d0fa              BEQ      |L13.70|
000050  f1040024          ADD      r0,r4,#0x24           ;1161
000054  f7fffffe          BL       xTaskRemoveFromEventList
000058  2800              CMP      r0,#0                 ;1161
00005a  bf1e              ITTT     NE                    ;1165
00005c  2d00              CMPNE    r5,#0                 ;1165
00005e  2001              MOVNE    r0,#1                 ;1167
000060  6028              STRNE    r0,[r5,#0]            ;1167
000062  e7f0              B        |L13.70|
;;;1205   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xQueueGiveFromISR||, CODE, READONLY, ALIGN=1

                  xQueueGiveFromISR PROC
;;;1206   
;;;1207   BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
000000  b570              PUSH     {r4-r6,lr}
;;;1208   {
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;1209   BaseType_t xReturn;
;;;1210   UBaseType_t uxSavedInterruptStatus;
;;;1211   Queue_t * const pxQueue = ( Queue_t * ) xQueue;
;;;1212   
;;;1213   	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
;;;1214   	item size is 0.  Don't directly wake a task that was blocked on a queue
;;;1215   	read, instead return a flag to say whether a context switch is required or
;;;1216   	not (i.e. has a task with a higher priority than us been woken by this
;;;1217   	post). */
;;;1218   
;;;1219   	configASSERT( pxQueue );
;;;1220   
;;;1221   	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
;;;1222   	if the item size is not 0. */
;;;1223   	configASSERT( pxQueue->uxItemSize == 0 );
;;;1224   
;;;1225   	/* Normally a mutex would not be given from an interrupt, and doing so is
;;;1226   	definitely wrong if there is a mutex holder as priority inheritance makes no
;;;1227   	sense for an interrupts, only tasks. */
;;;1228   	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
;;;1229   
;;;1230   	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;1231   	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;1232   	above the maximum system call priority are kept permanently enabled, even
;;;1233   	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;1234   	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;1235   	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1236   	failure if a FreeRTOS API function is called from an interrupt that has been
;;;1237   	assigned a priority above the configured maximum system call priority.
;;;1238   	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;1239   	that have been assigned a priority at or (logically) below the maximum
;;;1240   	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;1241   	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;1242   	More information (albeit Cortex-M specific) is provided on the following
;;;1243   	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1244   	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;1245   
;;;1246   	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
000006  f7fffffe          BL       ulPortSetInterruptMask
00000a  4606              MOV      r6,r0
;;;1247   	{
;;;1248   		/* When the queue is used to implement a semaphore no data is ever
;;;1249   		moved through the queue but it is still valid to see if the queue 'has
;;;1250   		space'. */
;;;1251   		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
00000c  6ba0              LDR      r0,[r4,#0x38]
00000e  6be1              LDR      r1,[r4,#0x3c]
000010  4288              CMP      r0,r1
;;;1252   		{
;;;1253   			traceQUEUE_SEND_FROM_ISR( pxQueue );
;;;1254   
;;;1255   			/* A task can only have an inherited priority if it is a mutex
;;;1256   			holder - and if there is a mutex holder then the mutex cannot be
;;;1257   			given from an ISR.  As this is the ISR version of the function it
;;;1258   			can be assumed there is no mutex holder and no need to determine if
;;;1259   			priority disinheritance is needed.  Simply increase the count of
;;;1260   			messages (semaphores) available. */
;;;1261   			++( pxQueue->uxMessagesWaiting );
;;;1262   
;;;1263   			/* The event list is not altered if the queue is locked.  This will
;;;1264   			be done when the queue is unlocked later. */
;;;1265   			if( pxQueue->xTxLock == queueUNLOCKED )
;;;1266   			{
;;;1267   				#if ( configUSE_QUEUE_SETS == 1 )
;;;1268   				{
;;;1269   					if( pxQueue->pxQueueSetContainer != NULL )
;;;1270   					{
;;;1271   						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
;;;1272   						{
;;;1273   							/* The semaphore is a member of a queue set, and
;;;1274   							posting	to the queue set caused a higher priority
;;;1275   							task to	unblock.  A context switch is required. */
;;;1276   							if( pxHigherPriorityTaskWoken != NULL )
;;;1277   							{
;;;1278   								*pxHigherPriorityTaskWoken = pdTRUE;
;;;1279   							}
;;;1280   							else
;;;1281   							{
;;;1282   								mtCOVERAGE_TEST_MARKER();
;;;1283   							}
;;;1284   						}
;;;1285   						else
;;;1286   						{
;;;1287   							mtCOVERAGE_TEST_MARKER();
;;;1288   						}
;;;1289   					}
;;;1290   					else
;;;1291   					{
;;;1292   						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;1293   						{
;;;1294   							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
;;;1295   							{
;;;1296   								/* The task waiting has a higher priority so
;;;1297   								record that a context switch is required. */
;;;1298   								if( pxHigherPriorityTaskWoken != NULL )
;;;1299   								{
;;;1300   									*pxHigherPriorityTaskWoken = pdTRUE;
;;;1301   								}
;;;1302   								else
;;;1303   								{
;;;1304   									mtCOVERAGE_TEST_MARKER();
;;;1305   								}
;;;1306   							}
;;;1307   							else
;;;1308   							{
;;;1309   								mtCOVERAGE_TEST_MARKER();
;;;1310   							}
;;;1311   						}
;;;1312   						else
;;;1313   						{
;;;1314   							mtCOVERAGE_TEST_MARKER();
;;;1315   						}
;;;1316   					}
;;;1317   				}
;;;1318   				#else /* configUSE_QUEUE_SETS */
;;;1319   				{
;;;1320   					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;1321   					{
;;;1322   						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
;;;1323   						{
;;;1324   							/* The task waiting has a higher priority so record that a
;;;1325   							context	switch is required. */
;;;1326   							if( pxHigherPriorityTaskWoken != NULL )
;;;1327   							{
;;;1328   								*pxHigherPriorityTaskWoken = pdTRUE;
;;;1329   							}
;;;1330   							else
;;;1331   							{
;;;1332   								mtCOVERAGE_TEST_MARKER();
;;;1333   							}
;;;1334   						}
;;;1335   						else
;;;1336   						{
;;;1337   							mtCOVERAGE_TEST_MARKER();
;;;1338   						}
;;;1339   					}
;;;1340   					else
;;;1341   					{
;;;1342   						mtCOVERAGE_TEST_MARKER();
;;;1343   					}
;;;1344   				}
;;;1345   				#endif /* configUSE_QUEUE_SETS */
;;;1346   			}
;;;1347   			else
;;;1348   			{
;;;1349   				/* Increment the lock count so the task that unlocks the queue
;;;1350   				knows that data was posted while it was locked. */
;;;1351   				++( pxQueue->xTxLock );
;;;1352   			}
;;;1353   
;;;1354   			xReturn = pdPASS;
;;;1355   		}
;;;1356   		else
;;;1357   		{
;;;1358   			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
;;;1359   			xReturn = errQUEUE_FULL;
000012  bf28              IT       CS
000014  2400              MOVCS    r4,#0
000016  d20a              BCS      |L14.46|
000018  6ba0              LDR      r0,[r4,#0x38]         ;1261
00001a  1c40              ADDS     r0,r0,#1              ;1261
00001c  63a0              STR      r0,[r4,#0x38]         ;1261
00001e  6ca0              LDR      r0,[r4,#0x48]         ;1265
000020  f1b03fff          CMP      r0,#0xffffffff        ;1265
000024  d008              BEQ      |L14.56|
000026  6ca0              LDR      r0,[r4,#0x48]         ;1351
000028  1c40              ADDS     r0,r0,#1              ;1351
00002a  64a0              STR      r0,[r4,#0x48]         ;1351
                  |L14.44|
00002c  2401              MOVS     r4,#1                 ;1354
                  |L14.46|
;;;1360   		}
;;;1361   	}
;;;1362   	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       vPortClearInterruptMask
;;;1363   
;;;1364   	return xReturn;
000034  4620              MOV      r0,r4
;;;1365   }
000036  bd70              POP      {r4-r6,pc}
                  |L14.56|
000038  6a60              LDR      r0,[r4,#0x24]         ;1320
00003a  2800              CMP      r0,#0                 ;1320
00003c  d0f6              BEQ      |L14.44|
00003e  f1040024          ADD      r0,r4,#0x24           ;1322
000042  f7fffffe          BL       xTaskRemoveFromEventList
000046  2800              CMP      r0,#0                 ;1322
000048  bf1e              ITTT     NE                    ;1326
00004a  2d00              CMPNE    r5,#0                 ;1326
00004c  2001              MOVNE    r0,#1                 ;1328
00004e  6028              STRNE    r0,[r5,#0]            ;1328
000050  e7ec              B        |L14.44|
;;;1366   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xQueueIsQueueEmptyFromISR||, CODE, READONLY, ALIGN=1

                  xQueueIsQueueEmptyFromISR PROC
;;;2015   
;;;2016   BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
000000  6b80              LDR      r0,[r0,#0x38]
;;;2017   {
;;;2018   BaseType_t xReturn;
;;;2019   
;;;2020   	configASSERT( xQueue );
;;;2021   	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
000002  2800              CMP      r0,#0
;;;2022   	{
;;;2023   		xReturn = pdTRUE;
000004  bf0c              ITE      EQ
000006  2001              MOVEQ    r0,#1
;;;2024   	}
;;;2025   	else
;;;2026   	{
;;;2027   		xReturn = pdFALSE;
000008  2000              MOVNE    r0,#0
;;;2028   	}
;;;2029   
;;;2030   	return xReturn;
;;;2031   } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
00000a  4770              BX       lr
;;;2032   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xQueueIsQueueFullFromISR||, CODE, READONLY, ALIGN=1

                  xQueueIsQueueFullFromISR PROC
;;;2054   
;;;2055   BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
000000  6b81              LDR      r1,[r0,#0x38]
;;;2056   {
;;;2057   BaseType_t xReturn;
;;;2058   
;;;2059   	configASSERT( xQueue );
;;;2060   	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
000002  6bc0              LDR      r0,[r0,#0x3c]
000004  4281              CMP      r1,r0
;;;2061   	{
;;;2062   		xReturn = pdTRUE;
000006  bf0c              ITE      EQ
000008  2001              MOVEQ    r0,#1
;;;2063   	}
;;;2064   	else
;;;2065   	{
;;;2066   		xReturn = pdFALSE;
00000a  2000              MOVNE    r0,#0
;;;2067   	}
;;;2068   
;;;2069   	return xReturn;
;;;2070   } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
00000c  4770              BX       lr
;;;2071   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xQueuePeekFromISR||, CODE, READONLY, ALIGN=1

                  xQueuePeekFromISR PROC
;;;1641   
;;;1642   BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1643   {
000004  460f              MOV      r7,r1
000006  4604              MOV      r4,r0
;;;1644   BaseType_t xReturn;
;;;1645   UBaseType_t uxSavedInterruptStatus;
;;;1646   int8_t *pcOriginalReadPosition;
;;;1647   Queue_t * const pxQueue = ( Queue_t * ) xQueue;
;;;1648   
;;;1649   	configASSERT( pxQueue );
;;;1650   	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
;;;1651   	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
;;;1652   
;;;1653   	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;1654   	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;1655   	above the maximum system call priority are kept permanently enabled, even
;;;1656   	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;1657   	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;1658   	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1659   	failure if a FreeRTOS API function is called from an interrupt that has been
;;;1660   	assigned a priority above the configured maximum system call priority.
;;;1661   	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;1662   	that have been assigned a priority at or (logically) below the maximum
;;;1663   	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;1664   	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;1665   	More information (albeit Cortex-M specific) is provided on the following
;;;1666   	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1667   	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;1668   
;;;1669   	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
000008  f7fffffe          BL       ulPortSetInterruptMask
00000c  4606              MOV      r6,r0
;;;1670   	{
;;;1671   		/* Cannot block in an ISR, so check there is data available. */
;;;1672   		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
00000e  6ba0              LDR      r0,[r4,#0x38]
000010  2800              CMP      r0,#0
;;;1673   		{
;;;1674   			traceQUEUE_PEEK_FROM_ISR( pxQueue );
;;;1675   
;;;1676   			/* Remember the read position so it can be reset as nothing is
;;;1677   			actually being removed from the queue. */
;;;1678   			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
;;;1679   			prvCopyDataFromQueue( pxQueue, pvBuffer );
;;;1680   			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
;;;1681   
;;;1682   			xReturn = pdPASS;
;;;1683   		}
;;;1684   		else
;;;1685   		{
;;;1686   			xReturn = pdFAIL;
000012  bf08              IT       EQ
000014  2400              MOVEQ    r4,#0
000016  d010              BEQ      |L17.58|
000018  68e5              LDR      r5,[r4,#0xc]          ;1672
00001a  6c20              LDR      r0,[r4,#0x40]         ;1672
00001c  b158              CBZ      r0,|L17.54|
00001e  4428              ADD      r0,r0,r5              ;1672
000020  60e0              STR      r0,[r4,#0xc]          ;1672
000022  6861              LDR      r1,[r4,#4]            ;1672
000024  4288              CMP      r0,r1                 ;1672
000026  bf24              ITT      CS                    ;1672
000028  6820              LDRCS    r0,[r4,#0]            ;1672
00002a  60e0              STRCS    r0,[r4,#0xc]          ;1672
00002c  4601              MOV      r1,r0                 ;1672
00002e  4638              MOV      r0,r7                 ;1672
000030  6c22              LDR      r2,[r4,#0x40]         ;1672
000032  f7fffffe          BL       __aeabi_memcpy
                  |L17.54|
000036  60e5              STR      r5,[r4,#0xc]          ;1682
000038  2401              MOVS     r4,#1                 ;1682
                  |L17.58|
;;;1687   			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
;;;1688   		}
;;;1689   	}
;;;1690   	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
00003a  4630              MOV      r0,r6
00003c  f7fffffe          BL       vPortClearInterruptMask
;;;1691   
;;;1692   	return xReturn;
000040  4620              MOV      r0,r4
;;;1693   }
000042  e8bd81f0          POP      {r4-r8,pc}
;;;1694   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xQueueReceiveFromISR||, CODE, READONLY, ALIGN=1

                  xQueueReceiveFromISR PROC
;;;1554   
;;;1555   BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1556   {
000004  4615              MOV      r5,r2
000006  460f              MOV      r7,r1
000008  4604              MOV      r4,r0
;;;1557   BaseType_t xReturn;
;;;1558   UBaseType_t uxSavedInterruptStatus;
;;;1559   Queue_t * const pxQueue = ( Queue_t * ) xQueue;
;;;1560   
;;;1561   	configASSERT( pxQueue );
;;;1562   	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
;;;1563   
;;;1564   	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;1565   	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;1566   	above the maximum system call priority are kept permanently enabled, even
;;;1567   	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;1568   	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;1569   	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1570   	failure if a FreeRTOS API function is called from an interrupt that has been
;;;1571   	assigned a priority above the configured maximum system call priority.
;;;1572   	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;1573   	that have been assigned a priority at or (logically) below the maximum
;;;1574   	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;1575   	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;1576   	More information (albeit Cortex-M specific) is provided on the following
;;;1577   	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1578   	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;1579   
;;;1580   	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
00000a  f7fffffe          BL       ulPortSetInterruptMask
00000e  4606              MOV      r6,r0
;;;1581   	{
;;;1582   		/* Cannot block in an ISR, so check there is data available. */
;;;1583   		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
000010  6ba0              LDR      r0,[r4,#0x38]
000012  2800              CMP      r0,#0
;;;1584   		{
;;;1585   			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
;;;1586   
;;;1587   			prvCopyDataFromQueue( pxQueue, pvBuffer );
;;;1588   			--( pxQueue->uxMessagesWaiting );
;;;1589   
;;;1590   			/* If the queue is locked the event list will not be modified.
;;;1591   			Instead update the lock count so the task that unlocks the queue
;;;1592   			will know that an ISR has removed data while the queue was
;;;1593   			locked. */
;;;1594   			if( pxQueue->xRxLock == queueUNLOCKED )
;;;1595   			{
;;;1596   				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
;;;1597   				{
;;;1598   					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
;;;1599   					{
;;;1600   						/* The task waiting has a higher priority than us so
;;;1601   						force a context switch. */
;;;1602   						if( pxHigherPriorityTaskWoken != NULL )
;;;1603   						{
;;;1604   							*pxHigherPriorityTaskWoken = pdTRUE;
;;;1605   						}
;;;1606   						else
;;;1607   						{
;;;1608   							mtCOVERAGE_TEST_MARKER();
;;;1609   						}
;;;1610   					}
;;;1611   					else
;;;1612   					{
;;;1613   						mtCOVERAGE_TEST_MARKER();
;;;1614   					}
;;;1615   				}
;;;1616   				else
;;;1617   				{
;;;1618   					mtCOVERAGE_TEST_MARKER();
;;;1619   				}
;;;1620   			}
;;;1621   			else
;;;1622   			{
;;;1623   				/* Increment the lock count so the task that unlocks the queue
;;;1624   				knows that data was removed while it was locked. */
;;;1625   				++( pxQueue->xRxLock );
;;;1626   			}
;;;1627   
;;;1628   			xReturn = pdPASS;
;;;1629   		}
;;;1630   		else
;;;1631   		{
;;;1632   			xReturn = pdFAIL;
000014  bf08              IT       EQ
000016  2400              MOVEQ    r4,#0
000018  d019              BEQ      |L18.78|
00001a  6c20              LDR      r0,[r4,#0x40]         ;1583
00001c  b160              CBZ      r0,|L18.56|
00001e  68e1              LDR      r1,[r4,#0xc]          ;1583
000020  4408              ADD      r0,r0,r1              ;1583
000022  60e0              STR      r0,[r4,#0xc]          ;1583
000024  6861              LDR      r1,[r4,#4]            ;1583
000026  4288              CMP      r0,r1                 ;1583
000028  bf24              ITT      CS                    ;1583
00002a  6820              LDRCS    r0,[r4,#0]            ;1583
00002c  60e0              STRCS    r0,[r4,#0xc]          ;1583
00002e  4601              MOV      r1,r0                 ;1583
000030  4638              MOV      r0,r7                 ;1583
000032  6c22              LDR      r2,[r4,#0x40]         ;1583
000034  f7fffffe          BL       __aeabi_memcpy
                  |L18.56|
000038  6ba0              LDR      r0,[r4,#0x38]         ;1588
00003a  1e40              SUBS     r0,r0,#1              ;1588
00003c  63a0              STR      r0,[r4,#0x38]         ;1588
00003e  6c60              LDR      r0,[r4,#0x44]         ;1594
000040  f1b03fff          CMP      r0,#0xffffffff        ;1594
000044  d009              BEQ      |L18.90|
000046  6c60              LDR      r0,[r4,#0x44]         ;1625
000048  1c40              ADDS     r0,r0,#1              ;1625
00004a  6460              STR      r0,[r4,#0x44]         ;1625
                  |L18.76|
00004c  2401              MOVS     r4,#1                 ;1628
                  |L18.78|
;;;1633   			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
;;;1634   		}
;;;1635   	}
;;;1636   	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
00004e  4630              MOV      r0,r6
000050  f7fffffe          BL       vPortClearInterruptMask
;;;1637   
;;;1638   	return xReturn;
000054  4620              MOV      r0,r4
;;;1639   }
000056  e8bd81f0          POP      {r4-r8,pc}
                  |L18.90|
00005a  6920              LDR      r0,[r4,#0x10]         ;1596
00005c  2800              CMP      r0,#0                 ;1596
00005e  d0f5              BEQ      |L18.76|
000060  f1040010          ADD      r0,r4,#0x10           ;1598
000064  f7fffffe          BL       xTaskRemoveFromEventList
000068  2800              CMP      r0,#0                 ;1598
00006a  bf1e              ITTT     NE                    ;1602
00006c  2d00              CMPNE    r5,#0                 ;1602
00006e  2001              MOVNE    r0,#1                 ;1604
000070  6028              STRNE    r0,[r5,#0]            ;1604
000072  e7eb              B        |L18.76|
;;;1640   /*-----------------------------------------------------------*/
                          ENDP

