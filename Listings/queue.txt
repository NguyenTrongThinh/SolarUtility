; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\queue.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\queue.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\Driver -I.\Application -I.\System\FreeRTOS\include -I.\System\FreeRTOS\portable\MemMang -I.\System\FreeRTOS\portable\RVDS\ARM_CM3 -I.\System\Libraries\CMSIS\CM3\CoreSupport -I.\System\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I.\System\Libraries\STM32F10x_StdPeriph_Driver\inc -ID:\ARM\SolarUtility\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=516 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\objects\queue.crf System\FreeRTOS\queue.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  xQueueGenericReset PROC
;;;259    
;;;260    BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
000000  b570              PUSH     {r4-r6,lr}
;;;261    {
000002  460d              MOV      r5,r1
;;;262    Queue_t * const pxQueue = ( Queue_t * ) xQueue;
000004  4604              MOV      r4,r0
;;;263    
;;;264    	configASSERT( pxQueue );
;;;265    
;;;266    	taskENTER_CRITICAL();
000006  f7fffffe          BL       vPortEnterCritical
;;;267    	{
;;;268    		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
00000a  e9d4120f          LDRD     r1,r2,[r4,#0x3c]
00000e  6820              LDR      r0,[r4,#0]
000010  fb010002          MLA      r0,r1,r2,r0
;;;269    		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
000014  6060              STR      r0,[r4,#4]
000016  2000              MOVS     r0,#0
000018  63a0              STR      r0,[r4,#0x38]
;;;270    		pxQueue->pcWriteTo = pxQueue->pcHead;
00001a  6820              LDR      r0,[r4,#0]
00001c  1e49              SUBS     r1,r1,#1
;;;271    		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
00001e  60a0              STR      r0,[r4,#8]
000020  fb010002          MLA      r0,r1,r2,r0
;;;272    		pxQueue->xRxLock = queueUNLOCKED;
000024  60e0              STR      r0,[r4,#0xc]
000026  f04f30ff          MOV      r0,#0xffffffff
00002a  6460              STR      r0,[r4,#0x44]
;;;273    		pxQueue->xTxLock = queueUNLOCKED;
00002c  64a0              STR      r0,[r4,#0x48]
;;;274    
;;;275    		if( xNewQueue == pdFALSE )
00002e  b15d              CBZ      r5,|L1.72|
;;;276    		{
;;;277    			/* If there are tasks blocked waiting to read from the queue, then
;;;278    			the tasks will remain blocked as after this function exits the queue
;;;279    			will still be empty.  If there are tasks blocked waiting to write to
;;;280    			the queue, then one should be unblocked as after this function exits
;;;281    			it will be possible to write to it. */
;;;282    			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
;;;283    			{
;;;284    				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
;;;285    				{
;;;286    					queueYIELD_IF_USING_PREEMPTION();
;;;287    				}
;;;288    				else
;;;289    				{
;;;290    					mtCOVERAGE_TEST_MARKER();
;;;291    				}
;;;292    			}
;;;293    			else
;;;294    			{
;;;295    				mtCOVERAGE_TEST_MARKER();
;;;296    			}
;;;297    		}
;;;298    		else
;;;299    		{
;;;300    			/* Ensure the event queues start in the correct state. */
;;;301    			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
000030  f1040010          ADD      r0,r4,#0x10
000034  f7fffffe          BL       vListInitialise
;;;302    			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
000038  f1040024          ADD      r0,r4,#0x24
00003c  f7fffffe          BL       vListInitialise
                  |L1.64|
;;;303    		}
;;;304    	}
;;;305    	taskEXIT_CRITICAL();
000040  f7fffffe          BL       vPortExitCritical
;;;306    
;;;307    	/* A value is returned for calling semantic consistency with previous
;;;308    	versions. */
;;;309    	return pdPASS;
000044  2001              MOVS     r0,#1
;;;310    }
000046  bd70              POP      {r4-r6,pc}
                  |L1.72|
000048  6920              LDR      r0,[r4,#0x10]         ;282
00004a  2800              CMP      r0,#0                 ;282
00004c  d0f8              BEQ      |L1.64|
00004e  f1040010          ADD      r0,r4,#0x10           ;284
000052  f7fffffe          BL       xTaskRemoveFromEventList
000056  2801              CMP      r0,#1                 ;284
000058  bf08              IT       EQ                    ;286
00005a  f7fffffe          BLEQ     vPortYield
00005e  e7ef              B        |L1.64|
;;;311    /*-----------------------------------------------------------*/
                          ENDP

                  xQueueGenericCreate PROC
;;;312    
;;;313    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
000060  b570              PUSH     {r4-r6,lr}
;;;314    {
000062  000d              MOVS     r5,r1
000064  4606              MOV      r6,r0
;;;315    Queue_t *pxNewQueue;
;;;316    size_t xQueueSizeInBytes;
;;;317    QueueHandle_t xReturn = NULL;
000066  f04f0400          MOV      r4,#0
;;;318    int8_t *pcAllocatedBuffer;
;;;319    
;;;320    	/* Remove compiler warnings about unused parameters should
;;;321    	configUSE_TRACE_FACILITY not be set to 1. */
;;;322    	( void ) ucQueueType;
;;;323    
;;;324    	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
;;;325    
;;;326    	if( uxItemSize == ( UBaseType_t ) 0 )
;;;327    	{
;;;328    		/* There is not going to be a queue storage area. */
;;;329    		xQueueSizeInBytes = ( size_t ) 0;
00006a  bf0e              ITEE     EQ
00006c  2000              MOVEQ    r0,#0
;;;330    	}
;;;331    	else
;;;332    	{
;;;333    		/* The queue is one byte longer than asked for to make wrap checking
;;;334    		easier/faster. */
;;;335    		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
00006e  fb06f005          MULNE    r0,r6,r5
000072  1c40              ADDNE    r0,r0,#1
000074  304c              ADDS     r0,r0,#0x4c
;;;336    	}
;;;337    
;;;338    	/* Allocate the new queue structure and storage area. */
;;;339    	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
000076  f7fffffe          BL       pvPortMalloc
;;;340    
;;;341    	if( pcAllocatedBuffer != NULL )
00007a  b330              CBZ      r0,|L1.202|
;;;342    	{
;;;343    		pxNewQueue = ( Queue_t * ) pcAllocatedBuffer; /*lint !e826 MISRA The buffer cannot be too small because it was dimensioned by sizeof( Queue_t ) + xQueueSizeInBytes. */
00007c  4604              MOV      r4,r0
;;;344    
;;;345    		if( uxItemSize == ( UBaseType_t ) 0 )
00007e  2d00              CMP      r5,#0
;;;346    		{
;;;347    			/* No RAM was allocated for the queue storage area, but PC head
;;;348    			cannot be set to NULL because NULL is used as a key to say the queue
;;;349    			is used as a mutex.  Therefore just set pcHead to point to the queue
;;;350    			as a benign value that is known to be within the memory map. */
;;;351    			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
000080  bf0e              ITEE     EQ
000082  6024              STREQ    r4,[r4,#0]
;;;352    		}
;;;353    		else
;;;354    		{
;;;355    			/* Jump past the queue structure to find the location of the queue
;;;356    			storage area - adding the padding bytes to get a better alignment. */
;;;357    			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
000084  f104004c          ADDNE    r0,r4,#0x4c
000088  6020              STRNE    r0,[r4,#0]
00008a  e9c4650f          STRD     r6,r5,[r4,#0x3c]
00008e  f7fffffe          BL       vPortEnterCritical
000092  e9d4120f          LDRD     r1,r2,[r4,#0x3c]
000096  6820              LDR      r0,[r4,#0]
000098  fb010002          MLA      r0,r1,r2,r0
00009c  6060              STR      r0,[r4,#4]
00009e  2000              MOVS     r0,#0
0000a0  63a0              STR      r0,[r4,#0x38]
0000a2  6820              LDR      r0,[r4,#0]
0000a4  1e49              SUBS     r1,r1,#1
0000a6  60a0              STR      r0,[r4,#8]
0000a8  fb010002          MLA      r0,r1,r2,r0
0000ac  60e0              STR      r0,[r4,#0xc]
0000ae  f04f30ff          MOV      r0,#0xffffffff
0000b2  6460              STR      r0,[r4,#0x44]
0000b4  64a0              STR      r0,[r4,#0x48]
0000b6  f1040010          ADD      r0,r4,#0x10
0000ba  f7fffffe          BL       vListInitialise
0000be  f1040024          ADD      r0,r4,#0x24
0000c2  f7fffffe          BL       vListInitialise
0000c6  f7fffffe          BL       vPortExitCritical
                  |L1.202|
;;;358    		}
;;;359    
;;;360    		/* Initialise the queue members as described above where the queue type
;;;361    		is defined. */
;;;362    		pxNewQueue->uxLength = uxQueueLength;
;;;363    		pxNewQueue->uxItemSize = uxItemSize;
;;;364    		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
;;;365    
;;;366    		#if ( configUSE_TRACE_FACILITY == 1 )
;;;367    		{
;;;368    			pxNewQueue->ucQueueType = ucQueueType;
;;;369    		}
;;;370    		#endif /* configUSE_TRACE_FACILITY */
;;;371    
;;;372    		#if( configUSE_QUEUE_SETS == 1 )
;;;373    		{
;;;374    			pxNewQueue->pxQueueSetContainer = NULL;
;;;375    		}
;;;376    		#endif /* configUSE_QUEUE_SETS */
;;;377    
;;;378    		traceQUEUE_CREATE( pxNewQueue );
;;;379    		xReturn = pxNewQueue;
;;;380    	}
;;;381    	else
;;;382    	{
;;;383    		mtCOVERAGE_TEST_MARKER();
;;;384    	}
;;;385    
;;;386    	configASSERT( xReturn );
;;;387    
;;;388    	return xReturn;
0000ca  4620              MOV      r0,r4
;;;389    }
0000cc  bd70              POP      {r4-r6,pc}
;;;390    /*-----------------------------------------------------------*/
                          ENDP

                  xQueueCreateCountingSemaphore PROC
;;;585    
;;;586    	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
0000ce  e92d41f0          PUSH     {r4-r8,lr}
;;;587    	{
;;;588    	QueueHandle_t xHandle;
;;;589    
;;;590    		configASSERT( uxMaxCount != 0 );
;;;591    		configASSERT( uxInitialCount <= uxMaxCount );
;;;592    
;;;593    		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
0000d2  4606              MOV      r6,r0
0000d4  2700              MOVS     r7,#0
0000d6  460d              MOV      r5,r1                 ;587
0000d8  463c              MOV      r4,r7                 ;587
0000da  204c              MOVS     r0,#0x4c              ;587
0000dc  f7fffffe          BL       pvPortMalloc
0000e0  2800              CMP      r0,#0                 ;587
0000e2  bf04              ITT      EQ                    ;587
0000e4  4620              MOVEQ    r0,r4                 ;587
;;;594    
;;;595    		if( xHandle != NULL )
;;;596    		{
;;;597    			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
;;;598    
;;;599    			traceCREATE_COUNTING_SEMAPHORE();
;;;600    		}
;;;601    		else
;;;602    		{
;;;603    			traceCREATE_COUNTING_SEMAPHORE_FAILED();
;;;604    		}
;;;605    
;;;606    		configASSERT( xHandle );
;;;607    		return xHandle;
;;;608    	}
0000e6  e8bd81f0          POPEQ    {r4-r8,pc}
0000ea  4604              MOV      r4,r0
0000ec  6000              STR      r0,[r0,#0]
0000ee  e9c4670f          STRD     r6,r7,[r4,#0x3c]
0000f2  f7fffffe          BL       vPortEnterCritical
0000f6  e9d4120f          LDRD     r1,r2,[r4,#0x3c]
0000fa  6820              LDR      r0,[r4,#0]
0000fc  fb010002          MLA      r0,r1,r2,r0
000100  6060              STR      r0,[r4,#4]
000102  2000              MOVS     r0,#0
000104  63a0              STR      r0,[r4,#0x38]
000106  6820              LDR      r0,[r4,#0]
000108  1e49              SUBS     r1,r1,#1
00010a  60a0              STR      r0,[r4,#8]
00010c  fb010002          MLA      r0,r1,r2,r0
000110  60e0              STR      r0,[r4,#0xc]
000112  f04f30ff          MOV      r0,#0xffffffff
000116  6460              STR      r0,[r4,#0x44]
000118  64a0              STR      r0,[r4,#0x48]
00011a  f1040010          ADD      r0,r4,#0x10
00011e  f7fffffe          BL       vListInitialise
000122  f1040024          ADD      r0,r4,#0x24
000126  f7fffffe          BL       vListInitialise
00012a  f7fffffe          BL       vPortExitCritical
00012e  4620              MOV      r0,r4
000130  63a5              STR      r5,[r4,#0x38]         ;597
000132  e8bd81f0          POP      {r4-r8,pc}
;;;609    
                          ENDP

                  xQueueGenericSend PROC
;;;612    
;;;613    BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
000136  e92d43ff          PUSH     {r0-r9,lr}
;;;614    {
;;;615    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
00013a  2700              MOVS     r7,#0
00013c  b083              SUB      sp,sp,#0xc            ;614
00013e  461e              MOV      r6,r3                 ;614
000140  4688              MOV      r8,r1                 ;614
;;;616    TimeOut_t xTimeOut;
;;;617    Queue_t * const pxQueue = ( Queue_t * ) xQueue;
000142  4604              MOV      r4,r0
000144  46b9              MOV      r9,r7
000146  1e7d              SUBS     r5,r7,#1
                  |L1.328|
;;;618    
;;;619    	configASSERT( pxQueue );
;;;620    	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
;;;621    	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
;;;622    	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;623    	{
;;;624    		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
;;;625    	}
;;;626    	#endif
;;;627    
;;;628    
;;;629    	/* This function relaxes the coding standard somewhat to allow return
;;;630    	statements within the function itself.  This is done in the interest
;;;631    	of execution time efficiency. */
;;;632    	for( ;; )
;;;633    	{
;;;634    		taskENTER_CRITICAL();
000148  f7fffffe          BL       vPortEnterCritical
;;;635    		{
;;;636    			/* Is there room on the queue now?  The running task must be the
;;;637    			highest priority task wanting to access the queue.  If the head item
;;;638    			in the queue is to be overwritten then it does not matter if the
;;;639    			queue is full. */
;;;640    			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
00014c  6ba0              LDR      r0,[r4,#0x38]
00014e  6be1              LDR      r1,[r4,#0x3c]
000150  4288              CMP      r0,r1
000152  d307              BCC      |L1.356|
000154  2e02              CMP      r6,#2
000156  d005              BEQ      |L1.356|
;;;641    			{
;;;642    				traceQUEUE_SEND( pxQueue );
;;;643    				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
;;;644    
;;;645    				#if ( configUSE_QUEUE_SETS == 1 )
;;;646    				{
;;;647    					if( pxQueue->pxQueueSetContainer != NULL )
;;;648    					{
;;;649    						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
;;;650    						{
;;;651    							/* The queue is a member of a queue set, and posting
;;;652    							to the queue set caused a higher priority task to
;;;653    							unblock. A context switch is required. */
;;;654    							queueYIELD_IF_USING_PREEMPTION();
;;;655    						}
;;;656    						else
;;;657    						{
;;;658    							mtCOVERAGE_TEST_MARKER();
;;;659    						}
;;;660    					}
;;;661    					else
;;;662    					{
;;;663    						/* If there was a task waiting for data to arrive on the
;;;664    						queue then unblock it now. */
;;;665    						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;666    						{
;;;667    							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
;;;668    							{
;;;669    								/* The unblocked task has a priority higher than
;;;670    								our own so yield immediately.  Yes it is ok to
;;;671    								do this from within the critical section - the
;;;672    								kernel takes care of that. */
;;;673    								queueYIELD_IF_USING_PREEMPTION();
;;;674    							}
;;;675    							else
;;;676    							{
;;;677    								mtCOVERAGE_TEST_MARKER();
;;;678    							}
;;;679    						}
;;;680    						else if( xYieldRequired != pdFALSE )
;;;681    						{
;;;682    							/* This path is a special case that will only get
;;;683    							executed if the task was holding multiple mutexes
;;;684    							and the mutexes were given back in an order that is
;;;685    							different to that in which they were taken. */
;;;686    							queueYIELD_IF_USING_PREEMPTION();
;;;687    						}
;;;688    						else
;;;689    						{
;;;690    							mtCOVERAGE_TEST_MARKER();
;;;691    						}
;;;692    					}
;;;693    				}
;;;694    				#else /* configUSE_QUEUE_SETS */
;;;695    				{
;;;696    					/* If there was a task waiting for data to arrive on the
;;;697    					queue then unblock it now. */
;;;698    					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;699    					{
;;;700    						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
;;;701    						{
;;;702    							/* The unblocked task has a priority higher than
;;;703    							our own so yield immediately.  Yes it is ok to do
;;;704    							this from within the critical section - the kernel
;;;705    							takes care of that. */
;;;706    							queueYIELD_IF_USING_PREEMPTION();
;;;707    						}
;;;708    						else
;;;709    						{
;;;710    							mtCOVERAGE_TEST_MARKER();
;;;711    						}
;;;712    					}
;;;713    					else if( xYieldRequired != pdFALSE )
;;;714    					{
;;;715    						/* This path is a special case that will only get
;;;716    						executed if the task was holding multiple mutexes and
;;;717    						the mutexes were given back in an order that is
;;;718    						different to that in which they were taken. */
;;;719    						queueYIELD_IF_USING_PREEMPTION();
;;;720    					}
;;;721    					else
;;;722    					{
;;;723    						mtCOVERAGE_TEST_MARKER();
;;;724    					}
;;;725    				}
;;;726    				#endif /* configUSE_QUEUE_SETS */
;;;727    
;;;728    				taskEXIT_CRITICAL();
;;;729    				return pdPASS;
;;;730    			}
;;;731    			else
;;;732    			{
;;;733    				if( xTicksToWait == ( TickType_t ) 0 )
000158  9805              LDR      r0,[sp,#0x14]
00015a  2800              CMP      r0,#0
00015c  d03b              BEQ      |L1.470|
;;;734    				{
;;;735    					/* The queue was full and no block time is specified (or
;;;736    					the block time has expired) so leave now. */
;;;737    					taskEXIT_CRITICAL();
;;;738    
;;;739    					/* Return to the original privilege level before exiting
;;;740    					the function. */
;;;741    					traceQUEUE_SEND_FAILED( pxQueue );
;;;742    					return errQUEUE_FULL;
;;;743    				}
;;;744    				else if( xEntryTimeSet == pdFALSE )
00015e  2f00              CMP      r7,#0
000160  d03c              BEQ      |L1.476|
000162  e03f              B        |L1.484|
                  |L1.356|
000164  6c22              LDR      r2,[r4,#0x40]         ;643
000166  4641              MOV      r1,r8                 ;643
000168  b312              CBZ      r2,|L1.432|
00016a  b17e              CBZ      r6,|L1.396|
00016c  68e0              LDR      r0,[r4,#0xc]          ;643
00016e  f7fffffe          BL       __aeabi_memcpy
000172  68e1              LDR      r1,[r4,#0xc]          ;643
000174  6c20              LDR      r0,[r4,#0x40]         ;643
000176  1a09              SUBS     r1,r1,r0              ;643
000178  60e1              STR      r1,[r4,#0xc]          ;643
00017a  6822              LDR      r2,[r4,#0]            ;643
00017c  4291              CMP      r1,r2                 ;643
00017e  d202              BCS      |L1.390|
000180  6861              LDR      r1,[r4,#4]            ;643
000182  1a08              SUBS     r0,r1,r0              ;643
000184  60e0              STR      r0,[r4,#0xc]          ;643
                  |L1.390|
000186  2e02              CMP      r6,#2                 ;643
000188  d112              BNE      |L1.432|
00018a  e00c              B        |L1.422|
                  |L1.396|
00018c  68a0              LDR      r0,[r4,#8]            ;643
00018e  f7fffffe          BL       __aeabi_memcpy
000192  6c21              LDR      r1,[r4,#0x40]         ;643
000194  68a0              LDR      r0,[r4,#8]            ;643
000196  4408              ADD      r0,r0,r1              ;643
000198  60a0              STR      r0,[r4,#8]            ;643
00019a  6861              LDR      r1,[r4,#4]            ;643
00019c  4288              CMP      r0,r1                 ;643
00019e  bf24              ITT      CS                    ;643
0001a0  6820              LDRCS    r0,[r4,#0]            ;643
0001a2  60a0              STRCS    r0,[r4,#8]            ;643
0001a4  e004              B        |L1.432|
                  |L1.422|
0001a6  6ba0              LDR      r0,[r4,#0x38]         ;643
0001a8  b110              CBZ      r0,|L1.432|
0001aa  6ba0              LDR      r0,[r4,#0x38]         ;643
0001ac  1e40              SUBS     r0,r0,#1              ;643
0001ae  63a0              STR      r0,[r4,#0x38]         ;643
                  |L1.432|
0001b0  6ba0              LDR      r0,[r4,#0x38]         ;643
0001b2  1c40              ADDS     r0,r0,#1              ;643
0001b4  63a0              STR      r0,[r4,#0x38]         ;643
0001b6  6a60              LDR      r0,[r4,#0x24]         ;698
0001b8  b138              CBZ      r0,|L1.458|
0001ba  f1040024          ADD      r0,r4,#0x24           ;700
0001be  f7fffffe          BL       xTaskRemoveFromEventList
0001c2  2801              CMP      r0,#1                 ;700
0001c4  bf08              IT       EQ                    ;706
0001c6  f7fffffe          BLEQ     vPortYield
                  |L1.458|
0001ca  f7fffffe          BL       vPortExitCritical
;;;745    				{
;;;746    					/* The queue was full and a block time was specified so
;;;747    					configure the timeout structure. */
;;;748    					vTaskSetTimeOutState( &xTimeOut );
;;;749    					xEntryTimeSet = pdTRUE;
;;;750    				}
;;;751    				else
;;;752    				{
;;;753    					/* Entry time was already set. */
;;;754    					mtCOVERAGE_TEST_MARKER();
;;;755    				}
;;;756    			}
;;;757    		}
;;;758    		taskEXIT_CRITICAL();
;;;759    
;;;760    		/* Interrupts and other tasks can send to and receive from the queue
;;;761    		now the critical section has been exited. */
;;;762    
;;;763    		vTaskSuspendAll();
;;;764    		prvLockQueue( pxQueue );
;;;765    
;;;766    		/* Update the timeout state to see if it has expired yet. */
;;;767    		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
;;;768    		{
;;;769    			if( prvIsQueueFull( pxQueue ) != pdFALSE )
;;;770    			{
;;;771    				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
;;;772    				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
;;;773    
;;;774    				/* Unlocking the queue means queue events can effect the
;;;775    				event list.  It is possible	that interrupts occurring now
;;;776    				remove this task from the event	list again - but as the
;;;777    				scheduler is suspended the task will go onto the pending
;;;778    				ready last instead of the actual ready list. */
;;;779    				prvUnlockQueue( pxQueue );
;;;780    
;;;781    				/* Resuming the scheduler will move tasks from the pending
;;;782    				ready list into the ready list - so it is feasible that this
;;;783    				task is already in a ready list before it yields - in which
;;;784    				case the yield will not cause a context switch unless there
;;;785    				is also a higher priority task in the pending ready list. */
;;;786    				if( xTaskResumeAll() == pdFALSE )
;;;787    				{
;;;788    					portYIELD_WITHIN_API();
;;;789    				}
;;;790    			}
;;;791    			else
;;;792    			{
;;;793    				/* Try again. */
;;;794    				prvUnlockQueue( pxQueue );
;;;795    				( void ) xTaskResumeAll();
;;;796    			}
;;;797    		}
;;;798    		else
;;;799    		{
;;;800    			/* The timeout has expired. */
;;;801    			prvUnlockQueue( pxQueue );
;;;802    			( void ) xTaskResumeAll();
;;;803    
;;;804    			/* Return to the original privilege level before exiting the
;;;805    			function. */
;;;806    			traceQUEUE_SEND_FAILED( pxQueue );
;;;807    			return errQUEUE_FULL;
;;;808    		}
;;;809    	}
;;;810    }
0001ce  b007              ADD      sp,sp,#0x1c
0001d0  2001              MOVS     r0,#1                 ;729
0001d2  e8bd83f0          POP      {r4-r9,pc}
                  |L1.470|
0001d6  f7fffffe          BL       vPortExitCritical
0001da  e04e              B        |L1.634|
                  |L1.476|
0001dc  4668              MOV      r0,sp                 ;748
0001de  f7fffffe          BL       vTaskSetTimeOutState
0001e2  2701              MOVS     r7,#1                 ;749
                  |L1.484|
0001e4  f7fffffe          BL       vPortExitCritical
0001e8  f7fffffe          BL       vTaskSuspendAll
0001ec  f7fffffe          BL       vPortEnterCritical
0001f0  6c60              LDR      r0,[r4,#0x44]         ;764
0001f2  f1b03fff          CMP      r0,#0xffffffff        ;764
0001f6  bf08              IT       EQ                    ;764
0001f8  f8c49044          STREQ    r9,[r4,#0x44]         ;764
0001fc  6ca0              LDR      r0,[r4,#0x48]         ;764
0001fe  f1b03fff          CMP      r0,#0xffffffff        ;764
000202  bf08              IT       EQ                    ;764
000204  f8c49048          STREQ    r9,[r4,#0x48]         ;764
000208  f7fffffe          BL       vPortExitCritical
00020c  a905              ADD      r1,sp,#0x14           ;767
00020e  4668              MOV      r0,sp                 ;767
000210  f7fffffe          BL       xTaskCheckForTimeOut
000214  b3a8              CBZ      r0,|L1.642|
000216  f7fffffe          BL       vPortEnterCritical
00021a  6ca0              LDR      r0,[r4,#0x48]         ;767
00021c  2800              CMP      r0,#0                 ;767
00021e  dd0f              BLE      |L1.576|
                  |L1.544|
000220  6a60              LDR      r0,[r4,#0x24]         ;767
000222  b168              CBZ      r0,|L1.576|
000224  f1040024          ADD      r0,r4,#0x24           ;767
000228  f7fffffe          BL       xTaskRemoveFromEventList
00022c  2800              CMP      r0,#0                 ;767
00022e  bf18              IT       NE                    ;767
000230  f7fffffe          BLNE     vTaskMissedYield
000234  6ca0              LDR      r0,[r4,#0x48]         ;767
000236  1e40              SUBS     r0,r0,#1              ;767
000238  64a0              STR      r0,[r4,#0x48]         ;767
00023a  6ca0              LDR      r0,[r4,#0x48]         ;767
00023c  2800              CMP      r0,#0                 ;767
00023e  dcef              BGT      |L1.544|
                  |L1.576|
000240  64a5              STR      r5,[r4,#0x48]         ;767
000242  f7fffffe          BL       vPortExitCritical
000246  f7fffffe          BL       vPortEnterCritical
00024a  6c60              LDR      r0,[r4,#0x44]         ;767
00024c  2800              CMP      r0,#0                 ;767
00024e  dd0f              BLE      |L1.624|
                  |L1.592|
000250  6920              LDR      r0,[r4,#0x10]         ;767
000252  b168              CBZ      r0,|L1.624|
000254  f1040010          ADD      r0,r4,#0x10           ;767
000258  f7fffffe          BL       xTaskRemoveFromEventList
00025c  2800              CMP      r0,#0                 ;767
00025e  bf18              IT       NE                    ;767
000260  f7fffffe          BLNE     vTaskMissedYield
000264  6c60              LDR      r0,[r4,#0x44]         ;767
000266  1e40              SUBS     r0,r0,#1              ;767
000268  6460              STR      r0,[r4,#0x44]         ;767
00026a  6c60              LDR      r0,[r4,#0x44]         ;767
00026c  2800              CMP      r0,#0                 ;767
00026e  dcef              BGT      |L1.592|
                  |L1.624|
000270  6465              STR      r5,[r4,#0x44]         ;767
000272  f7fffffe          BL       vPortExitCritical
000276  f7fffffe          BL       xTaskResumeAll
                  |L1.634|
00027a  b007              ADD      sp,sp,#0x1c
00027c  2000              MOVS     r0,#0                 ;807
00027e  e8bd83f0          POP      {r4-r9,pc}
                  |L1.642|
000282  e7ff              B        |L1.644|
                  |L1.644|
000284  f7fffffe          BL       vPortEnterCritical
000288  6ba0              LDR      r0,[r4,#0x38]
00028a  6be1              LDR      r1,[r4,#0x3c]
00028c  4288              CMP      r0,r1
00028e  d10c              BNE      |L1.682|
000290  f7fffffe          BL       vPortExitCritical
000294  f1040010          ADD      r0,r4,#0x10           ;772
000298  9905              LDR      r1,[sp,#0x14]         ;772
00029a  f7fffffe          BL       vTaskPlaceOnEventList
00029e  f7fffffe          BL       vPortEnterCritical
0002a2  6ca0              LDR      r0,[r4,#0x48]         ;772
0002a4  2800              CMP      r0,#0                 ;772
0002a6  dd18              BLE      |L1.730|
0002a8  e007              B        |L1.698|
                  |L1.682|
0002aa  f7fffffe          BL       vPortExitCritical
0002ae  f7fffffe          BL       vPortEnterCritical
0002b2  6ca0              LDR      r0,[r4,#0x48]         ;772
0002b4  2800              CMP      r0,#0                 ;772
0002b6  dd42              BLE      |L1.830|
0002b8  e031              B        |L1.798|
                  |L1.698|
0002ba  6a60              LDR      r0,[r4,#0x24]         ;772
0002bc  b168              CBZ      r0,|L1.730|
0002be  f1040024          ADD      r0,r4,#0x24           ;772
0002c2  f7fffffe          BL       xTaskRemoveFromEventList
0002c6  2800              CMP      r0,#0                 ;772
0002c8  bf18              IT       NE                    ;772
0002ca  f7fffffe          BLNE     vTaskMissedYield
0002ce  6ca0              LDR      r0,[r4,#0x48]         ;772
0002d0  1e41              SUBS     r1,r0,#1              ;772
0002d2  64a1              STR      r1,[r4,#0x48]         ;772
0002d4  6ca0              LDR      r0,[r4,#0x48]         ;772
0002d6  2800              CMP      r0,#0                 ;772
0002d8  dcef              BGT      |L1.698|
                  |L1.730|
0002da  64a5              STR      r5,[r4,#0x48]         ;772
0002dc  f7fffffe          BL       vPortExitCritical
0002e0  f7fffffe          BL       vPortEnterCritical
0002e4  6c60              LDR      r0,[r4,#0x44]         ;772
0002e6  2800              CMP      r0,#0                 ;772
0002e8  dd0f              BLE      |L1.778|
                  |L1.746|
0002ea  6920              LDR      r0,[r4,#0x10]         ;772
0002ec  b168              CBZ      r0,|L1.778|
0002ee  f1040010          ADD      r0,r4,#0x10           ;772
0002f2  f7fffffe          BL       xTaskRemoveFromEventList
0002f6  2800              CMP      r0,#0                 ;772
0002f8  bf18              IT       NE                    ;772
0002fa  f7fffffe          BLNE     vTaskMissedYield
0002fe  6c60              LDR      r0,[r4,#0x44]         ;772
000300  1e41              SUBS     r1,r0,#1              ;772
000302  6461              STR      r1,[r4,#0x44]         ;772
000304  6c60              LDR      r0,[r4,#0x44]         ;772
000306  2800              CMP      r0,#0                 ;772
000308  dcef              BGT      |L1.746|
                  |L1.778|
00030a  6465              STR      r5,[r4,#0x44]         ;772
00030c  f7fffffe          BL       vPortExitCritical
000310  f7fffffe          BL       xTaskResumeAll
000314  2800              CMP      r0,#0                 ;786
000316  bf08              IT       EQ                    ;788
000318  f7fffffe          BLEQ     vPortYield
00031c  e714              B        |L1.328|
                  |L1.798|
00031e  6a60              LDR      r0,[r4,#0x24]         ;786
000320  b168              CBZ      r0,|L1.830|
000322  f1040024          ADD      r0,r4,#0x24           ;786
000326  f7fffffe          BL       xTaskRemoveFromEventList
00032a  2800              CMP      r0,#0                 ;786
00032c  bf18              IT       NE                    ;786
00032e  f7fffffe          BLNE     vTaskMissedYield
000332  6ca0              LDR      r0,[r4,#0x48]         ;786
000334  1e41              SUBS     r1,r0,#1              ;786
000336  64a1              STR      r1,[r4,#0x48]         ;786
000338  6ca0              LDR      r0,[r4,#0x48]         ;786
00033a  2800              CMP      r0,#0                 ;786
00033c  dcef              BGT      |L1.798|
                  |L1.830|
00033e  64a5              STR      r5,[r4,#0x48]         ;786
000340  f7fffffe          BL       vPortExitCritical
000344  f7fffffe          BL       vPortEnterCritical
000348  6c60              LDR      r0,[r4,#0x44]         ;786
00034a  2800              CMP      r0,#0                 ;786
00034c  dd0f              BLE      |L1.878|
                  |L1.846|
00034e  6920              LDR      r0,[r4,#0x10]         ;786
000350  b168              CBZ      r0,|L1.878|
000352  f1040010          ADD      r0,r4,#0x10           ;786
000356  f7fffffe          BL       xTaskRemoveFromEventList
00035a  2800              CMP      r0,#0                 ;786
00035c  bf18              IT       NE                    ;786
00035e  f7fffffe          BLNE     vTaskMissedYield
000362  6c60              LDR      r0,[r4,#0x44]         ;786
000364  1e41              SUBS     r1,r0,#1              ;786
000366  6461              STR      r1,[r4,#0x44]         ;786
000368  6c60              LDR      r0,[r4,#0x44]         ;786
00036a  2800              CMP      r0,#0                 ;786
00036c  dcef              BGT      |L1.846|
                  |L1.878|
00036e  6465              STR      r5,[r4,#0x44]         ;786
000370  f7fffffe          BL       vPortExitCritical
000374  f7fffffe          BL       xTaskResumeAll
000378  e6e6              B        |L1.328|
;;;811    /*-----------------------------------------------------------*/
                          ENDP

                  xQueueGenericSendFromISR PROC
;;;1057   
;;;1058   BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
00037a  e92d41f0          PUSH     {r4-r8,lr}
;;;1059   {
00037e  461d              MOV      r5,r3
000380  4616              MOV      r6,r2
000382  460f              MOV      r7,r1
;;;1060   BaseType_t xReturn;
;;;1061   UBaseType_t uxSavedInterruptStatus;
;;;1062   Queue_t * const pxQueue = ( Queue_t * ) xQueue;
000384  4604              MOV      r4,r0
;;;1063   
;;;1064   	configASSERT( pxQueue );
;;;1065   	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
;;;1066   	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
;;;1067   
;;;1068   	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;1069   	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;1070   	above the maximum system call priority are kept permanently enabled, even
;;;1071   	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;1072   	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;1073   	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1074   	failure if a FreeRTOS API function is called from an interrupt that has been
;;;1075   	assigned a priority above the configured maximum system call priority.
;;;1076   	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;1077   	that have been assigned a priority at or (logically) below the maximum
;;;1078   	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;1079   	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;1080   	More information (albeit Cortex-M specific) is provided on the following
;;;1081   	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1082   	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;1083   
;;;1084   	/* Similar to xQueueGenericSend, except without blocking if there is no room
;;;1085   	in the queue.  Also don't directly wake a task that was blocked on a queue
;;;1086   	read, instead return a flag to say whether a context switch is required or
;;;1087   	not (i.e. has a task with a higher priority than us been woken by this
;;;1088   	post). */
;;;1089   	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
000386  f7fffffe          BL       ulPortSetInterruptMask
00038a  4680              MOV      r8,r0
;;;1090   	{
;;;1091   		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
00038c  6ba0              LDR      r0,[r4,#0x38]
00038e  6be1              LDR      r1,[r4,#0x3c]
000390  4288              CMP      r0,r1
000392  d309              BCC      |L1.936|
000394  2d02              CMP      r5,#2
;;;1092   		{
;;;1093   			traceQUEUE_SEND_FROM_ISR( pxQueue );
;;;1094   
;;;1095   			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
;;;1096   			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
;;;1097   			in a task disinheriting a priority and prvCopyDataToQueue() can be
;;;1098   			called here even though the disinherit function does not check if
;;;1099   			the scheduler is suspended before accessing the ready lists. */
;;;1100   			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
;;;1101   
;;;1102   			/* The event list is not altered if the queue is locked.  This will
;;;1103   			be done when the queue is unlocked later. */
;;;1104   			if( pxQueue->xTxLock == queueUNLOCKED )
;;;1105   			{
;;;1106   				#if ( configUSE_QUEUE_SETS == 1 )
;;;1107   				{
;;;1108   					if( pxQueue->pxQueueSetContainer != NULL )
;;;1109   					{
;;;1110   						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
;;;1111   						{
;;;1112   							/* The queue is a member of a queue set, and posting
;;;1113   							to the queue set caused a higher priority task to
;;;1114   							unblock.  A context switch is required. */
;;;1115   							if( pxHigherPriorityTaskWoken != NULL )
;;;1116   							{
;;;1117   								*pxHigherPriorityTaskWoken = pdTRUE;
;;;1118   							}
;;;1119   							else
;;;1120   							{
;;;1121   								mtCOVERAGE_TEST_MARKER();
;;;1122   							}
;;;1123   						}
;;;1124   						else
;;;1125   						{
;;;1126   							mtCOVERAGE_TEST_MARKER();
;;;1127   						}
;;;1128   					}
;;;1129   					else
;;;1130   					{
;;;1131   						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;1132   						{
;;;1133   							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
;;;1134   							{
;;;1135   								/* The task waiting has a higher priority so
;;;1136   								record that a context switch is required. */
;;;1137   								if( pxHigherPriorityTaskWoken != NULL )
;;;1138   								{
;;;1139   									*pxHigherPriorityTaskWoken = pdTRUE;
;;;1140   								}
;;;1141   								else
;;;1142   								{
;;;1143   									mtCOVERAGE_TEST_MARKER();
;;;1144   								}
;;;1145   							}
;;;1146   							else
;;;1147   							{
;;;1148   								mtCOVERAGE_TEST_MARKER();
;;;1149   							}
;;;1150   						}
;;;1151   						else
;;;1152   						{
;;;1153   							mtCOVERAGE_TEST_MARKER();
;;;1154   						}
;;;1155   					}
;;;1156   				}
;;;1157   				#else /* configUSE_QUEUE_SETS */
;;;1158   				{
;;;1159   					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;1160   					{
;;;1161   						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
;;;1162   						{
;;;1163   							/* The task waiting has a higher priority so record that a
;;;1164   							context	switch is required. */
;;;1165   							if( pxHigherPriorityTaskWoken != NULL )
;;;1166   							{
;;;1167   								*pxHigherPriorityTaskWoken = pdTRUE;
;;;1168   							}
;;;1169   							else
;;;1170   							{
;;;1171   								mtCOVERAGE_TEST_MARKER();
;;;1172   							}
;;;1173   						}
;;;1174   						else
;;;1175   						{
;;;1176   							mtCOVERAGE_TEST_MARKER();
;;;1177   						}
;;;1178   					}
;;;1179   					else
;;;1180   					{
;;;1181   						mtCOVERAGE_TEST_MARKER();
;;;1182   					}
;;;1183   				}
;;;1184   				#endif /* configUSE_QUEUE_SETS */
;;;1185   			}
;;;1186   			else
;;;1187   			{
;;;1188   				/* Increment the lock count so the task that unlocks the queue
;;;1189   				knows that data was posted while it was locked. */
;;;1190   				++( pxQueue->xTxLock );
;;;1191   			}
;;;1192   
;;;1193   			xReturn = pdPASS;
;;;1194   		}
;;;1195   		else
;;;1196   		{
;;;1197   			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
;;;1198   			xReturn = errQUEUE_FULL;
000396  bf18              IT       NE
000398  2400              MOVNE    r4,#0
00039a  d005              BEQ      |L1.936|
                  |L1.924|
;;;1199   		}
;;;1200   	}
;;;1201   	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
00039c  4640              MOV      r0,r8
00039e  f7fffffe          BL       vPortClearInterruptMask
;;;1202   
;;;1203   	return xReturn;
0003a2  4620              MOV      r0,r4
;;;1204   }
0003a4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.936|
0003a8  6c22              LDR      r2,[r4,#0x40]         ;1100
0003aa  4639              MOV      r1,r7                 ;1100
0003ac  b31a              CBZ      r2,|L1.1014|
0003ae  b185              CBZ      r5,|L1.978|
0003b0  68e0              LDR      r0,[r4,#0xc]          ;1100
0003b2  f7fffffe          BL       __aeabi_memcpy
0003b6  6c21              LDR      r1,[r4,#0x40]         ;1100
0003b8  68e0              LDR      r0,[r4,#0xc]          ;1100
0003ba  1a40              SUBS     r0,r0,r1              ;1100
0003bc  60e0              STR      r0,[r4,#0xc]          ;1100
0003be  6821              LDR      r1,[r4,#0]            ;1100
0003c0  4288              CMP      r0,r1                 ;1100
0003c2  d203              BCS      |L1.972|
0003c4  6c21              LDR      r1,[r4,#0x40]         ;1100
0003c6  6860              LDR      r0,[r4,#4]            ;1100
0003c8  1a40              SUBS     r0,r0,r1              ;1100
0003ca  60e0              STR      r0,[r4,#0xc]          ;1100
                  |L1.972|
0003cc  2d02              CMP      r5,#2                 ;1100
0003ce  d112              BNE      |L1.1014|
0003d0  e00c              B        |L1.1004|
                  |L1.978|
0003d2  68a0              LDR      r0,[r4,#8]            ;1100
0003d4  f7fffffe          BL       __aeabi_memcpy
0003d8  6c21              LDR      r1,[r4,#0x40]         ;1100
0003da  68a0              LDR      r0,[r4,#8]            ;1100
0003dc  4408              ADD      r0,r0,r1              ;1100
0003de  60a0              STR      r0,[r4,#8]            ;1100
0003e0  6861              LDR      r1,[r4,#4]            ;1100
0003e2  4288              CMP      r0,r1                 ;1100
0003e4  bf24              ITT      CS                    ;1100
0003e6  6820              LDRCS    r0,[r4,#0]            ;1100
0003e8  60a0              STRCS    r0,[r4,#8]            ;1100
0003ea  e004              B        |L1.1014|
                  |L1.1004|
0003ec  6ba0              LDR      r0,[r4,#0x38]         ;1100
0003ee  b110              CBZ      r0,|L1.1014|
0003f0  6ba0              LDR      r0,[r4,#0x38]         ;1100
0003f2  1e40              SUBS     r0,r0,#1              ;1100
0003f4  63a0              STR      r0,[r4,#0x38]         ;1100
                  |L1.1014|
0003f6  6ba0              LDR      r0,[r4,#0x38]         ;1100
0003f8  1c40              ADDS     r0,r0,#1              ;1100
0003fa  63a0              STR      r0,[r4,#0x38]         ;1100
0003fc  6ca0              LDR      r0,[r4,#0x48]         ;1104
0003fe  f1b03fff          CMP      r0,#0xffffffff        ;1104
000402  d004              BEQ      |L1.1038|
000404  6ca0              LDR      r0,[r4,#0x48]         ;1190
000406  1c40              ADDS     r0,r0,#1              ;1190
000408  64a0              STR      r0,[r4,#0x48]         ;1190
                  |L1.1034|
00040a  2401              MOVS     r4,#1                 ;1193
00040c  e7c6              B        |L1.924|
                  |L1.1038|
00040e  6a60              LDR      r0,[r4,#0x24]         ;1159
000410  2800              CMP      r0,#0                 ;1159
000412  d0fa              BEQ      |L1.1034|
000414  f1040024          ADD      r0,r4,#0x24           ;1161
000418  f7fffffe          BL       xTaskRemoveFromEventList
00041c  2800              CMP      r0,#0                 ;1161
00041e  bf1e              ITTT     NE                    ;1165
000420  2e00              CMPNE    r6,#0                 ;1165
000422  2001              MOVNE    r0,#1                 ;1167
000424  6030              STRNE    r0,[r6,#0]            ;1167
000426  e7f0              B        |L1.1034|
;;;1205   /*-----------------------------------------------------------*/
                          ENDP

                  xQueueGiveFromISR PROC
;;;1206   
;;;1207   BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
000428  b570              PUSH     {r4-r6,lr}
;;;1208   {
00042a  460d              MOV      r5,r1
;;;1209   BaseType_t xReturn;
;;;1210   UBaseType_t uxSavedInterruptStatus;
;;;1211   Queue_t * const pxQueue = ( Queue_t * ) xQueue;
00042c  4604              MOV      r4,r0
;;;1212   
;;;1213   	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
;;;1214   	item size is 0.  Don't directly wake a task that was blocked on a queue
;;;1215   	read, instead return a flag to say whether a context switch is required or
;;;1216   	not (i.e. has a task with a higher priority than us been woken by this
;;;1217   	post). */
;;;1218   
;;;1219   	configASSERT( pxQueue );
;;;1220   
;;;1221   	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
;;;1222   	if the item size is not 0. */
;;;1223   	configASSERT( pxQueue->uxItemSize == 0 );
;;;1224   
;;;1225   	/* Normally a mutex would not be given from an interrupt, and doing so is
;;;1226   	definitely wrong if there is a mutex holder as priority inheritance makes no
;;;1227   	sense for an interrupts, only tasks. */
;;;1228   	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
;;;1229   
;;;1230   	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;1231   	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;1232   	above the maximum system call priority are kept permanently enabled, even
;;;1233   	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;1234   	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;1235   	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1236   	failure if a FreeRTOS API function is called from an interrupt that has been
;;;1237   	assigned a priority above the configured maximum system call priority.
;;;1238   	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;1239   	that have been assigned a priority at or (logically) below the maximum
;;;1240   	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;1241   	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;1242   	More information (albeit Cortex-M specific) is provided on the following
;;;1243   	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1244   	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;1245   
;;;1246   	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
00042e  f7fffffe          BL       ulPortSetInterruptMask
000432  4606              MOV      r6,r0
;;;1247   	{
;;;1248   		/* When the queue is used to implement a semaphore no data is ever
;;;1249   		moved through the queue but it is still valid to see if the queue 'has
;;;1250   		space'. */
;;;1251   		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
000434  6ba0              LDR      r0,[r4,#0x38]
000436  6be1              LDR      r1,[r4,#0x3c]
000438  4288              CMP      r0,r1
;;;1252   		{
;;;1253   			traceQUEUE_SEND_FROM_ISR( pxQueue );
;;;1254   
;;;1255   			/* A task can only have an inherited priority if it is a mutex
;;;1256   			holder - and if there is a mutex holder then the mutex cannot be
;;;1257   			given from an ISR.  As this is the ISR version of the function it
;;;1258   			can be assumed there is no mutex holder and no need to determine if
;;;1259   			priority disinheritance is needed.  Simply increase the count of
;;;1260   			messages (semaphores) available. */
;;;1261   			++( pxQueue->uxMessagesWaiting );
;;;1262   
;;;1263   			/* The event list is not altered if the queue is locked.  This will
;;;1264   			be done when the queue is unlocked later. */
;;;1265   			if( pxQueue->xTxLock == queueUNLOCKED )
;;;1266   			{
;;;1267   				#if ( configUSE_QUEUE_SETS == 1 )
;;;1268   				{
;;;1269   					if( pxQueue->pxQueueSetContainer != NULL )
;;;1270   					{
;;;1271   						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
;;;1272   						{
;;;1273   							/* The semaphore is a member of a queue set, and
;;;1274   							posting	to the queue set caused a higher priority
;;;1275   							task to	unblock.  A context switch is required. */
;;;1276   							if( pxHigherPriorityTaskWoken != NULL )
;;;1277   							{
;;;1278   								*pxHigherPriorityTaskWoken = pdTRUE;
;;;1279   							}
;;;1280   							else
;;;1281   							{
;;;1282   								mtCOVERAGE_TEST_MARKER();
;;;1283   							}
;;;1284   						}
;;;1285   						else
;;;1286   						{
;;;1287   							mtCOVERAGE_TEST_MARKER();
;;;1288   						}
;;;1289   					}
;;;1290   					else
;;;1291   					{
;;;1292   						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;1293   						{
;;;1294   							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
;;;1295   							{
;;;1296   								/* The task waiting has a higher priority so
;;;1297   								record that a context switch is required. */
;;;1298   								if( pxHigherPriorityTaskWoken != NULL )
;;;1299   								{
;;;1300   									*pxHigherPriorityTaskWoken = pdTRUE;
;;;1301   								}
;;;1302   								else
;;;1303   								{
;;;1304   									mtCOVERAGE_TEST_MARKER();
;;;1305   								}
;;;1306   							}
;;;1307   							else
;;;1308   							{
;;;1309   								mtCOVERAGE_TEST_MARKER();
;;;1310   							}
;;;1311   						}
;;;1312   						else
;;;1313   						{
;;;1314   							mtCOVERAGE_TEST_MARKER();
;;;1315   						}
;;;1316   					}
;;;1317   				}
;;;1318   				#else /* configUSE_QUEUE_SETS */
;;;1319   				{
;;;1320   					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;1321   					{
;;;1322   						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
;;;1323   						{
;;;1324   							/* The task waiting has a higher priority so record that a
;;;1325   							context	switch is required. */
;;;1326   							if( pxHigherPriorityTaskWoken != NULL )
;;;1327   							{
;;;1328   								*pxHigherPriorityTaskWoken = pdTRUE;
;;;1329   							}
;;;1330   							else
;;;1331   							{
;;;1332   								mtCOVERAGE_TEST_MARKER();
;;;1333   							}
;;;1334   						}
;;;1335   						else
;;;1336   						{
;;;1337   							mtCOVERAGE_TEST_MARKER();
;;;1338   						}
;;;1339   					}
;;;1340   					else
;;;1341   					{
;;;1342   						mtCOVERAGE_TEST_MARKER();
;;;1343   					}
;;;1344   				}
;;;1345   				#endif /* configUSE_QUEUE_SETS */
;;;1346   			}
;;;1347   			else
;;;1348   			{
;;;1349   				/* Increment the lock count so the task that unlocks the queue
;;;1350   				knows that data was posted while it was locked. */
;;;1351   				++( pxQueue->xTxLock );
;;;1352   			}
;;;1353   
;;;1354   			xReturn = pdPASS;
;;;1355   		}
;;;1356   		else
;;;1357   		{
;;;1358   			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
;;;1359   			xReturn = errQUEUE_FULL;
00043a  bf28              IT       CS
00043c  2400              MOVCS    r4,#0
00043e  d20a              BCS      |L1.1110|
000440  6ba0              LDR      r0,[r4,#0x38]         ;1261
000442  1c40              ADDS     r0,r0,#1              ;1261
000444  63a0              STR      r0,[r4,#0x38]         ;1261
000446  6ca0              LDR      r0,[r4,#0x48]         ;1265
000448  f1b03fff          CMP      r0,#0xffffffff        ;1265
00044c  d008              BEQ      |L1.1120|
00044e  6ca0              LDR      r0,[r4,#0x48]         ;1351
000450  1c40              ADDS     r0,r0,#1              ;1351
000452  64a0              STR      r0,[r4,#0x48]         ;1351
                  |L1.1108|
000454  2401              MOVS     r4,#1                 ;1354
                  |L1.1110|
;;;1360   		}
;;;1361   	}
;;;1362   	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
000456  4630              MOV      r0,r6
000458  f7fffffe          BL       vPortClearInterruptMask
;;;1363   
;;;1364   	return xReturn;
00045c  4620              MOV      r0,r4
;;;1365   }
00045e  bd70              POP      {r4-r6,pc}
                  |L1.1120|
000460  6a60              LDR      r0,[r4,#0x24]         ;1320
000462  2800              CMP      r0,#0                 ;1320
000464  d0f6              BEQ      |L1.1108|
000466  f1040024          ADD      r0,r4,#0x24           ;1322
00046a  f7fffffe          BL       xTaskRemoveFromEventList
00046e  2800              CMP      r0,#0                 ;1322
000470  bf1e              ITTT     NE                    ;1326
000472  2d00              CMPNE    r5,#0                 ;1326
000474  2001              MOVNE    r0,#1                 ;1328
000476  6028              STRNE    r0,[r5,#0]            ;1328
000478  e7ec              B        |L1.1108|
;;;1366   /*-----------------------------------------------------------*/
                          ENDP

                  xQueueGenericReceive PROC
;;;1367   
;;;1368   BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
00047a  e92d43ff          PUSH     {r0-r9,lr}
;;;1369   {
;;;1370   BaseType_t xEntryTimeSet = pdFALSE;
00047e  2700              MOVS     r7,#0
000480  b083              SUB      sp,sp,#0xc            ;1369
000482  4699              MOV      r9,r3                 ;1369
000484  460e              MOV      r6,r1                 ;1369
;;;1371   TimeOut_t xTimeOut;
;;;1372   int8_t *pcOriginalReadPosition;
;;;1373   Queue_t * const pxQueue = ( Queue_t * ) xQueue;
000486  4604              MOV      r4,r0
000488  46b8              MOV      r8,r7
00048a  1e7d              SUBS     r5,r7,#1
                  |L1.1164|
;;;1374   
;;;1375   	configASSERT( pxQueue );
;;;1376   	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
;;;1377   	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;1378   	{
;;;1379   		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
;;;1380   	}
;;;1381   	#endif
;;;1382   
;;;1383   	/* This function relaxes the coding standard somewhat to allow return
;;;1384   	statements within the function itself.  This is done in the interest
;;;1385   	of execution time efficiency. */
;;;1386   
;;;1387   	for( ;; )
;;;1388   	{
;;;1389   		taskENTER_CRITICAL();
00048c  f7fffffe          BL       vPortEnterCritical
;;;1390   		{
;;;1391   			/* Is there data in the queue now?  To be running the calling task
;;;1392   			must be	the highest priority task wanting to access the queue. */
;;;1393   			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
000490  6ba0              LDR      r0,[r4,#0x38]
000492  2800              CMP      r0,#0
000494  d02d              BEQ      |L1.1266|
000496  68e5              LDR      r5,[r4,#0xc]
000498  6c22              LDR      r2,[r4,#0x40]
00049a  b152              CBZ      r2,|L1.1202|
00049c  18a8              ADDS     r0,r5,r2
00049e  60e0              STR      r0,[r4,#0xc]
0004a0  6861              LDR      r1,[r4,#4]
0004a2  4288              CMP      r0,r1
0004a4  bf24              ITT      CS
0004a6  6820              LDRCS    r0,[r4,#0]
0004a8  60e0              STRCS    r0,[r4,#0xc]
0004aa  4601              MOV      r1,r0
0004ac  4630              MOV      r0,r6
0004ae  f7fffffe          BL       __aeabi_memcpy
                  |L1.1202|
;;;1394   			{
;;;1395   				/* Remember the read position in case the queue is only being
;;;1396   				peeked. */
;;;1397   				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
;;;1398   
;;;1399   				prvCopyDataFromQueue( pxQueue, pvBuffer );
;;;1400   
;;;1401   				if( xJustPeeking == pdFALSE )
0004b2  f1b90f00          CMP      r9,#0
0004b6  d00f              BEQ      |L1.1240|
;;;1402   				{
;;;1403   					traceQUEUE_RECEIVE( pxQueue );
;;;1404   
;;;1405   					/* Actually removing data, not just peeking. */
;;;1406   					--( pxQueue->uxMessagesWaiting );
;;;1407   
;;;1408   					#if ( configUSE_MUTEXES == 1 )
;;;1409   					{
;;;1410   						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
;;;1411   						{
;;;1412   							/* Record the information required to implement
;;;1413   							priority inheritance should it become necessary. */
;;;1414   							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
;;;1415   						}
;;;1416   						else
;;;1417   						{
;;;1418   							mtCOVERAGE_TEST_MARKER();
;;;1419   						}
;;;1420   					}
;;;1421   					#endif /* configUSE_MUTEXES */
;;;1422   
;;;1423   					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
;;;1424   					{
;;;1425   						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
;;;1426   						{
;;;1427   							queueYIELD_IF_USING_PREEMPTION();
;;;1428   						}
;;;1429   						else
;;;1430   						{
;;;1431   							mtCOVERAGE_TEST_MARKER();
;;;1432   						}
;;;1433   					}
;;;1434   					else
;;;1435   					{
;;;1436   						mtCOVERAGE_TEST_MARKER();
;;;1437   					}
;;;1438   				}
;;;1439   				else
;;;1440   				{
;;;1441   					traceQUEUE_PEEK( pxQueue );
;;;1442   
;;;1443   					/* The data is not being removed, so reset the read
;;;1444   					pointer. */
;;;1445   					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
;;;1446   
;;;1447   					/* The data is being left in the queue, so see if there are
;;;1448   					any other tasks waiting for the data. */
;;;1449   					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
0004b8  60e5              STR      r5,[r4,#0xc]
0004ba  6a60              LDR      r0,[r4,#0x24]
0004bc  b130              CBZ      r0,|L1.1228|
;;;1450   					{
;;;1451   						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
0004be  f1040024          ADD      r0,r4,#0x24
0004c2  f7fffffe          BL       xTaskRemoveFromEventList
0004c6  b108              CBZ      r0,|L1.1228|
                  |L1.1224|
;;;1452   						{
;;;1453   							/* The task waiting has a higher priority than this task. */
;;;1454   							queueYIELD_IF_USING_PREEMPTION();
0004c8  f7fffffe          BL       vPortYield
                  |L1.1228|
;;;1455   						}
;;;1456   						else
;;;1457   						{
;;;1458   							mtCOVERAGE_TEST_MARKER();
;;;1459   						}
;;;1460   					}
;;;1461   					else
;;;1462   					{
;;;1463   						mtCOVERAGE_TEST_MARKER();
;;;1464   					}
;;;1465   				}
;;;1466   
;;;1467   				taskEXIT_CRITICAL();
0004cc  f7fffffe          BL       vPortExitCritical
;;;1468   				return pdPASS;
;;;1469   			}
;;;1470   			else
;;;1471   			{
;;;1472   				if( xTicksToWait == ( TickType_t ) 0 )
;;;1473   				{
;;;1474   					/* The queue was empty and no block time is specified (or
;;;1475   					the block time has expired) so leave now. */
;;;1476   					taskEXIT_CRITICAL();
;;;1477   					traceQUEUE_RECEIVE_FAILED( pxQueue );
;;;1478   					return errQUEUE_EMPTY;
;;;1479   				}
;;;1480   				else if( xEntryTimeSet == pdFALSE )
;;;1481   				{
;;;1482   					/* The queue was empty and a block time was specified so
;;;1483   					configure the timeout structure. */
;;;1484   					vTaskSetTimeOutState( &xTimeOut );
;;;1485   					xEntryTimeSet = pdTRUE;
;;;1486   				}
;;;1487   				else
;;;1488   				{
;;;1489   					/* Entry time was already set. */
;;;1490   					mtCOVERAGE_TEST_MARKER();
;;;1491   				}
;;;1492   			}
;;;1493   		}
;;;1494   		taskEXIT_CRITICAL();
;;;1495   
;;;1496   		/* Interrupts and other tasks can send to and receive from the queue
;;;1497   		now the critical section has been exited. */
;;;1498   
;;;1499   		vTaskSuspendAll();
;;;1500   		prvLockQueue( pxQueue );
;;;1501   
;;;1502   		/* Update the timeout state to see if it has expired yet. */
;;;1503   		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
;;;1504   		{
;;;1505   			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
;;;1506   			{
;;;1507   				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
;;;1508   
;;;1509   				#if ( configUSE_MUTEXES == 1 )
;;;1510   				{
;;;1511   					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
;;;1512   					{
;;;1513   						taskENTER_CRITICAL();
;;;1514   						{
;;;1515   							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
;;;1516   						}
;;;1517   						taskEXIT_CRITICAL();
;;;1518   					}
;;;1519   					else
;;;1520   					{
;;;1521   						mtCOVERAGE_TEST_MARKER();
;;;1522   					}
;;;1523   				}
;;;1524   				#endif
;;;1525   
;;;1526   				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
;;;1527   				prvUnlockQueue( pxQueue );
;;;1528   				if( xTaskResumeAll() == pdFALSE )
;;;1529   				{
;;;1530   					portYIELD_WITHIN_API();
;;;1531   				}
;;;1532   				else
;;;1533   				{
;;;1534   					mtCOVERAGE_TEST_MARKER();
;;;1535   				}
;;;1536   			}
;;;1537   			else
;;;1538   			{
;;;1539   				/* Try again. */
;;;1540   				prvUnlockQueue( pxQueue );
;;;1541   				( void ) xTaskResumeAll();
;;;1542   			}
;;;1543   		}
;;;1544   		else
;;;1545   		{
;;;1546   			prvUnlockQueue( pxQueue );
;;;1547   			( void ) xTaskResumeAll();
;;;1548   			traceQUEUE_RECEIVE_FAILED( pxQueue );
;;;1549   			return errQUEUE_EMPTY;
;;;1550   		}
;;;1551   	}
;;;1552   }
0004d0  b007              ADD      sp,sp,#0x1c
0004d2  2001              MOVS     r0,#1                 ;1468
0004d4  e8bd83f0          POP      {r4-r9,pc}
                  |L1.1240|
0004d8  6ba0              LDR      r0,[r4,#0x38]         ;1406
0004da  1e40              SUBS     r0,r0,#1              ;1406
0004dc  63a0              STR      r0,[r4,#0x38]         ;1406
0004de  6920              LDR      r0,[r4,#0x10]         ;1423
0004e0  2800              CMP      r0,#0                 ;1423
0004e2  d0f3              BEQ      |L1.1228|
0004e4  f1040010          ADD      r0,r4,#0x10           ;1425
0004e8  f7fffffe          BL       xTaskRemoveFromEventList
0004ec  2801              CMP      r0,#1                 ;1425
0004ee  d0eb              BEQ      |L1.1224|
0004f0  e7ec              B        |L1.1228|
                  |L1.1266|
0004f2  9805              LDR      r0,[sp,#0x14]         ;1472
0004f4  b108              CBZ      r0,|L1.1274|
0004f6  b11f              CBZ      r7,|L1.1280|
0004f8  e006              B        |L1.1288|
                  |L1.1274|
0004fa  f7fffffe          BL       vPortExitCritical
0004fe  e04e              B        |L1.1438|
                  |L1.1280|
000500  4668              MOV      r0,sp                 ;1484
000502  f7fffffe          BL       vTaskSetTimeOutState
000506  2701              MOVS     r7,#1                 ;1485
                  |L1.1288|
000508  f7fffffe          BL       vPortExitCritical
00050c  f7fffffe          BL       vTaskSuspendAll
000510  f7fffffe          BL       vPortEnterCritical
000514  6c60              LDR      r0,[r4,#0x44]         ;1500
000516  f1b03fff          CMP      r0,#0xffffffff        ;1500
00051a  bf08              IT       EQ                    ;1500
00051c  f8c48044          STREQ    r8,[r4,#0x44]         ;1500
000520  6ca0              LDR      r0,[r4,#0x48]         ;1500
000522  f1b03fff          CMP      r0,#0xffffffff        ;1500
000526  bf08              IT       EQ                    ;1500
000528  f8c48048          STREQ    r8,[r4,#0x48]         ;1500
00052c  f7fffffe          BL       vPortExitCritical
000530  a905              ADD      r1,sp,#0x14           ;1503
000532  4668              MOV      r0,sp                 ;1503
000534  f7fffffe          BL       xTaskCheckForTimeOut
000538  b3a8              CBZ      r0,|L1.1446|
00053a  f7fffffe          BL       vPortEnterCritical
00053e  6ca0              LDR      r0,[r4,#0x48]         ;1503
000540  2800              CMP      r0,#0                 ;1503
000542  dd0f              BLE      |L1.1380|
                  |L1.1348|
000544  6a60              LDR      r0,[r4,#0x24]         ;1503
000546  b168              CBZ      r0,|L1.1380|
000548  f1040024          ADD      r0,r4,#0x24           ;1503
00054c  f7fffffe          BL       xTaskRemoveFromEventList
000550  2800              CMP      r0,#0                 ;1503
000552  bf18              IT       NE                    ;1503
000554  f7fffffe          BLNE     vTaskMissedYield
000558  6ca0              LDR      r0,[r4,#0x48]         ;1503
00055a  1e40              SUBS     r0,r0,#1              ;1503
00055c  64a0              STR      r0,[r4,#0x48]         ;1503
00055e  6ca0              LDR      r0,[r4,#0x48]         ;1503
000560  2800              CMP      r0,#0                 ;1503
000562  dcef              BGT      |L1.1348|
                  |L1.1380|
000564  64a5              STR      r5,[r4,#0x48]         ;1503
000566  f7fffffe          BL       vPortExitCritical
00056a  f7fffffe          BL       vPortEnterCritical
00056e  6c60              LDR      r0,[r4,#0x44]         ;1503
000570  2800              CMP      r0,#0                 ;1503
000572  dd0f              BLE      |L1.1428|
                  |L1.1396|
000574  6920              LDR      r0,[r4,#0x10]         ;1503
000576  b168              CBZ      r0,|L1.1428|
000578  f1040010          ADD      r0,r4,#0x10           ;1503
00057c  f7fffffe          BL       xTaskRemoveFromEventList
000580  2800              CMP      r0,#0                 ;1503
000582  bf18              IT       NE                    ;1503
000584  f7fffffe          BLNE     vTaskMissedYield
000588  6c60              LDR      r0,[r4,#0x44]         ;1503
00058a  1e40              SUBS     r0,r0,#1              ;1503
00058c  6460              STR      r0,[r4,#0x44]         ;1503
00058e  6c60              LDR      r0,[r4,#0x44]         ;1503
000590  2800              CMP      r0,#0                 ;1503
000592  dcef              BGT      |L1.1396|
                  |L1.1428|
000594  6465              STR      r5,[r4,#0x44]         ;1503
000596  f7fffffe          BL       vPortExitCritical
00059a  f7fffffe          BL       xTaskResumeAll
                  |L1.1438|
00059e  b007              ADD      sp,sp,#0x1c
0005a0  2000              MOVS     r0,#0                 ;1549
0005a2  e8bd83f0          POP      {r4-r9,pc}
                  |L1.1446|
0005a6  e7ff              B        |L1.1448|
                  |L1.1448|
0005a8  f7fffffe          BL       vPortEnterCritical
0005ac  6ba0              LDR      r0,[r4,#0x38]
0005ae  b138              CBZ      r0,|L1.1472|
0005b0  f7fffffe          BL       vPortExitCritical
0005b4  f7fffffe          BL       vPortEnterCritical
0005b8  6ca0              LDR      r0,[r4,#0x48]
0005ba  2800              CMP      r0,#0
0005bc  dd4e              BLE      |L1.1628|
0005be  e03d              B        |L1.1596|
                  |L1.1472|
0005c0  f7fffffe          BL       vPortExitCritical
0005c4  f1040024          ADD      r0,r4,#0x24           ;1526
0005c8  9905              LDR      r1,[sp,#0x14]         ;1526
0005ca  f7fffffe          BL       vTaskPlaceOnEventList
0005ce  f7fffffe          BL       vPortEnterCritical
0005d2  6ca0              LDR      r0,[r4,#0x48]         ;1526
0005d4  2800              CMP      r0,#0                 ;1526
0005d6  dd0f              BLE      |L1.1528|
                  |L1.1496|
0005d8  6a60              LDR      r0,[r4,#0x24]         ;1526
0005da  b168              CBZ      r0,|L1.1528|
0005dc  f1040024          ADD      r0,r4,#0x24           ;1526
0005e0  f7fffffe          BL       xTaskRemoveFromEventList
0005e4  2800              CMP      r0,#0                 ;1526
0005e6  bf18              IT       NE                    ;1526
0005e8  f7fffffe          BLNE     vTaskMissedYield
0005ec  6ca0              LDR      r0,[r4,#0x48]         ;1526
0005ee  1e41              SUBS     r1,r0,#1              ;1526
0005f0  64a1              STR      r1,[r4,#0x48]         ;1526
0005f2  6ca0              LDR      r0,[r4,#0x48]         ;1526
0005f4  2800              CMP      r0,#0                 ;1526
0005f6  dcef              BGT      |L1.1496|
                  |L1.1528|
0005f8  64a5              STR      r5,[r4,#0x48]         ;1526
0005fa  f7fffffe          BL       vPortExitCritical
0005fe  f7fffffe          BL       vPortEnterCritical
000602  6c60              LDR      r0,[r4,#0x44]         ;1526
000604  2800              CMP      r0,#0                 ;1526
000606  dd0f              BLE      |L1.1576|
                  |L1.1544|
000608  6920              LDR      r0,[r4,#0x10]         ;1526
00060a  b168              CBZ      r0,|L1.1576|
00060c  f1040010          ADD      r0,r4,#0x10           ;1526
000610  f7fffffe          BL       xTaskRemoveFromEventList
000614  2800              CMP      r0,#0                 ;1526
000616  bf18              IT       NE                    ;1526
000618  f7fffffe          BLNE     vTaskMissedYield
00061c  6c60              LDR      r0,[r4,#0x44]         ;1526
00061e  1e41              SUBS     r1,r0,#1              ;1526
000620  6461              STR      r1,[r4,#0x44]         ;1526
000622  6c60              LDR      r0,[r4,#0x44]         ;1526
000624  2800              CMP      r0,#0                 ;1526
000626  dcef              BGT      |L1.1544|
                  |L1.1576|
000628  6465              STR      r5,[r4,#0x44]         ;1526
00062a  f7fffffe          BL       vPortExitCritical
00062e  f7fffffe          BL       xTaskResumeAll
000632  2800              CMP      r0,#0                 ;1528
000634  bf08              IT       EQ                    ;1530
000636  f7fffffe          BLEQ     vPortYield
00063a  e727              B        |L1.1164|
                  |L1.1596|
00063c  6a60              LDR      r0,[r4,#0x24]         ;1528
00063e  b168              CBZ      r0,|L1.1628|
000640  f1040024          ADD      r0,r4,#0x24           ;1528
000644  f7fffffe          BL       xTaskRemoveFromEventList
000648  2800              CMP      r0,#0                 ;1528
00064a  bf18              IT       NE                    ;1528
00064c  f7fffffe          BLNE     vTaskMissedYield
000650  6ca0              LDR      r0,[r4,#0x48]         ;1528
000652  1e41              SUBS     r1,r0,#1              ;1528
000654  64a1              STR      r1,[r4,#0x48]         ;1528
000656  6ca0              LDR      r0,[r4,#0x48]         ;1528
000658  2800              CMP      r0,#0                 ;1528
00065a  dcef              BGT      |L1.1596|
                  |L1.1628|
00065c  64a5              STR      r5,[r4,#0x48]         ;1528
00065e  f7fffffe          BL       vPortExitCritical
000662  f7fffffe          BL       vPortEnterCritical
000666  6c60              LDR      r0,[r4,#0x44]         ;1528
000668  2800              CMP      r0,#0                 ;1528
00066a  dd0f              BLE      |L1.1676|
                  |L1.1644|
00066c  6920              LDR      r0,[r4,#0x10]         ;1528
00066e  b168              CBZ      r0,|L1.1676|
000670  f1040010          ADD      r0,r4,#0x10           ;1528
000674  f7fffffe          BL       xTaskRemoveFromEventList
000678  2800              CMP      r0,#0                 ;1528
00067a  bf18              IT       NE                    ;1528
00067c  f7fffffe          BLNE     vTaskMissedYield
000680  6c60              LDR      r0,[r4,#0x44]         ;1528
000682  1e41              SUBS     r1,r0,#1              ;1528
000684  6461              STR      r1,[r4,#0x44]         ;1528
000686  6c60              LDR      r0,[r4,#0x44]         ;1528
000688  2800              CMP      r0,#0                 ;1528
00068a  dcef              BGT      |L1.1644|
                  |L1.1676|
00068c  6465              STR      r5,[r4,#0x44]         ;1528
00068e  f7fffffe          BL       vPortExitCritical
000692  f7fffffe          BL       xTaskResumeAll
000696  e6f9              B        |L1.1164|
;;;1553   /*-----------------------------------------------------------*/
                          ENDP

                  xQueueReceiveFromISR PROC
;;;1554   
;;;1555   BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
000698  e92d41f0          PUSH     {r4-r8,lr}
;;;1556   {
00069c  4616              MOV      r6,r2
00069e  460d              MOV      r5,r1
;;;1557   BaseType_t xReturn;
;;;1558   UBaseType_t uxSavedInterruptStatus;
;;;1559   Queue_t * const pxQueue = ( Queue_t * ) xQueue;
0006a0  4604              MOV      r4,r0
;;;1560   
;;;1561   	configASSERT( pxQueue );
;;;1562   	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
;;;1563   
;;;1564   	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;1565   	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;1566   	above the maximum system call priority are kept permanently enabled, even
;;;1567   	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;1568   	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;1569   	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1570   	failure if a FreeRTOS API function is called from an interrupt that has been
;;;1571   	assigned a priority above the configured maximum system call priority.
;;;1572   	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;1573   	that have been assigned a priority at or (logically) below the maximum
;;;1574   	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;1575   	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;1576   	More information (albeit Cortex-M specific) is provided on the following
;;;1577   	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1578   	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;1579   
;;;1580   	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
0006a2  f7fffffe          BL       ulPortSetInterruptMask
0006a6  4607              MOV      r7,r0
;;;1581   	{
;;;1582   		/* Cannot block in an ISR, so check there is data available. */
;;;1583   		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
0006a8  6ba0              LDR      r0,[r4,#0x38]
0006aa  2800              CMP      r0,#0
;;;1584   		{
;;;1585   			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
;;;1586   
;;;1587   			prvCopyDataFromQueue( pxQueue, pvBuffer );
;;;1588   			--( pxQueue->uxMessagesWaiting );
;;;1589   
;;;1590   			/* If the queue is locked the event list will not be modified.
;;;1591   			Instead update the lock count so the task that unlocks the queue
;;;1592   			will know that an ISR has removed data while the queue was
;;;1593   			locked. */
;;;1594   			if( pxQueue->xRxLock == queueUNLOCKED )
;;;1595   			{
;;;1596   				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
;;;1597   				{
;;;1598   					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
;;;1599   					{
;;;1600   						/* The task waiting has a higher priority than us so
;;;1601   						force a context switch. */
;;;1602   						if( pxHigherPriorityTaskWoken != NULL )
;;;1603   						{
;;;1604   							*pxHigherPriorityTaskWoken = pdTRUE;
;;;1605   						}
;;;1606   						else
;;;1607   						{
;;;1608   							mtCOVERAGE_TEST_MARKER();
;;;1609   						}
;;;1610   					}
;;;1611   					else
;;;1612   					{
;;;1613   						mtCOVERAGE_TEST_MARKER();
;;;1614   					}
;;;1615   				}
;;;1616   				else
;;;1617   				{
;;;1618   					mtCOVERAGE_TEST_MARKER();
;;;1619   				}
;;;1620   			}
;;;1621   			else
;;;1622   			{
;;;1623   				/* Increment the lock count so the task that unlocks the queue
;;;1624   				knows that data was removed while it was locked. */
;;;1625   				++( pxQueue->xRxLock );
;;;1626   			}
;;;1627   
;;;1628   			xReturn = pdPASS;
;;;1629   		}
;;;1630   		else
;;;1631   		{
;;;1632   			xReturn = pdFAIL;
0006ac  bf08              IT       EQ
0006ae  2400              MOVEQ    r4,#0
0006b0  d018              BEQ      |L1.1764|
0006b2  6c21              LDR      r1,[r4,#0x40]         ;1583
0006b4  4628              MOV      r0,r5                 ;1587
0006b6  b151              CBZ      r1,|L1.1742|
0006b8  68e2              LDR      r2,[r4,#0xc]          ;1587
0006ba  4411              ADD      r1,r1,r2              ;1587
0006bc  60e1              STR      r1,[r4,#0xc]          ;1587
0006be  6862              LDR      r2,[r4,#4]            ;1587
0006c0  4291              CMP      r1,r2                 ;1587
0006c2  bf24              ITT      CS                    ;1587
0006c4  6821              LDRCS    r1,[r4,#0]            ;1587
0006c6  60e1              STRCS    r1,[r4,#0xc]          ;1587
0006c8  6c22              LDR      r2,[r4,#0x40]         ;1587
0006ca  f7fffffe          BL       __aeabi_memcpy
                  |L1.1742|
0006ce  6ba0              LDR      r0,[r4,#0x38]         ;1588
0006d0  1e40              SUBS     r0,r0,#1              ;1588
0006d2  63a0              STR      r0,[r4,#0x38]         ;1588
0006d4  6c60              LDR      r0,[r4,#0x44]         ;1594
0006d6  f1b03fff          CMP      r0,#0xffffffff        ;1594
0006da  d009              BEQ      |L1.1776|
0006dc  6c60              LDR      r0,[r4,#0x44]         ;1625
0006de  1c40              ADDS     r0,r0,#1              ;1625
0006e0  6460              STR      r0,[r4,#0x44]         ;1625
                  |L1.1762|
0006e2  2401              MOVS     r4,#1                 ;1628
                  |L1.1764|
;;;1633   			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
;;;1634   		}
;;;1635   	}
;;;1636   	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
0006e4  4638              MOV      r0,r7
0006e6  f7fffffe          BL       vPortClearInterruptMask
;;;1637   
;;;1638   	return xReturn;
0006ea  4620              MOV      r0,r4
;;;1639   }
0006ec  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1776|
0006f0  6920              LDR      r0,[r4,#0x10]         ;1596
0006f2  2800              CMP      r0,#0                 ;1596
0006f4  d0f5              BEQ      |L1.1762|
0006f6  f1040010          ADD      r0,r4,#0x10           ;1598
0006fa  f7fffffe          BL       xTaskRemoveFromEventList
0006fe  2800              CMP      r0,#0                 ;1598
000700  bf1e              ITTT     NE                    ;1602
000702  2e00              CMPNE    r6,#0                 ;1602
000704  2001              MOVNE    r0,#1                 ;1604
000706  6030              STRNE    r0,[r6,#0]            ;1604
000708  e7eb              B        |L1.1762|
;;;1640   /*-----------------------------------------------------------*/
                          ENDP

                  xQueuePeekFromISR PROC
;;;1641   
;;;1642   BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
00070a  e92d41f0          PUSH     {r4-r8,lr}
;;;1643   {
00070e  460d              MOV      r5,r1
;;;1644   BaseType_t xReturn;
;;;1645   UBaseType_t uxSavedInterruptStatus;
;;;1646   int8_t *pcOriginalReadPosition;
;;;1647   Queue_t * const pxQueue = ( Queue_t * ) xQueue;
000710  4604              MOV      r4,r0
;;;1648   
;;;1649   	configASSERT( pxQueue );
;;;1650   	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
;;;1651   	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
;;;1652   
;;;1653   	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;1654   	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;1655   	above the maximum system call priority are kept permanently enabled, even
;;;1656   	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;1657   	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;1658   	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1659   	failure if a FreeRTOS API function is called from an interrupt that has been
;;;1660   	assigned a priority above the configured maximum system call priority.
;;;1661   	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;1662   	that have been assigned a priority at or (logically) below the maximum
;;;1663   	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;1664   	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;1665   	More information (albeit Cortex-M specific) is provided on the following
;;;1666   	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1667   	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;1668   
;;;1669   	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
000712  f7fffffe          BL       ulPortSetInterruptMask
000716  4607              MOV      r7,r0
;;;1670   	{
;;;1671   		/* Cannot block in an ISR, so check there is data available. */
;;;1672   		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
000718  6ba0              LDR      r0,[r4,#0x38]
00071a  2800              CMP      r0,#0
;;;1673   		{
;;;1674   			traceQUEUE_PEEK_FROM_ISR( pxQueue );
;;;1675   
;;;1676   			/* Remember the read position so it can be reset as nothing is
;;;1677   			actually being removed from the queue. */
;;;1678   			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
;;;1679   			prvCopyDataFromQueue( pxQueue, pvBuffer );
;;;1680   			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
;;;1681   
;;;1682   			xReturn = pdPASS;
;;;1683   		}
;;;1684   		else
;;;1685   		{
;;;1686   			xReturn = pdFAIL;
00071c  bf08              IT       EQ
00071e  2400              MOVEQ    r4,#0
000720  d00f              BEQ      |L1.1858|
000722  68e6              LDR      r6,[r4,#0xc]          ;1672
000724  6c21              LDR      r1,[r4,#0x40]         ;1672
000726  4628              MOV      r0,r5                 ;1679
000728  b149              CBZ      r1,|L1.1854|
00072a  4431              ADD      r1,r1,r6              ;1679
00072c  60e1              STR      r1,[r4,#0xc]          ;1679
00072e  6862              LDR      r2,[r4,#4]            ;1679
000730  4291              CMP      r1,r2                 ;1679
000732  bf24              ITT      CS                    ;1679
000734  6821              LDRCS    r1,[r4,#0]            ;1679
000736  60e1              STRCS    r1,[r4,#0xc]          ;1679
000738  6c22              LDR      r2,[r4,#0x40]         ;1679
00073a  f7fffffe          BL       __aeabi_memcpy
                  |L1.1854|
00073e  60e6              STR      r6,[r4,#0xc]          ;1682
000740  2401              MOVS     r4,#1                 ;1682
                  |L1.1858|
;;;1687   			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
;;;1688   		}
;;;1689   	}
;;;1690   	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
000742  4638              MOV      r0,r7
000744  f7fffffe          BL       vPortClearInterruptMask
;;;1691   
;;;1692   	return xReturn;
000748  4620              MOV      r0,r4
;;;1693   }
00074a  e8bd81f0          POP      {r4-r8,pc}
;;;1694   /*-----------------------------------------------------------*/
                          ENDP

                  uxQueueMessagesWaiting PROC
;;;1695   
;;;1696   UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
00074e  b510              PUSH     {r4,lr}
;;;1697   {
000750  4604              MOV      r4,r0
;;;1698   UBaseType_t uxReturn;
;;;1699   
;;;1700   	configASSERT( xQueue );
;;;1701   
;;;1702   	taskENTER_CRITICAL();
000752  f7fffffe          BL       vPortEnterCritical
;;;1703   	{
;;;1704   		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
000756  6ba4              LDR      r4,[r4,#0x38]
;;;1705   	}
;;;1706   	taskEXIT_CRITICAL();
000758  f7fffffe          BL       vPortExitCritical
;;;1707   
;;;1708   	return uxReturn;
00075c  4620              MOV      r0,r4
;;;1709   } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
00075e  bd10              POP      {r4,pc}
;;;1710   /*-----------------------------------------------------------*/
                          ENDP

                  uxQueueSpacesAvailable PROC
;;;1711   
;;;1712   UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
000760  b510              PUSH     {r4,lr}
;;;1713   {
;;;1714   UBaseType_t uxReturn;
;;;1715   Queue_t *pxQueue;
;;;1716   
;;;1717   	pxQueue = ( Queue_t * ) xQueue;
000762  4604              MOV      r4,r0
;;;1718   	configASSERT( pxQueue );
;;;1719   
;;;1720   	taskENTER_CRITICAL();
000764  f7fffffe          BL       vPortEnterCritical
;;;1721   	{
;;;1722   		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
000768  6ba1              LDR      r1,[r4,#0x38]
00076a  6be0              LDR      r0,[r4,#0x3c]
00076c  1a44              SUBS     r4,r0,r1
;;;1723   	}
;;;1724   	taskEXIT_CRITICAL();
00076e  f7fffffe          BL       vPortExitCritical
;;;1725   
;;;1726   	return uxReturn;
000772  4620              MOV      r0,r4
;;;1727   } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
000774  bd10              POP      {r4,pc}
;;;1728   /*-----------------------------------------------------------*/
                          ENDP

                  uxQueueMessagesWaitingFromISR PROC
;;;1729   
;;;1730   UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
000776  6b80              LDR      r0,[r0,#0x38]
;;;1731   {
;;;1732   UBaseType_t uxReturn;
;;;1733   
;;;1734   	configASSERT( xQueue );
;;;1735   
;;;1736   	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
;;;1737   
;;;1738   	return uxReturn;
;;;1739   } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
000778  4770              BX       lr
;;;1740   /*-----------------------------------------------------------*/
                          ENDP

                  vQueueDelete PROC
;;;1741   
;;;1742   void vQueueDelete( QueueHandle_t xQueue )
00077a  f7ffbffe          B.W      vPortFree
;;;1743   {
;;;1744   Queue_t * const pxQueue = ( Queue_t * ) xQueue;
;;;1745   
;;;1746   	configASSERT( pxQueue );
;;;1747   
;;;1748   	traceQUEUE_DELETE( pxQueue );
;;;1749   	#if ( configQUEUE_REGISTRY_SIZE > 0 )
;;;1750   	{
;;;1751   		vQueueUnregisterQueue( pxQueue );
;;;1752   	}
;;;1753   	#endif
;;;1754   	vPortFree( pxQueue );
;;;1755   }
;;;1756   /*-----------------------------------------------------------*/
                          ENDP

                  xQueueIsQueueEmptyFromISR PROC
;;;2015   
;;;2016   BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
00077e  6b80              LDR      r0,[r0,#0x38]
;;;2017   {
;;;2018   BaseType_t xReturn;
;;;2019   
;;;2020   	configASSERT( xQueue );
;;;2021   	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
000780  2800              CMP      r0,#0
;;;2022   	{
;;;2023   		xReturn = pdTRUE;
000782  bf0c              ITE      EQ
000784  2001              MOVEQ    r0,#1
;;;2024   	}
;;;2025   	else
;;;2026   	{
;;;2027   		xReturn = pdFALSE;
000786  2000              MOVNE    r0,#0
;;;2028   	}
;;;2029   
;;;2030   	return xReturn;
;;;2031   } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
000788  4770              BX       lr
;;;2032   /*-----------------------------------------------------------*/
                          ENDP

                  xQueueIsQueueFullFromISR PROC
;;;2054   
;;;2055   BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
00078a  6b81              LDR      r1,[r0,#0x38]
;;;2056   {
;;;2057   BaseType_t xReturn;
;;;2058   
;;;2059   	configASSERT( xQueue );
;;;2060   	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
00078c  6bc0              LDR      r0,[r0,#0x3c]
00078e  4281              CMP      r1,r0
;;;2061   	{
;;;2062   		xReturn = pdTRUE;
000790  bf0c              ITE      EQ
000792  2001              MOVEQ    r0,#1
;;;2063   	}
;;;2064   	else
;;;2065   	{
;;;2066   		xReturn = pdFALSE;
000794  2000              MOVNE    r0,#0
;;;2067   	}
;;;2068   
;;;2069   	return xReturn;
;;;2070   } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
000796  4770              BX       lr
;;;2071   /*-----------------------------------------------------------*/
                          ENDP

                  vQueueWaitForMessageRestricted PROC
;;;2405   
;;;2406   	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
000798  b570              PUSH     {r4-r6,lr}
;;;2407   	{
00079a  460d              MOV      r5,r1
;;;2408   	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
00079c  4604              MOV      r4,r0
;;;2409   
;;;2410   		/* This function should not be called by application code hence the
;;;2411   		'Restricted' in its name.  It is not part of the public API.  It is
;;;2412   		designed for use by kernel code, and has special calling requirements.
;;;2413   		It can result in vListInsert() being called on a list that can only
;;;2414   		possibly ever have one item in it, so the list will be fast, but even
;;;2415   		so it should be called with the scheduler locked and not from a critical
;;;2416   		section. */
;;;2417   
;;;2418   		/* Only do anything if there are no messages in the queue.  This function
;;;2419   		will not actually cause the task to block, just place it on a blocked
;;;2420   		list.  It will not block until the scheduler is unlocked - at which
;;;2421   		time a yield will be performed.  If an item is added to the queue while
;;;2422   		the queue is locked, and the calling task blocks on the queue, then the
;;;2423   		calling task will be immediately unblocked when the queue is unlocked. */
;;;2424   		prvLockQueue( pxQueue );
00079e  f7fffffe          BL       vPortEnterCritical
0007a2  6c60              LDR      r0,[r4,#0x44]
0007a4  f1b03fff          CMP      r0,#0xffffffff
0007a8  f04f0000          MOV      r0,#0
0007ac  bf08              IT       EQ
0007ae  6460              STREQ    r0,[r4,#0x44]
0007b0  6ca1              LDR      r1,[r4,#0x48]
0007b2  f1b13fff          CMP      r1,#0xffffffff
0007b6  bf08              IT       EQ
0007b8  64a0              STREQ    r0,[r4,#0x48]
0007ba  f7fffffe          BL       vPortExitCritical
;;;2425   		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
0007be  6ba0              LDR      r0,[r4,#0x38]
0007c0  b920              CBNZ     r0,|L1.1996|
;;;2426   		{
;;;2427   			/* There is nothing in the queue, block for the specified period. */
;;;2428   			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
0007c2  4629              MOV      r1,r5
0007c4  f1040024          ADD      r0,r4,#0x24
0007c8  f7fffffe          BL       vTaskPlaceOnEventListRestricted
                  |L1.1996|
;;;2429   		}
;;;2430   		else
;;;2431   		{
;;;2432   			mtCOVERAGE_TEST_MARKER();
;;;2433   		}
;;;2434   		prvUnlockQueue( pxQueue );
0007cc  4620              MOV      r0,r4
0007ce  e8bd4070          POP      {r4-r6,lr}
0007d2  f7ffbffe          B.W      prvUnlockQueue
;;;2435   	}
;;;2436   
                          ENDP

                  prvUnlockQueue PROC
;;;1879   
;;;1880   static void prvUnlockQueue( Queue_t * const pxQueue )
0007d6  b570              PUSH     {r4-r6,lr}
;;;1881   {
0007d8  4604              MOV      r4,r0
;;;1882   	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
;;;1883   
;;;1884   	/* The lock counts contains the number of extra data items placed or
;;;1885   	removed from the queue while the queue was locked.  When a queue is
;;;1886   	locked items can be added or removed, but the event lists cannot be
;;;1887   	updated. */
;;;1888   	taskENTER_CRITICAL();
0007da  f7fffffe          BL       vPortEnterCritical
;;;1889   	{
;;;1890   		/* See if data was added to the queue while it was locked. */
;;;1891   		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
0007de  6ca0              LDR      r0,[r4,#0x48]
0007e0  2800              CMP      r0,#0
0007e2  dd0f              BLE      |L1.2052|
                  |L1.2020|
;;;1892   		{
;;;1893   			/* Data was posted while the queue was locked.  Are any tasks
;;;1894   			blocked waiting for data to become available? */
;;;1895   			#if ( configUSE_QUEUE_SETS == 1 )
;;;1896   			{
;;;1897   				if( pxQueue->pxQueueSetContainer != NULL )
;;;1898   				{
;;;1899   					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
;;;1900   					{
;;;1901   						/* The queue is a member of a queue set, and posting to
;;;1902   						the queue set caused a higher priority task to unblock.
;;;1903   						A context switch is required. */
;;;1904   						vTaskMissedYield();
;;;1905   					}
;;;1906   					else
;;;1907   					{
;;;1908   						mtCOVERAGE_TEST_MARKER();
;;;1909   					}
;;;1910   				}
;;;1911   				else
;;;1912   				{
;;;1913   					/* Tasks that are removed from the event list will get added to
;;;1914   					the pending ready list as the scheduler is still suspended. */
;;;1915   					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;1916   					{
;;;1917   						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
;;;1918   						{
;;;1919   							/* The task waiting has a higher priority so record that a
;;;1920   							context	switch is required. */
;;;1921   							vTaskMissedYield();
;;;1922   						}
;;;1923   						else
;;;1924   						{
;;;1925   							mtCOVERAGE_TEST_MARKER();
;;;1926   						}
;;;1927   					}
;;;1928   					else
;;;1929   					{
;;;1930   						break;
;;;1931   					}
;;;1932   				}
;;;1933   			}
;;;1934   			#else /* configUSE_QUEUE_SETS */
;;;1935   			{
;;;1936   				/* Tasks that are removed from the event list will get added to
;;;1937   				the pending ready list as the scheduler is still suspended. */
;;;1938   				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
0007e4  6a60              LDR      r0,[r4,#0x24]
0007e6  b168              CBZ      r0,|L1.2052|
;;;1939   				{
;;;1940   					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
0007e8  f1040024          ADD      r0,r4,#0x24
0007ec  f7fffffe          BL       xTaskRemoveFromEventList
0007f0  2800              CMP      r0,#0
;;;1941   					{
;;;1942   						/* The task waiting has a higher priority so record that a
;;;1943   						context	switch is required. */
;;;1944   						vTaskMissedYield();
0007f2  bf18              IT       NE
0007f4  f7fffffe          BLNE     vTaskMissedYield
;;;1945   					}
;;;1946   					else
;;;1947   					{
;;;1948   						mtCOVERAGE_TEST_MARKER();
;;;1949   					}
;;;1950   				}
;;;1951   				else
;;;1952   				{
;;;1953   					break;
;;;1954   				}
;;;1955   			}
;;;1956   			#endif /* configUSE_QUEUE_SETS */
;;;1957   
;;;1958   			--( pxQueue->xTxLock );
0007f8  6ca0              LDR      r0,[r4,#0x48]
0007fa  1e40              SUBS     r0,r0,#1
0007fc  64a0              STR      r0,[r4,#0x48]
0007fe  6ca0              LDR      r0,[r4,#0x48]         ;1891
000800  2800              CMP      r0,#0                 ;1891
000802  dcef              BGT      |L1.2020|
                  |L1.2052|
;;;1959   		}
;;;1960   
;;;1961   		pxQueue->xTxLock = queueUNLOCKED;
000804  f04f35ff          MOV      r5,#0xffffffff
000808  64a5              STR      r5,[r4,#0x48]
;;;1962   	}
;;;1963   	taskEXIT_CRITICAL();
00080a  f7fffffe          BL       vPortExitCritical
;;;1964   
;;;1965   	/* Do the same for the Rx lock. */
;;;1966   	taskENTER_CRITICAL();
00080e  f7fffffe          BL       vPortEnterCritical
;;;1967   	{
;;;1968   		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
000812  6c60              LDR      r0,[r4,#0x44]
000814  2800              CMP      r0,#0
000816  dd0f              BLE      |L1.2104|
                  |L1.2072|
;;;1969   		{
;;;1970   			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
000818  6920              LDR      r0,[r4,#0x10]
00081a  b168              CBZ      r0,|L1.2104|
;;;1971   			{
;;;1972   				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
00081c  f1040010          ADD      r0,r4,#0x10
000820  f7fffffe          BL       xTaskRemoveFromEventList
000824  2800              CMP      r0,#0
;;;1973   				{
;;;1974   					vTaskMissedYield();
000826  bf18              IT       NE
000828  f7fffffe          BLNE     vTaskMissedYield
;;;1975   				}
;;;1976   				else
;;;1977   				{
;;;1978   					mtCOVERAGE_TEST_MARKER();
;;;1979   				}
;;;1980   
;;;1981   				--( pxQueue->xRxLock );
00082c  6c60              LDR      r0,[r4,#0x44]
00082e  1e40              SUBS     r0,r0,#1
000830  6460              STR      r0,[r4,#0x44]
000832  6c60              LDR      r0,[r4,#0x44]         ;1968
000834  2800              CMP      r0,#0                 ;1968
000836  dcef              BGT      |L1.2072|
                  |L1.2104|
;;;1982   			}
;;;1983   			else
;;;1984   			{
;;;1985   				break;
;;;1986   			}
;;;1987   		}
;;;1988   
;;;1989   		pxQueue->xRxLock = queueUNLOCKED;
000838  6465              STR      r5,[r4,#0x44]
;;;1990   	}
;;;1991   	taskEXIT_CRITICAL();
00083a  e8bd4070          POP      {r4-r6,lr}
00083e  f7ffbffe          B.W      vPortExitCritical
;;;1992   }
;;;1993   /*-----------------------------------------------------------*/
                          ENDP

