; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\tasks.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\tasks.d --cpu=Cortex-M3 --apcs=interwork -Otime --diag_suppress=9931 -I.\Driver -I.\Application -I.\System\FreeRTOS\include -I.\System\FreeRTOS\portable\MemMang -I.\System\FreeRTOS\portable\RVDS\ARM_CM3 -I.\System\Libraries\CMSIS\CM3\CoreSupport -I.\System\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I.\System\Libraries\STM32F10x_StdPeriph_Driver\inc -ID:\EmbeddedSystem\STM32F10xx\SolarUtility\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=515 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\objects\tasks.crf System\FreeRTOS\tasks.c]
                          THUMB

                          AREA ||i.prvAddCurrentTaskToDelayedList||, CODE, READONLY, ALIGN=2

                  prvAddCurrentTaskToDelayedList PROC
;;;3041   
;;;3042   static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
000000  b570              PUSH     {r4-r6,lr}
;;;3043   {
;;;3044   	/* The list item will be inserted in wake time order. */
;;;3045   	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
000002  4d0b              LDR      r5,|L1.48|
000004  4604              MOV      r4,r0                 ;3043
000006  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
;;;3046   
;;;3047   	if( xTimeToWake < xTickCount )
000008  6044              STR      r4,[r0,#4]
00000a  68e8              LDR      r0,[r5,#0xc]  ; xTickCount
00000c  4284              CMP      r4,r0
;;;3048   	{
;;;3049   		/* Wake time has overflowed.  Place this item in the overflow list. */
;;;3050   		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
;;;3051   	}
;;;3052   	else
;;;3053   	{
;;;3054   		/* The wake time has not overflowed, so the current block list is used. */
;;;3055   		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
00000e  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000010  f1000104          ADD      r1,r0,#4
000014  d204              BCS      |L1.32|
000016  6b68              LDR      r0,[r5,#0x34]         ;3050  ; pxOverflowDelayedTaskList
000018  e8bd4070          POP      {r4-r6,lr}            ;3050
00001c  f7ffbffe          B.W      vListInsert
                  |L1.32|
000020  6b28              LDR      r0,[r5,#0x30]  ; pxDelayedTaskList
000022  f7fffffe          BL       vListInsert
;;;3056   
;;;3057   		/* If the task entering the blocked state was placed at the head of the
;;;3058   		list of blocked tasks then xNextTaskUnblockTime needs to be updated
;;;3059   		too. */
;;;3060   		if( xTimeToWake < xNextTaskUnblockTime )
000026  6aa8              LDR      r0,[r5,#0x28]  ; xNextTaskUnblockTime
000028  42a0              CMP      r0,r4
;;;3061   		{
;;;3062   			xNextTaskUnblockTime = xTimeToWake;
00002a  bf88              IT       HI
00002c  62ac              STRHI    r4,[r5,#0x28]  ; xNextTaskUnblockTime
;;;3063   		}
;;;3064   		else
;;;3065   		{
;;;3066   			mtCOVERAGE_TEST_MARKER();
;;;3067   		}
;;;3068   	}
;;;3069   }
00002e  bd70              POP      {r4-r6,pc}
;;;3070   /*-----------------------------------------------------------*/
                          ENDP

                  |L1.48|
                          DCD      ||.data||

                          AREA ||i.prvIdleTask||, CODE, READONLY, ALIGN=2

                  prvIdleTask PROC
;;;2657    */
;;;2658   static portTASK_FUNCTION( prvIdleTask, pvParameters )
000000  4e17              LDR      r6,|L2.96|
000002  4d18              LDR      r5,|L2.100|
;;;2659   {
;;;2660   	/* Stop warnings. */
;;;2661   	( void ) pvParameters;
;;;2662   
;;;2663   	for( ;; )
;;;2664   	{
;;;2665   		/* See if any tasks have been deleted. */
;;;2666   		prvCheckTasksWaitingTermination();
;;;2667   
;;;2668   		#if ( configUSE_PREEMPTION == 0 )
;;;2669   		{
;;;2670   			/* If we are not using preemption we keep forcing a task switch to
;;;2671   			see if any other task has become available.  If we are using
;;;2672   			preemption we don't need to do this as any task becoming available
;;;2673   			will automatically get the processor anyway. */
;;;2674   			taskYIELD();
;;;2675   		}
;;;2676   		#endif /* configUSE_PREEMPTION */
;;;2677   
;;;2678   		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
;;;2679   		{
;;;2680   			/* When using preemption tasks of equal priority will be
;;;2681   			timesliced.  If a task that is sharing the idle priority is ready
;;;2682   			to run then the idle task should yield before the end of the
;;;2683   			timeslice.
;;;2684   
;;;2685   			A critical region is not required here as we are just reading from
;;;2686   			the list, and an occasional incorrect value will not matter.  If
;;;2687   			the ready list at the idle priority contains more than one task
;;;2688   			then a task other than the idle task is ready to execute. */
;;;2689   			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
000004  f1a607a0          SUB      r7,r6,#0xa0
                  |L2.8|
000008  6868              LDR      r0,[r5,#4]  ; uxTasksDeleted
00000a  b310              CBZ      r0,|L2.82|
                  |L2.12|
00000c  6ae8              LDR      r0,[r5,#0x2c]  ; uxSchedulerSuspended
00000e  1c40              ADDS     r0,r0,#1
000010  62e8              STR      r0,[r5,#0x2c]  ; uxSchedulerSuspended
000012  6830              LDR      r0,[r6,#0]  ; xTasksWaitingTermination
000014  2800              CMP      r0,#0
000016  bf0c              ITE      EQ
000018  2401              MOVEQ    r4,#1
00001a  2400              MOVNE    r4,#0
00001c  f7fffffe          BL       xTaskResumeAll
000020  b9a4              CBNZ     r4,|L2.76|
000022  f7fffffe          BL       vPortEnterCritical
000026  68f0              LDR      r0,[r6,#0xc]  ; xTasksWaitingTermination
000028  68c4              LDR      r4,[r0,#0xc]
00002a  1d20              ADDS     r0,r4,#4
00002c  f7fffffe          BL       uxListRemove
000030  68a8              LDR      r0,[r5,#8]  ; uxCurrentNumberOfTasks
000032  1e40              SUBS     r0,r0,#1
000034  60a8              STR      r0,[r5,#8]  ; uxCurrentNumberOfTasks
000036  6868              LDR      r0,[r5,#4]  ; uxTasksDeleted
000038  1e40              SUBS     r0,r0,#1
00003a  6068              STR      r0,[r5,#4]  ; uxTasksDeleted
00003c  f7fffffe          BL       vPortExitCritical
000040  6b20              LDR      r0,[r4,#0x30]
000042  f7fffffe          BL       vPortFree
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       vPortFree
                  |L2.76|
00004c  6868              LDR      r0,[r5,#4]  ; uxTasksDeleted
00004e  2800              CMP      r0,#0
000050  d1dc              BNE      |L2.12|
                  |L2.82|
000052  6838              LDR      r0,[r7,#0]  ; pxReadyTasksLists
000054  2801              CMP      r0,#1
;;;2690   			{
;;;2691   				taskYIELD();
000056  bf88              IT       HI
000058  f7fffffe          BLHI     vPortYield
00005c  e7d4              B        |L2.8|
;;;2692   			}
;;;2693   			else
;;;2694   			{
;;;2695   				mtCOVERAGE_TEST_MARKER();
;;;2696   			}
;;;2697   		}
;;;2698   		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
;;;2699   
;;;2700   		#if ( configUSE_IDLE_HOOK == 1 )
;;;2701   		{
;;;2702   			extern void vApplicationIdleHook( void );
;;;2703   
;;;2704   			/* Call the user defined function from within the idle task.  This
;;;2705   			allows the application designer to add background functionality
;;;2706   			without the overhead of a separate task.
;;;2707   			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
;;;2708   			CALL A FUNCTION THAT MIGHT BLOCK. */
;;;2709   			vApplicationIdleHook();
;;;2710   		}
;;;2711   		#endif /* configUSE_IDLE_HOOK */
;;;2712   
;;;2713   		/* This conditional compilation should use inequality to 0, not equality
;;;2714   		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
;;;2715   		user defined low power mode	implementations require
;;;2716   		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
;;;2717   		#if ( configUSE_TICKLESS_IDLE != 0 )
;;;2718   		{
;;;2719   		TickType_t xExpectedIdleTime;
;;;2720   
;;;2721   			/* It is not desirable to suspend then resume the scheduler on
;;;2722   			each iteration of the idle task.  Therefore, a preliminary
;;;2723   			test of the expected idle time is performed without the
;;;2724   			scheduler suspended.  The result here is not necessarily
;;;2725   			valid. */
;;;2726   			xExpectedIdleTime = prvGetExpectedIdleTime();
;;;2727   
;;;2728   			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
;;;2729   			{
;;;2730   				vTaskSuspendAll();
;;;2731   				{
;;;2732   					/* Now the scheduler is suspended, the expected idle
;;;2733   					time can be sampled again, and this time its value can
;;;2734   					be used. */
;;;2735   					configASSERT( xNextTaskUnblockTime >= xTickCount );
;;;2736   					xExpectedIdleTime = prvGetExpectedIdleTime();
;;;2737   
;;;2738   					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
;;;2739   					{
;;;2740   						traceLOW_POWER_IDLE_BEGIN();
;;;2741   						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
;;;2742   						traceLOW_POWER_IDLE_END();
;;;2743   					}
;;;2744   					else
;;;2745   					{
;;;2746   						mtCOVERAGE_TEST_MARKER();
;;;2747   					}
;;;2748   				}
;;;2749   				( void ) xTaskResumeAll();
;;;2750   			}
;;;2751   			else
;;;2752   			{
;;;2753   				mtCOVERAGE_TEST_MARKER();
;;;2754   			}
;;;2755   		}
;;;2756   		#endif /* configUSE_TICKLESS_IDLE */
;;;2757   	}
;;;2758   }
;;;2759   /*-----------------------------------------------------------*/
                          ENDP

00005e  0000              DCW      0x0000
                  |L2.96|
                          DCD      ||.bss||+0xa0
                  |L2.100|
                          DCD      ||.data||

                          AREA ||i.ulTaskNotifyTake||, CODE, READONLY, ALIGN=2

                  ulTaskNotifyTake PROC
;;;3872   
;;;3873   	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;3874   	{
000004  460c              MOV      r4,r1
000006  4606              MOV      r6,r0
;;;3875   	TickType_t xTimeToWake;
;;;3876   	uint32_t ulReturn;
;;;3877   
;;;3878   		taskENTER_CRITICAL();
000008  f7fffffe          BL       vPortEnterCritical
;;;3879   		{
;;;3880   			/* Only block if the notification count is not already non-zero. */
;;;3881   			if( pxCurrentTCB->ulNotifiedValue == 0UL )
00000c  4d1f              LDR      r5,|L3.140|
00000e  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000010  6c40              LDR      r0,[r0,#0x44]
000012  b9d8              CBNZ     r0,|L3.76|
;;;3882   			{
;;;3883   				/* Mark this task as waiting for a notification. */
;;;3884   				pxCurrentTCB->eNotifyState = eWaitingNotification;
000014  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000016  2701              MOVS     r7,#1
000018  f8807048          STRB     r7,[r0,#0x48]
;;;3885   
;;;3886   				if( xTicksToWait > ( TickType_t ) 0 )
00001c  b1b4              CBZ      r4,|L3.76|
;;;3887   				{
;;;3888   					/* The task is going to block.  First it must be removed
;;;3889   					from the ready list. */
;;;3890   					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
00001e  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000020  1d00              ADDS     r0,r0,#4
000022  f7fffffe          BL       uxListRemove
000026  b940              CBNZ     r0,|L3.58|
;;;3891   					{
;;;3892   						/* The current task must be in a ready list, so there is
;;;3893   						no need to check, and the port reset macro can be called
;;;3894   						directly. */
;;;3895   						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
000028  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
00002a  6929              LDR      r1,[r5,#0x10]  ; uxTopReadyPriority
00002c  f890002c          LDRB     r0,[r0,#0x2c]
000030  fa07f000          LSL      r0,r7,r0
000034  ea210000          BIC      r0,r1,r0
000038  6128              STR      r0,[r5,#0x10]  ; uxTopReadyPriority
                  |L3.58|
;;;3896   					}
;;;3897   					else
;;;3898   					{
;;;3899   						mtCOVERAGE_TEST_MARKER();
;;;3900   					}
;;;3901   
;;;3902   					#if ( INCLUDE_vTaskSuspend == 1 )
;;;3903   					{
;;;3904   						if( xTicksToWait == portMAX_DELAY )
00003a  f1b43fff          CMP      r4,#0xffffffff
00003e  d013              BEQ      |L3.104|
;;;3905   						{
;;;3906   							/* Add the task to the suspended task list instead
;;;3907   							of a delayed task list to ensure the task is not
;;;3908   							woken by a timing event.  It will block
;;;3909   							indefinitely. */
;;;3910   							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
;;;3911   						}
;;;3912   						else
;;;3913   						{
;;;3914   							/* Calculate the time at which the task should be
;;;3915   							woken if no notification events occur.  This may
;;;3916   							overflow but this doesn't matter, the scheduler will
;;;3917   							handle it. */
;;;3918   							xTimeToWake = xTickCount + xTicksToWait;
000040  68e8              LDR      r0,[r5,#0xc]  ; xTickCount
000042  4420              ADD      r0,r0,r4
;;;3919   							prvAddCurrentTaskToDelayedList( xTimeToWake );
000044  f7fffffe          BL       prvAddCurrentTaskToDelayedList
                  |L3.72|
;;;3920   						}
;;;3921   					}
;;;3922   					#else /* INCLUDE_vTaskSuspend */
;;;3923   					{
;;;3924   							/* Calculate the time at which the task should be
;;;3925   							woken if the event does not occur.  This may
;;;3926   							overflow but this doesn't matter, the scheduler will
;;;3927   							handle it. */
;;;3928   							xTimeToWake = xTickCount + xTicksToWait;
;;;3929   							prvAddCurrentTaskToDelayedList( xTimeToWake );
;;;3930   					}
;;;3931   					#endif /* INCLUDE_vTaskSuspend */
;;;3932   
;;;3933   					/* All ports are written to allow a yield in a critical
;;;3934   					section (some will yield immediately, others wait until the
;;;3935   					critical section exits) - but it is not something that
;;;3936   					application code should ever do. */
;;;3937   					portYIELD_WITHIN_API();
000048  f7fffffe          BL       vPortYield
                  |L3.76|
;;;3938   				}
;;;3939   				else
;;;3940   				{
;;;3941   					mtCOVERAGE_TEST_MARKER();
;;;3942   				}
;;;3943   			}
;;;3944   			else
;;;3945   			{
;;;3946   				mtCOVERAGE_TEST_MARKER();
;;;3947   			}
;;;3948   		}
;;;3949   		taskEXIT_CRITICAL();
00004c  f7fffffe          BL       vPortExitCritical
;;;3950   
;;;3951   		taskENTER_CRITICAL();
000050  f7fffffe          BL       vPortEnterCritical
;;;3952   		{
;;;3953   			ulReturn = pxCurrentTCB->ulNotifiedValue;
000054  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000056  6c44              LDR      r4,[r0,#0x44]
000058  2000              MOVS     r0,#0
;;;3954   
;;;3955   			if( ulReturn != 0UL )
00005a  b174              CBZ      r4,|L3.122|
;;;3956   			{
;;;3957   				if( xClearCountOnExit != pdFALSE )
;;;3958   				{
;;;3959   					pxCurrentTCB->ulNotifiedValue = 0UL;
;;;3960   				}
;;;3961   				else
;;;3962   				{
;;;3963   					( pxCurrentTCB->ulNotifiedValue )--;
00005c  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
00005e  2e00              CMP      r6,#0                 ;3957
000060  bf18              IT       NE                    ;3959
000062  6448              STRNE    r0,[r1,#0x44]         ;3959
000064  d006              BEQ      |L3.116|
000066  e008              B        |L3.122|
                  |L3.104|
000068  6828              LDR      r0,[r5,#0]            ;3910  ; pxCurrentTCB
00006a  1d01              ADDS     r1,r0,#4              ;3910
00006c  4808              LDR      r0,|L3.144|
00006e  f7fffffe          BL       vListInsertEnd
000072  e7e9              B        |L3.72|
                  |L3.116|
000074  6c4a              LDR      r2,[r1,#0x44]
000076  1e52              SUBS     r2,r2,#1
000078  644a              STR      r2,[r1,#0x44]
                  |L3.122|
;;;3964   				}
;;;3965   			}
;;;3966   			else
;;;3967   			{
;;;3968   				mtCOVERAGE_TEST_MARKER();
;;;3969   			}
;;;3970   
;;;3971   			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
00007a  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
00007c  f8810048          STRB     r0,[r1,#0x48]
;;;3972   		}
;;;3973   		taskEXIT_CRITICAL();
000080  f7fffffe          BL       vPortExitCritical
;;;3974   
;;;3975   		return ulReturn;
000084  4620              MOV      r0,r4
;;;3976   	}
000086  e8bd81f0          POP      {r4-r8,pc}
;;;3977   
                          ENDP

00008a  0000              DCW      0x0000
                  |L3.140|
                          DCD      ||.data||
                  |L3.144|
                          DCD      ||.bss||+0xb4

                          AREA ||i.uxTaskGetNumberOfTasks||, CODE, READONLY, ALIGN=2

                  uxTaskGetNumberOfTasks PROC
;;;1808   
;;;1809   UBaseType_t uxTaskGetNumberOfTasks( void )
000000  4801              LDR      r0,|L4.8|
;;;1810   {
;;;1811   	/* A critical section is not required because the variables are of type
;;;1812   	BaseType_t. */
;;;1813   	return uxCurrentNumberOfTasks;
000002  6880              LDR      r0,[r0,#8]  ; uxCurrentNumberOfTasks
;;;1814   }
000004  4770              BX       lr
;;;1815   /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      ||.data||

                          AREA ||i.uxTaskPriorityGet||, CODE, READONLY, ALIGN=2

                  uxTaskPriorityGet PROC
;;;1057   
;;;1058   	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
000000  b510              PUSH     {r4,lr}
;;;1059   	{
000002  4604              MOV      r4,r0
;;;1060   	TCB_t *pxTCB;
;;;1061   	UBaseType_t uxReturn;
;;;1062   
;;;1063   		taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1064   		{
;;;1065   			/* If null is passed in here then we are changing the
;;;1066   			priority of the calling function. */
;;;1067   			pxTCB = prvGetTCBFromHandle( xTask );
000008  2c00              CMP      r4,#0
00000a  bf04              ITT      EQ
00000c  4803              LDREQ    r0,|L5.28|
00000e  6804              LDREQ    r4,[r0,#0]  ; pxCurrentTCB
;;;1068   			uxReturn = pxTCB->uxPriority;
000010  6ae4              LDR      r4,[r4,#0x2c]
;;;1069   		}
;;;1070   		taskEXIT_CRITICAL();
000012  f7fffffe          BL       vPortExitCritical
;;;1071   
;;;1072   		return uxReturn;
000016  4620              MOV      r0,r4
;;;1073   	}
000018  bd10              POP      {r4,pc}
;;;1074   
                          ENDP

00001a  0000              DCW      0x0000
                  |L5.28|
                          DCD      ||.data||

                          AREA ||i.uxTaskPriorityGetFromISR||, CODE, READONLY, ALIGN=2

                  uxTaskPriorityGetFromISR PROC
;;;1079   
;;;1080   	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
000000  b510              PUSH     {r4,lr}
;;;1081   	{
000002  4604              MOV      r4,r0
;;;1082   	TCB_t *pxTCB;
;;;1083   	UBaseType_t uxReturn, uxSavedInterruptState;
;;;1084   
;;;1085   		/* RTOS ports that support interrupt nesting have the concept of a
;;;1086   		maximum	system call (or maximum API call) interrupt priority.
;;;1087   		Interrupts that are	above the maximum system call priority are keep
;;;1088   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;1089   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;1090   		is defined in FreeRTOSConfig.h then
;;;1091   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1092   		failure if a FreeRTOS API function is called from an interrupt that has
;;;1093   		been assigned a priority above the configured maximum system call
;;;1094   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;1095   		from interrupts	that have been assigned a priority at or (logically)
;;;1096   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;1097   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;1098   		simple as possible.  More information (albeit Cortex-M specific) is
;;;1099   		provided on the following link:
;;;1100   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1101   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;1102   
;;;1103   		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
000004  f7fffffe          BL       ulPortSetInterruptMask
;;;1104   		{
;;;1105   			/* If null is passed in here then it is the priority of the calling
;;;1106   			task that is being queried. */
;;;1107   			pxTCB = prvGetTCBFromHandle( xTask );
000008  2c00              CMP      r4,#0
00000a  bf04              ITT      EQ
00000c  4903              LDREQ    r1,|L6.28|
00000e  680c              LDREQ    r4,[r1,#0]  ; pxCurrentTCB
;;;1108   			uxReturn = pxTCB->uxPriority;
000010  6ae4              LDR      r4,[r4,#0x2c]
;;;1109   		}
;;;1110   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
000012  f7fffffe          BL       vPortClearInterruptMask
;;;1111   
;;;1112   		return uxReturn;
000016  4620              MOV      r0,r4
;;;1113   	}
000018  bd10              POP      {r4,pc}
;;;1114   
                          ENDP

00001a  0000              DCW      0x0000
                  |L6.28|
                          DCD      ||.data||

                          AREA ||i.uxTaskResetEventItemValue||, CODE, READONLY, ALIGN=2

                  uxTaskResetEventItemValue PROC
;;;3839   
;;;3840   TickType_t uxTaskResetEventItemValue( void )
000000  4904              LDR      r1,|L7.20|
;;;3841   {
;;;3842   TickType_t uxReturn;
;;;3843   
;;;3844   	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
000002  6808              LDR      r0,[r1,#0]  ; pxCurrentTCB
;;;3845   
;;;3846   	/* Reset the event list item to its normal value - so it can be used with
;;;3847   	queues and semaphores. */
;;;3848   	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000004  680a              LDR      r2,[r1,#0]  ; pxCurrentTCB
000006  6980              LDR      r0,[r0,#0x18]         ;3844
000008  6ad2              LDR      r2,[r2,#0x2c]
00000a  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00000c  f1c20205          RSB      r2,r2,#5
000010  618a              STR      r2,[r1,#0x18]
;;;3849   
;;;3850   	return uxReturn;
;;;3851   }
000012  4770              BX       lr
;;;3852   /*-----------------------------------------------------------*/
                          ENDP

                  |L7.20|
                          DCD      ||.data||

                          AREA ||i.vTaskDelay||, CODE, READONLY, ALIGN=2

                  vTaskDelay PROC
;;;921    
;;;922    	void vTaskDelay( const TickType_t xTicksToDelay )
000000  b570              PUSH     {r4-r6,lr}
;;;923    	{
000002  b1e0              CBZ      r0,|L8.62|
000004  4c10              LDR      r4,|L8.72|
000006  6ae1              LDR      r1,[r4,#0x2c]  ; uxSchedulerSuspended
000008  1c49              ADDS     r1,r1,#1
00000a  62e1              STR      r1,[r4,#0x2c]  ; uxSchedulerSuspended
;;;924    	TickType_t xTimeToWake;
;;;925    	BaseType_t xAlreadyYielded = pdFALSE;
;;;926    
;;;927    
;;;928    		/* A delay time of zero just forces a reschedule. */
;;;929    		if( xTicksToDelay > ( TickType_t ) 0U )
;;;930    		{
;;;931    			configASSERT( uxSchedulerSuspended == 0 );
;;;932    			vTaskSuspendAll();
;;;933    			{
;;;934    				traceTASK_DELAY();
;;;935    
;;;936    				/* A task that is removed from the event list while the
;;;937    				scheduler is suspended will not get placed in the ready
;;;938    				list or removed from the blocked list until the scheduler
;;;939    				is resumed.
;;;940    
;;;941    				This task cannot be in an event list as it is the currently
;;;942    				executing task. */
;;;943    
;;;944    				/* Calculate the time to wake - this may overflow but this is
;;;945    				not a problem. */
;;;946    				xTimeToWake = xTickCount + xTicksToDelay;
00000c  68e1              LDR      r1,[r4,#0xc]  ; xTickCount
00000e  180d              ADDS     r5,r1,r0
;;;947    
;;;948    				/* We must remove ourselves from the ready list before adding
;;;949    				ourselves to the blocked list as the same list item is used for
;;;950    				both lists. */
;;;951    				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000010  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
000012  1d00              ADDS     r0,r0,#4
000014  f7fffffe          BL       uxListRemove
000018  b948              CBNZ     r0,|L8.46|
;;;952    				{
;;;953    					/* The current task must be in a ready list, so there is
;;;954    					no need to check, and the port reset macro can be called
;;;955    					directly. */
;;;956    					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
00001a  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
00001c  2101              MOVS     r1,#1
00001e  f890002c          LDRB     r0,[r0,#0x2c]
000022  fa01f000          LSL      r0,r1,r0
000026  6921              LDR      r1,[r4,#0x10]  ; uxTopReadyPriority
000028  ea210000          BIC      r0,r1,r0
00002c  6120              STR      r0,[r4,#0x10]  ; uxTopReadyPriority
                  |L8.46|
;;;957    				}
;;;958    				else
;;;959    				{
;;;960    					mtCOVERAGE_TEST_MARKER();
;;;961    				}
;;;962    				prvAddCurrentTaskToDelayedList( xTimeToWake );
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;963    			}
;;;964    			xAlreadyYielded = xTaskResumeAll();
000034  f7fffffe          BL       xTaskResumeAll
000038  2800              CMP      r0,#0
;;;965    		}
;;;966    		else
;;;967    		{
;;;968    			mtCOVERAGE_TEST_MARKER();
;;;969    		}
;;;970    
;;;971    		/* Force a reschedule if xTaskResumeAll has not already done so, we may
;;;972    		have put ourselves to sleep. */
;;;973    		if( xAlreadyYielded == pdFALSE )
;;;974    		{
;;;975    			portYIELD_WITHIN_API();
;;;976    		}
;;;977    		else
;;;978    		{
;;;979    			mtCOVERAGE_TEST_MARKER();
;;;980    		}
;;;981    	}
00003a  bf18              IT       NE
00003c  bd70              POPNE    {r4-r6,pc}
                  |L8.62|
00003e  e8bd4070          POP      {r4-r6,lr}            ;975
000042  f7ffbffe          B.W      vPortYield
;;;982    
                          ENDP

000046  0000              DCW      0x0000
                  |L8.72|
                          DCD      ||.data||

                          AREA ||i.vTaskDelayUntil||, CODE, READONLY, ALIGN=2

                  vTaskDelayUntil PROC
;;;825    
;;;826    	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
000000  b570              PUSH     {r4-r6,lr}
000002  4d1a              LDR      r5,|L9.108|
;;;827    	{
000004  4684              MOV      r12,r0
;;;828    	TickType_t xTimeToWake;
;;;829    	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
000006  2200              MOVS     r2,#0
000008  6ae8              LDR      r0,[r5,#0x2c]  ; uxSchedulerSuspended
00000a  1c40              ADDS     r0,r0,#1
00000c  62e8              STR      r0,[r5,#0x2c]  ; uxSchedulerSuspended
;;;830    
;;;831    		configASSERT( pxPreviousWakeTime );
;;;832    		configASSERT( ( xTimeIncrement > 0U ) );
;;;833    		configASSERT( uxSchedulerSuspended == 0 );
;;;834    
;;;835    		vTaskSuspendAll();
;;;836    		{
;;;837    			/* Minor optimisation.  The tick count cannot change in this
;;;838    			block. */
;;;839    			const TickType_t xConstTickCount = xTickCount;
00000e  68e8              LDR      r0,[r5,#0xc]  ; xTickCount
;;;840    
;;;841    			/* Generate the tick time at which the task wants to wake. */
;;;842    			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
000010  f8dc3000          LDR      r3,[r12,#0]
000014  185c              ADDS     r4,r3,r1
;;;843    
;;;844    			if( xConstTickCount < *pxPreviousWakeTime )
000016  4283              CMP      r3,r0
000018  d904              BLS      |L9.36|
;;;845    			{
;;;846    				/* The tick count has overflowed since this function was
;;;847    				lasted called.  In this case the only time we should ever
;;;848    				actually delay is if the wake time has also	overflowed,
;;;849    				and the wake time is greater than the tick time.  When this
;;;850    				is the case it is as if neither time had overflowed. */
;;;851    				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
00001a  42a3              CMP      r3,r4
00001c  bf88              IT       HI
00001e  4284              CMPHI    r4,r0
000020  d905              BLS      |L9.46|
000022  e003              B        |L9.44|
                  |L9.36|
;;;852    				{
;;;853    					xShouldDelay = pdTRUE;
;;;854    				}
;;;855    				else
;;;856    				{
;;;857    					mtCOVERAGE_TEST_MARKER();
;;;858    				}
;;;859    			}
;;;860    			else
;;;861    			{
;;;862    				/* The tick time has not overflowed.  In this case we will
;;;863    				delay if either the wake time has overflowed, and/or the
;;;864    				tick time is less than the wake time. */
;;;865    				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
000024  42a3              CMP      r3,r4
000026  d801              BHI      |L9.44|
000028  42a0              CMP      r0,r4
00002a  d200              BCS      |L9.46|
                  |L9.44|
;;;866    				{
;;;867    					xShouldDelay = pdTRUE;
00002c  2201              MOVS     r2,#1
                  |L9.46|
;;;868    				}
;;;869    				else
;;;870    				{
;;;871    					mtCOVERAGE_TEST_MARKER();
;;;872    				}
;;;873    			}
;;;874    
;;;875    			/* Update the wake time ready for the next call. */
;;;876    			*pxPreviousWakeTime = xTimeToWake;
;;;877    
;;;878    			if( xShouldDelay != pdFALSE )
00002e  f8cc4000          STR      r4,[r12,#0]
000032  b18a              CBZ      r2,|L9.88|
;;;879    			{
;;;880    				traceTASK_DELAY_UNTIL();
;;;881    
;;;882    				/* Remove the task from the ready list before adding it to the
;;;883    				blocked list as the same list item is used for both lists. */
;;;884    				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000034  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000036  1d00              ADDS     r0,r0,#4
000038  f7fffffe          BL       uxListRemove
00003c  b948              CBNZ     r0,|L9.82|
;;;885    				{
;;;886    					/* The current task must be in a ready list, so there is
;;;887    					no need to check, and the port reset macro can be called
;;;888    					directly. */
;;;889    					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
00003e  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000040  2101              MOVS     r1,#1
000042  f890002c          LDRB     r0,[r0,#0x2c]
000046  fa01f000          LSL      r0,r1,r0
00004a  6929              LDR      r1,[r5,#0x10]  ; uxTopReadyPriority
00004c  ea210000          BIC      r0,r1,r0
000050  6128              STR      r0,[r5,#0x10]  ; uxTopReadyPriority
                  |L9.82|
;;;890    				}
;;;891    				else
;;;892    				{
;;;893    					mtCOVERAGE_TEST_MARKER();
;;;894    				}
;;;895    
;;;896    				prvAddCurrentTaskToDelayedList( xTimeToWake );
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       prvAddCurrentTaskToDelayedList
                  |L9.88|
;;;897    			}
;;;898    			else
;;;899    			{
;;;900    				mtCOVERAGE_TEST_MARKER();
;;;901    			}
;;;902    		}
;;;903    		xAlreadyYielded = xTaskResumeAll();
000058  f7fffffe          BL       xTaskResumeAll
;;;904    
;;;905    		/* Force a reschedule if xTaskResumeAll has not already done so, we may
;;;906    		have put ourselves to sleep. */
;;;907    		if( xAlreadyYielded == pdFALSE )
00005c  2800              CMP      r0,#0
;;;908    		{
;;;909    			portYIELD_WITHIN_API();
;;;910    		}
;;;911    		else
;;;912    		{
;;;913    			mtCOVERAGE_TEST_MARKER();
;;;914    		}
;;;915    	}
00005e  bf18              IT       NE
000060  bd70              POPNE    {r4-r6,pc}
000062  e8bd4070          POP      {r4-r6,lr}            ;909
000066  f7ffbffe          B.W      vPortYield
;;;916    
                          ENDP

00006a  0000              DCW      0x0000
                  |L9.108|
                          DCD      ||.data||

                          AREA ||i.vTaskDelete||, CODE, READONLY, ALIGN=2

                  vTaskDelete PROC
;;;743    
;;;744    	void vTaskDelete( TaskHandle_t xTaskToDelete )
000000  b570              PUSH     {r4-r6,lr}
;;;745    	{
000002  4604              MOV      r4,r0
;;;746    	TCB_t *pxTCB;
;;;747    
;;;748    		taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;749    		{
;;;750    			/* If null is passed in here then it is the calling task that is
;;;751    			being deleted. */
;;;752    			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
000008  4d22              LDR      r5,|L10.148|
00000a  2c00              CMP      r4,#0
00000c  bf08              IT       EQ
00000e  682c              LDREQ    r4,[r5,#0]  ; pxCurrentTCB
;;;753    
;;;754    			/* Remove task from the ready list and place in the	termination list.
;;;755    			This will stop the task from be scheduled.  The idle task will check
;;;756    			the termination list and free up any memory allocated by the
;;;757    			scheduler for the TCB and stack. */
;;;758    			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000010  1d20              ADDS     r0,r4,#4
000012  f7fffffe          BL       uxListRemove
000016  b968              CBNZ     r0,|L10.52|
;;;759    			{
;;;760    				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
000018  6ae0              LDR      r0,[r4,#0x2c]
00001a  4a1f              LDR      r2,|L10.152|
00001c  eb000180          ADD      r1,r0,r0,LSL #2
000020  f8521021          LDR      r1,[r2,r1,LSL #2]
000024  b931              CBNZ     r1,|L10.52|
000026  2101              MOVS     r1,#1
000028  fa01f000          LSL      r0,r1,r0
00002c  6929              LDR      r1,[r5,#0x10]  ; uxTopReadyPriority
00002e  ea210000          BIC      r0,r1,r0
000032  6128              STR      r0,[r5,#0x10]  ; uxTopReadyPriority
                  |L10.52|
;;;761    			}
;;;762    			else
;;;763    			{
;;;764    				mtCOVERAGE_TEST_MARKER();
;;;765    			}
;;;766    
;;;767    			/* Is the task waiting on an event also? */
;;;768    			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
000034  6aa0              LDR      r0,[r4,#0x28]
000036  2800              CMP      r0,#0
;;;769    			{
;;;770    				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
000038  bf1c              ITT      NE
00003a  f1040018          ADDNE    r0,r4,#0x18
00003e  f7fffffe          BLNE     uxListRemove
;;;771    			}
;;;772    			else
;;;773    			{
;;;774    				mtCOVERAGE_TEST_MARKER();
;;;775    			}
;;;776    
;;;777    			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
000042  1d21              ADDS     r1,r4,#4
000044  4815              LDR      r0,|L10.156|
000046  f7fffffe          BL       vListInsertEnd
;;;778    
;;;779    			/* Increment the ucTasksDeleted variable so the idle task knows
;;;780    			there is a task that has been deleted and that it should therefore
;;;781    			check the xTasksWaitingTermination list. */
;;;782    			++uxTasksDeleted;
00004a  6868              LDR      r0,[r5,#4]  ; uxTasksDeleted
00004c  1c40              ADDS     r0,r0,#1
00004e  6068              STR      r0,[r5,#4]  ; uxTasksDeleted
;;;783    
;;;784    			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
;;;785    			can detect that the task lists need re-generating. */
;;;786    			uxTaskNumber++;
000050  6a68              LDR      r0,[r5,#0x24]  ; uxTaskNumber
000052  1c40              ADDS     r0,r0,#1
;;;787    
;;;788    			traceTASK_DELETE( pxTCB );
;;;789    		}
;;;790    		taskEXIT_CRITICAL();
000054  6268              STR      r0,[r5,#0x24]  ; uxTaskNumber
000056  f7fffffe          BL       vPortExitCritical
;;;791    
;;;792    		/* Force a reschedule if it is the currently running task that has just
;;;793    		been deleted. */
;;;794    		if( xSchedulerRunning != pdFALSE )
00005a  6968              LDR      r0,[r5,#0x14]  ; xSchedulerRunning
00005c  2800              CMP      r0,#0
;;;795    		{
;;;796    			if( pxTCB == pxCurrentTCB )
;;;797    			{
;;;798    				configASSERT( uxSchedulerSuspended == 0 );
;;;799    
;;;800    				/* The pre-delete hook is primarily for the Windows simulator,
;;;801    				in which Windows specific clean up operations are performed,
;;;802    				after which it is not possible to yield away from this task -
;;;803    				hence xYieldPending is used to latch that a context switch is
;;;804    				required. */
;;;805    				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
;;;806    				portYIELD_WITHIN_API();
;;;807    			}
;;;808    			else
;;;809    			{
;;;810    				/* Reset the next expected unblock time in case it referred to
;;;811    				the task that has just been deleted. */
;;;812    				taskENTER_CRITICAL();
;;;813    				{
;;;814    					prvResetNextTaskUnblockTime();
;;;815    				}
;;;816    				taskEXIT_CRITICAL();
;;;817    			}
;;;818    		}
;;;819    	}
00005e  bf08              IT       EQ
000060  bd70              POPEQ    {r4-r6,pc}
000062  6828              LDR      r0,[r5,#0]            ;796  ; pxCurrentTCB
000064  4284              CMP      r4,r0                 ;796
000066  d103              BNE      |L10.112|
000068  e8bd4070          POP      {r4-r6,lr}            ;806
00006c  f7ffbffe          B.W      vPortYield
                  |L10.112|
000070  f7fffffe          BL       vPortEnterCritical
000074  6b28              LDR      r0,[r5,#0x30]         ;812  ; pxDelayedTaskList
000076  6800              LDR      r0,[r0,#0]            ;812
000078  2800              CMP      r0,#0                 ;812
00007a  bf0f              ITEEE    EQ                    ;812
00007c  f04f30ff          MOVEQ    r0,#0xffffffff        ;812
000080  6b28              LDRNE    r0,[r5,#0x30]         ;812  ; pxDelayedTaskList
000082  68c0              LDRNE    r0,[r0,#0xc]          ;812
000084  68c0              LDRNE    r0,[r0,#0xc]          ;812
000086  bf18              IT       NE                    ;812
000088  6840              LDRNE    r0,[r0,#4]            ;812
00008a  62a8              STR      r0,[r5,#0x28]         ;812  ; xNextTaskUnblockTime
00008c  e8bd4070          POP      {r4-r6,lr}            ;816
000090  f7ffbffe          B.W      vPortExitCritical
;;;820    
                          ENDP

                  |L10.148|
                          DCD      ||.data||
                  |L10.152|
                          DCD      ||.bss||
                  |L10.156|
                          DCD      ||.bss||+0xa0

                          AREA ||i.vTaskEndScheduler||, CODE, READONLY, ALIGN=2

                  vTaskEndScheduler PROC
;;;1620   
;;;1621   void vTaskEndScheduler( void )
000000  b510              PUSH     {r4,lr}
;;;1622   {
;;;1623   	/* Stop the scheduler interrupts and call the portable scheduler end
;;;1624   	routine so the original ISRs can be restored if necessary.  The port
;;;1625   	layer must ensure interrupts enable	bit is left in the correct state. */
;;;1626   	portDISABLE_INTERRUPTS();
000002  f7fffffe          BL       ulPortSetInterruptMask
;;;1627   	xSchedulerRunning = pdFALSE;
000006  4903              LDR      r1,|L11.20|
000008  2000              MOVS     r0,#0
00000a  6148              STR      r0,[r1,#0x14]  ; xSchedulerRunning
;;;1628   	vPortEndScheduler();
00000c  e8bd4010          POP      {r4,lr}
000010  f7ffbffe          B.W      vPortEndScheduler
;;;1629   }
;;;1630   /*----------------------------------------------------------*/
                          ENDP

                  |L11.20|
                          DCD      ||.data||

                          AREA ||i.vTaskMissedYield||, CODE, READONLY, ALIGN=2

                  vTaskMissedYield PROC
;;;2602   
;;;2603   void vTaskMissedYield( void )
000000  4901              LDR      r1,|L12.8|
;;;2604   {
;;;2605   	xYieldPending = pdTRUE;
000002  2001              MOVS     r0,#1
000004  61c8              STR      r0,[r1,#0x1c]  ; xYieldPending
;;;2606   }
000006  4770              BX       lr
;;;2607   /*-----------------------------------------------------------*/
                          ENDP

                  |L12.8|
                          DCD      ||.data||

                          AREA ||i.vTaskNotifyGiveFromISR||, CODE, READONLY, ALIGN=2

                  vTaskNotifyGiveFromISR PROC
;;;4304   
;;;4305   	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4306   	{
000004  460d              MOV      r5,r1
000006  4604              MOV      r4,r0
;;;4307   	TCB_t * pxTCB;
;;;4308   	eNotifyValue eOriginalNotifyState;
;;;4309   	UBaseType_t uxSavedInterruptStatus;
;;;4310   
;;;4311   		configASSERT( xTaskToNotify );
;;;4312   
;;;4313   		/* RTOS ports that support interrupt nesting have the concept of a
;;;4314   		maximum	system call (or maximum API call) interrupt priority.
;;;4315   		Interrupts that are	above the maximum system call priority are keep
;;;4316   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;4317   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;4318   		is defined in FreeRTOSConfig.h then
;;;4319   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;4320   		failure if a FreeRTOS API function is called from an interrupt that has
;;;4321   		been assigned a priority above the configured maximum system call
;;;4322   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;4323   		from interrupts	that have been assigned a priority at or (logically)
;;;4324   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;4325   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;4326   		simple as possible.  More information (albeit Cortex-M specific) is
;;;4327   		provided on the following link:
;;;4328   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;4329   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;4330   
;;;4331   		pxTCB = ( TCB_t * ) xTaskToNotify;
;;;4332   
;;;4333   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
000008  f7fffffe          BL       ulPortSetInterruptMask
;;;4334   		{
;;;4335   			eOriginalNotifyState = pxTCB->eNotifyState;
00000c  f8941048          LDRB     r1,[r4,#0x48]
000010  4606              MOV      r6,r0                 ;4333
;;;4336   			pxTCB->eNotifyState = eNotified;
000012  2002              MOVS     r0,#2
000014  f8840048          STRB     r0,[r4,#0x48]
;;;4337   
;;;4338   			/* 'Giving' is equivalent to incrementing a count in a counting
;;;4339   			semaphore. */
;;;4340   			( pxTCB->ulNotifiedValue )++;
000018  6c60              LDR      r0,[r4,#0x44]
00001a  1c40              ADDS     r0,r0,#1
00001c  6460              STR      r0,[r4,#0x44]
;;;4341   
;;;4342   			/* If the task is in the blocked state specifically to wait for a
;;;4343   			notification then unblock it now. */
;;;4344   			if( eOriginalNotifyState == eWaitingNotification )
00001e  2901              CMP      r1,#1
000020  d113              BNE      |L13.74|
;;;4345   			{
;;;4346   				/* The task should not have been on an event list. */
;;;4347   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
;;;4348   
;;;4349   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000022  4f14              LDR      r7,|L13.116|
000024  6af8              LDR      r0,[r7,#0x2c]  ; uxSchedulerSuspended
000026  4688              MOV      r8,r1                 ;4308
000028  2800              CMP      r0,#0
;;;4350   				{
;;;4351   					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
;;;4352   					prvAddTaskToReadyList( pxTCB );
;;;4353   				}
;;;4354   				else
;;;4355   				{
;;;4356   					/* The delayed and ready lists cannot be accessed, so hold
;;;4357   					this task pending until the scheduler is resumed. */
;;;4358   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
00002a  bf1c              ITT      NE
00002c  f1040118          ADDNE    r1,r4,#0x18
000030  4811              LDRNE    r0,|L13.120|
000032  d00f              BEQ      |L13.84|
                  |L13.52|
000034  f7fffffe          BL       vListInsertEnd
;;;4359   				}
;;;4360   
;;;4361   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
000038  6ae0              LDR      r0,[r4,#0x2c]
00003a  6839              LDR      r1,[r7,#0]  ; pxCurrentTCB
00003c  6ac9              LDR      r1,[r1,#0x2c]
00003e  4288              CMP      r0,r1
000040  d903              BLS      |L13.74|
;;;4362   				{
;;;4363   					/* The notified task has a priority above the currently
;;;4364   					executing task so a yield is required. */
;;;4365   					if( pxHigherPriorityTaskWoken != NULL )
000042  2d00              CMP      r5,#0
;;;4366   					{
;;;4367   						*pxHigherPriorityTaskWoken = pdTRUE;
000044  bf18              IT       NE
000046  f8c58000          STRNE    r8,[r5,#0]
                  |L13.74|
;;;4368   					}
;;;4369   				}
;;;4370   				else
;;;4371   				{
;;;4372   					mtCOVERAGE_TEST_MARKER();
;;;4373   				}
;;;4374   			}
;;;4375   		}
;;;4376   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
00004a  4630              MOV      r0,r6
00004c  e8bd41f0          POP      {r4-r8,lr}
000050  f7ffbffe          B.W      vPortClearInterruptMask
                  |L13.84|
000054  1d20              ADDS     r0,r4,#4              ;4351
000056  f7fffffe          BL       uxListRemove
00005a  6ae0              LDR      r0,[r4,#0x2c]         ;4352
00005c  693a              LDR      r2,[r7,#0x10]         ;4352  ; uxTopReadyPriority
00005e  fa08f100          LSL      r1,r8,r0              ;4352
000062  4311              ORRS     r1,r1,r2              ;4352
000064  6139              STR      r1,[r7,#0x10]         ;4352  ; uxTopReadyPriority
000066  4905              LDR      r1,|L13.124|
000068  eb000080          ADD      r0,r0,r0,LSL #2       ;4352
00006c  eb010080          ADD      r0,r1,r0,LSL #2       ;4352
000070  1d21              ADDS     r1,r4,#4              ;4352
000072  e7df              B        |L13.52|
;;;4377   	}
;;;4378   
                          ENDP

                  |L13.116|
                          DCD      ||.data||
                  |L13.120|
                          DCD      ||.bss||+0x8c
                  |L13.124|
                          DCD      ||.bss||

                          AREA ||i.vTaskPlaceOnEventList||, CODE, READONLY, ALIGN=2

                  vTaskPlaceOnEventList PROC
;;;2261   
;;;2262   void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;2263   {
;;;2264   TickType_t xTimeToWake;
;;;2265   
;;;2266   	configASSERT( pxEventList );
;;;2267   
;;;2268   	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
;;;2269   	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
;;;2270   
;;;2271   	/* Place the event list item of the TCB in the appropriate event list.
;;;2272   	This is placed in the list in priority order so the highest priority task
;;;2273   	is the first to be woken by the event.  The queue that contains the event
;;;2274   	list is locked, preventing simultaneous access from interrupts. */
;;;2275   	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
000002  4d12              LDR      r5,|L14.76|
000004  460c              MOV      r4,r1                 ;2263
000006  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000008  3118              ADDS     r1,r1,#0x18
00000a  f7fffffe          BL       vListInsert
;;;2276   
;;;2277   	/* The task must be removed from from the ready list before it is added to
;;;2278   	the blocked list as the same list item is used for both lists.  Exclusive
;;;2279   	access to the ready lists guaranteed because the scheduler is locked. */
;;;2280   	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
00000e  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000010  1d00              ADDS     r0,r0,#4
000012  f7fffffe          BL       uxListRemove
000016  b948              CBNZ     r0,|L14.44|
;;;2281   	{
;;;2282   		/* The current task must be in a ready list, so there is no need to
;;;2283   		check, and the port reset macro can be called directly. */
;;;2284   		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
000018  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
00001a  2101              MOVS     r1,#1
00001c  f890002c          LDRB     r0,[r0,#0x2c]
000020  fa01f000          LSL      r0,r1,r0
000024  6929              LDR      r1,[r5,#0x10]  ; uxTopReadyPriority
000026  ea210000          BIC      r0,r1,r0
00002a  6128              STR      r0,[r5,#0x10]  ; uxTopReadyPriority
                  |L14.44|
;;;2285   	}
;;;2286   	else
;;;2287   	{
;;;2288   		mtCOVERAGE_TEST_MARKER();
;;;2289   	}
;;;2290   
;;;2291   	#if ( INCLUDE_vTaskSuspend == 1 )
;;;2292   	{
;;;2293   		if( xTicksToWait == portMAX_DELAY )
00002c  f1b43fff          CMP      r4,#0xffffffff
000030  d005              BEQ      |L14.62|
;;;2294   		{
;;;2295   			/* Add the task to the suspended task list instead of a delayed task
;;;2296   			list to ensure the task is not woken by a timing event.  It will
;;;2297   			block indefinitely. */
;;;2298   			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
;;;2299   		}
;;;2300   		else
;;;2301   		{
;;;2302   			/* Calculate the time at which the task should be woken if the event
;;;2303   			does not occur.  This may overflow but this doesn't matter, the
;;;2304   			scheduler will handle it. */
;;;2305   			xTimeToWake = xTickCount + xTicksToWait;
000032  68e8              LDR      r0,[r5,#0xc]  ; xTickCount
000034  4420              ADD      r0,r0,r4
;;;2306   			prvAddCurrentTaskToDelayedList( xTimeToWake );
000036  e8bd4070          POP      {r4-r6,lr}
00003a  f7ffbffe          B.W      prvAddCurrentTaskToDelayedList
                  |L14.62|
00003e  6828              LDR      r0,[r5,#0]            ;2298  ; pxCurrentTCB
000040  e8bd4070          POP      {r4-r6,lr}            ;2298
000044  1d01              ADDS     r1,r0,#4              ;2298
000046  4802              LDR      r0,|L14.80|
000048  f7ffbffe          B.W      vListInsertEnd
;;;2307   		}
;;;2308   	}
;;;2309   	#else /* INCLUDE_vTaskSuspend */
;;;2310   	{
;;;2311   			/* Calculate the time at which the task should be woken if the event does
;;;2312   			not occur.  This may overflow but this doesn't matter, the scheduler
;;;2313   			will handle it. */
;;;2314   			xTimeToWake = xTickCount + xTicksToWait;
;;;2315   			prvAddCurrentTaskToDelayedList( xTimeToWake );
;;;2316   	}
;;;2317   	#endif /* INCLUDE_vTaskSuspend */
;;;2318   }
;;;2319   /*-----------------------------------------------------------*/
                          ENDP

                  |L14.76|
                          DCD      ||.data||
                  |L14.80|
                          DCD      ||.bss||+0xb4

                          AREA ||i.vTaskPlaceOnEventListRestricted||, CODE, READONLY, ALIGN=2

                  vTaskPlaceOnEventListRestricted PROC
;;;2388   
;;;2389   	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;2390   	{
;;;2391   	TickType_t xTimeToWake;
;;;2392   
;;;2393   		configASSERT( pxEventList );
;;;2394   
;;;2395   		/* This function should not be called by application code hence the
;;;2396   		'Restricted' in its name.  It is not part of the public API.  It is
;;;2397   		designed for use by kernel code, and has special calling requirements -
;;;2398   		it should be called with the scheduler suspended. */
;;;2399   
;;;2400   
;;;2401   		/* Place the event list item of the TCB in the appropriate event list.
;;;2402   		In this case it is assume that this is the only task that is going to
;;;2403   		be waiting on this event list, so the faster vListInsertEnd() function
;;;2404   		can be used in place of vListInsert. */
;;;2405   		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
000002  4c0d              LDR      r4,|L15.56|
000004  460d              MOV      r5,r1                 ;2390
000006  6821              LDR      r1,[r4,#0]  ; pxCurrentTCB
000008  3118              ADDS     r1,r1,#0x18
00000a  f7fffffe          BL       vListInsertEnd
;;;2406   
;;;2407   		/* We must remove this task from the ready list before adding it to the
;;;2408   		blocked list as the same list item is used for both lists.  This
;;;2409   		function is called with the scheduler locked so interrupts will not
;;;2410   		access the lists at the same time. */
;;;2411   		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
00000e  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
000010  1d00              ADDS     r0,r0,#4
000012  f7fffffe          BL       uxListRemove
000016  b948              CBNZ     r0,|L15.44|
;;;2412   		{
;;;2413   			/* The current task must be in a ready list, so there is no need to
;;;2414   			check, and the port reset macro can be called directly. */
;;;2415   			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
000018  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
00001a  2101              MOVS     r1,#1
00001c  f890002c          LDRB     r0,[r0,#0x2c]
000020  fa01f000          LSL      r0,r1,r0
000024  6921              LDR      r1,[r4,#0x10]  ; uxTopReadyPriority
000026  ea210000          BIC      r0,r1,r0
00002a  6120              STR      r0,[r4,#0x10]  ; uxTopReadyPriority
                  |L15.44|
;;;2416   		}
;;;2417   		else
;;;2418   		{
;;;2419   			mtCOVERAGE_TEST_MARKER();
;;;2420   		}
;;;2421   
;;;2422   		/* Calculate the time at which the task should be woken if the event does
;;;2423   		not occur.  This may overflow but this doesn't matter. */
;;;2424   		xTimeToWake = xTickCount + xTicksToWait;
00002c  68e0              LDR      r0,[r4,#0xc]  ; xTickCount
00002e  4428              ADD      r0,r0,r5
;;;2425   
;;;2426   		traceTASK_DELAY_UNTIL();
;;;2427   		prvAddCurrentTaskToDelayedList( xTimeToWake );
000030  e8bd4070          POP      {r4-r6,lr}
000034  f7ffbffe          B.W      prvAddCurrentTaskToDelayedList
;;;2428   	}
;;;2429   
                          ENDP

                  |L15.56|
                          DCD      ||.data||

                          AREA ||i.vTaskPlaceOnUnorderedEventList||, CODE, READONLY, ALIGN=2

                  vTaskPlaceOnUnorderedEventList PROC
;;;2320   
;;;2321   void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;2322   {
;;;2323   TickType_t xTimeToWake;
;;;2324   
;;;2325   	configASSERT( pxEventList );
;;;2326   
;;;2327   	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
;;;2328   	the event groups implementation. */
;;;2329   	configASSERT( uxSchedulerSuspended != 0 );
;;;2330   
;;;2331   	/* Store the item value in the event list item.  It is safe to access the
;;;2332   	event list item here as interrupts won't access the event list item of a
;;;2333   	task that is not in the Blocked state. */
;;;2334   	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
000002  4d14              LDR      r5,|L16.84|
000004  4614              MOV      r4,r2                 ;2322
000006  f0414100          ORR      r1,r1,#0x80000000
00000a  682a              LDR      r2,[r5,#0]  ; pxCurrentTCB
;;;2335   
;;;2336   	/* Place the event list item of the TCB at the end of the appropriate event
;;;2337   	list.  It is safe to access the event list here because it is part of an
;;;2338   	event group implementation - and interrupts don't access event groups
;;;2339   	directly (instead they access them indirectly by pending function calls to
;;;2340   	the task level). */
;;;2341   	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
00000c  6191              STR      r1,[r2,#0x18]
00000e  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000010  3118              ADDS     r1,r1,#0x18
000012  f7fffffe          BL       vListInsertEnd
;;;2342   
;;;2343   	/* The task must be removed from the ready list before it is added to the
;;;2344   	blocked list.  Exclusive access can be assured to the ready list as the
;;;2345   	scheduler is locked. */
;;;2346   	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000016  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000018  1d00              ADDS     r0,r0,#4
00001a  f7fffffe          BL       uxListRemove
00001e  b948              CBNZ     r0,|L16.52|
;;;2347   	{
;;;2348   		/* The current task must be in a ready list, so there is no need to
;;;2349   		check, and the port reset macro can be called directly. */
;;;2350   		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
000020  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000022  2101              MOVS     r1,#1
000024  f890002c          LDRB     r0,[r0,#0x2c]
000028  fa01f000          LSL      r0,r1,r0
00002c  6929              LDR      r1,[r5,#0x10]  ; uxTopReadyPriority
00002e  ea210000          BIC      r0,r1,r0
000032  6128              STR      r0,[r5,#0x10]  ; uxTopReadyPriority
                  |L16.52|
;;;2351   	}
;;;2352   	else
;;;2353   	{
;;;2354   		mtCOVERAGE_TEST_MARKER();
;;;2355   	}
;;;2356   
;;;2357   	#if ( INCLUDE_vTaskSuspend == 1 )
;;;2358   	{
;;;2359   		if( xTicksToWait == portMAX_DELAY )
000034  f1b43fff          CMP      r4,#0xffffffff
000038  d005              BEQ      |L16.70|
;;;2360   		{
;;;2361   			/* Add the task to the suspended task list instead of a delayed task
;;;2362   			list to ensure it is not woken by a timing event.  It will block
;;;2363   			indefinitely. */
;;;2364   			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
;;;2365   		}
;;;2366   		else
;;;2367   		{
;;;2368   			/* Calculate the time at which the task should be woken if the event
;;;2369   			does not occur.  This may overflow but this doesn't matter, the
;;;2370   			kernel will manage it correctly. */
;;;2371   			xTimeToWake = xTickCount + xTicksToWait;
00003a  68e8              LDR      r0,[r5,#0xc]  ; xTickCount
00003c  4420              ADD      r0,r0,r4
;;;2372   			prvAddCurrentTaskToDelayedList( xTimeToWake );
00003e  e8bd4070          POP      {r4-r6,lr}
000042  f7ffbffe          B.W      prvAddCurrentTaskToDelayedList
                  |L16.70|
000046  6828              LDR      r0,[r5,#0]            ;2364  ; pxCurrentTCB
000048  e8bd4070          POP      {r4-r6,lr}            ;2364
00004c  1d01              ADDS     r1,r0,#4              ;2364
00004e  4802              LDR      r0,|L16.88|
000050  f7ffbffe          B.W      vListInsertEnd
;;;2373   		}
;;;2374   	}
;;;2375   	#else /* INCLUDE_vTaskSuspend */
;;;2376   	{
;;;2377   			/* Calculate the time at which the task should be woken if the event does
;;;2378   			not occur.  This may overflow but this doesn't matter, the kernel
;;;2379   			will manage it correctly. */
;;;2380   			xTimeToWake = xTickCount + xTicksToWait;
;;;2381   			prvAddCurrentTaskToDelayedList( xTimeToWake );
;;;2382   	}
;;;2383   	#endif /* INCLUDE_vTaskSuspend */
;;;2384   }
;;;2385   /*-----------------------------------------------------------*/
                          ENDP

                  |L16.84|
                          DCD      ||.data||
                  |L16.88|
                          DCD      ||.bss||+0xb4

                          AREA ||i.vTaskPrioritySet||, CODE, READONLY, ALIGN=2

                  vTaskPrioritySet PROC
;;;1119   
;;;1120   	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1121   	{
;;;1122   	TCB_t *pxTCB;
;;;1123   	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
;;;1124   	BaseType_t xYieldRequired = pdFALSE;
000004  2600              MOVS     r6,#0
000006  460d              MOV      r5,r1                 ;1121
000008  4604              MOV      r4,r0                 ;1121
;;;1125   
;;;1126   		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
;;;1127   
;;;1128   		/* Ensure the new priority is valid. */
;;;1129   		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
00000a  2905              CMP      r1,#5
;;;1130   		{
;;;1131   			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
00000c  bf28              IT       CS
00000e  2504              MOVCS    r5,#4
;;;1132   		}
;;;1133   		else
;;;1134   		{
;;;1135   			mtCOVERAGE_TEST_MARKER();
;;;1136   		}
;;;1137   
;;;1138   		taskENTER_CRITICAL();
000010  f7fffffe          BL       vPortEnterCritical
;;;1139   		{
;;;1140   			/* If null is passed in here then it is the priority of the calling
;;;1141   			task that is being changed. */
;;;1142   			pxTCB = prvGetTCBFromHandle( xTask );
000014  f8df8094          LDR      r8,|L17.172|
000018  2c00              CMP      r4,#0
00001a  bf08              IT       EQ
00001c  f8d84000          LDREQ    r4,[r8,#0]  ; pxCurrentTCB
;;;1143   
;;;1144   			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
;;;1145   
;;;1146   			#if ( configUSE_MUTEXES == 1 )
;;;1147   			{
;;;1148   				uxCurrentBasePriority = pxTCB->uxBasePriority;
;;;1149   			}
;;;1150   			#else
;;;1151   			{
;;;1152   				uxCurrentBasePriority = pxTCB->uxPriority;
;;;1153   			}
;;;1154   			#endif
;;;1155   
;;;1156   			if( uxCurrentBasePriority != uxNewPriority )
000020  6ae7              LDR      r7,[r4,#0x2c]
000022  42af              CMP      r7,r5
000024  d03d              BEQ      |L17.162|
;;;1157   			{
;;;1158   				/* The priority change may have readied a task of higher
;;;1159   				priority than the calling task. */
;;;1160   				if( uxNewPriority > uxCurrentBasePriority )
;;;1161   				{
;;;1162   					if( pxTCB != pxCurrentTCB )
;;;1163   					{
;;;1164   						/* The priority of a task other than the currently
;;;1165   						running task is being raised.  Is the priority being
;;;1166   						raised above that of the running task? */
;;;1167   						if( uxNewPriority >= pxCurrentTCB->uxPriority )
;;;1168   						{
;;;1169   							xYieldRequired = pdTRUE;
;;;1170   						}
;;;1171   						else
;;;1172   						{
;;;1173   							mtCOVERAGE_TEST_MARKER();
;;;1174   						}
;;;1175   					}
;;;1176   					else
;;;1177   					{
;;;1178   						/* The priority of the running task is being raised,
;;;1179   						but the running task must already be the highest
;;;1180   						priority task able to run so no yield is required. */
;;;1181   					}
;;;1182   				}
;;;1183   				else if( pxTCB == pxCurrentTCB )
000026  f8d80000          LDR      r0,[r8,#0]  ; pxCurrentTCB
00002a  42bd              CMP      r5,r7                 ;1160
00002c  d907              BLS      |L17.62|
00002e  4284              CMP      r4,r0                 ;1162
000030  d008              BEQ      |L17.68|
000032  f8d80000          LDR      r0,[r8,#0]            ;1167  ; pxCurrentTCB
000036  6ac0              LDR      r0,[r0,#0x2c]         ;1167
000038  42a8              CMP      r0,r5                 ;1167
00003a  d902              BLS      |L17.66|
00003c  e002              B        |L17.68|
                  |L17.62|
00003e  4284              CMP      r4,r0
000040  d100              BNE      |L17.68|
                  |L17.66|
;;;1184   				{
;;;1185   					/* Setting the priority of the running task down means
;;;1186   					there may now be another task of higher priority that
;;;1187   					is ready to execute. */
;;;1188   					xYieldRequired = pdTRUE;
000042  2601              MOVS     r6,#1
                  |L17.68|
;;;1189   				}
;;;1190   				else
;;;1191   				{
;;;1192   					/* Setting the priority of any other task down does not
;;;1193   					require a yield as the running task must be above the
;;;1194   					new priority of the task being modified. */
;;;1195   				}
;;;1196   
;;;1197   				/* Remember the ready list the task might be referenced from
;;;1198   				before its uxPriority member is changed so the
;;;1199   				taskRESET_READY_PRIORITY() macro can function correctly. */
;;;1200   				uxPriorityUsedOnEntry = pxTCB->uxPriority;
;;;1201   
;;;1202   				#if ( configUSE_MUTEXES == 1 )
;;;1203   				{
;;;1204   					/* Only change the priority being used if the task is not
;;;1205   					currently using an inherited priority. */
;;;1206   					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
;;;1207   					{
;;;1208   						pxTCB->uxPriority = uxNewPriority;
;;;1209   					}
;;;1210   					else
;;;1211   					{
;;;1212   						mtCOVERAGE_TEST_MARKER();
;;;1213   					}
;;;1214   
;;;1215   					/* The base priority gets set whatever. */
;;;1216   					pxTCB->uxBasePriority = uxNewPriority;
;;;1217   				}
;;;1218   				#else
;;;1219   				{
;;;1220   					pxTCB->uxPriority = uxNewPriority;
;;;1221   				}
;;;1222   				#endif
;;;1223   
;;;1224   				/* Only reset the event list item value if the value is not
;;;1225   				being used for anything else. */
;;;1226   				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
000044  62e5              STR      r5,[r4,#0x2c]
000046  69a0              LDR      r0,[r4,#0x18]
000048  f0104f00          TST      r0,#0x80000000
;;;1227   				{
;;;1228   					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
00004c  bf04              ITT      EQ
00004e  f1c50005          RSBEQ    r0,r5,#5
000052  61a0              STREQ    r0,[r4,#0x18]
;;;1229   				}
;;;1230   				else
;;;1231   				{
;;;1232   					mtCOVERAGE_TEST_MARKER();
;;;1233   				}
;;;1234   
;;;1235   				/* If the task is in the blocked or suspended list we need do
;;;1236   				nothing more than change it's priority variable. However, if
;;;1237   				the task is in a ready list it needs to be removed and placed
;;;1238   				in the list appropriate to its new priority. */
;;;1239   				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
000054  eb070187          ADD      r1,r7,r7,LSL #2
000058  4d15              LDR      r5,|L17.176|
00005a  6960              LDR      r0,[r4,#0x14]
00005c  eb050181          ADD      r1,r5,r1,LSL #2
000060  4288              CMP      r0,r1
000062  d11a              BNE      |L17.154|
;;;1240   				{
;;;1241   					/* The task is currently in its ready list - remove before adding
;;;1242   					it to it's new ready list.  As we are in a critical section we
;;;1243   					can do this even if the scheduler is suspended. */
;;;1244   					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000064  1d20              ADDS     r0,r4,#4
000066  f7fffffe          BL       uxListRemove
00006a  2101              MOVS     r1,#1                 ;1169
00006c  b938              CBNZ     r0,|L17.126|
;;;1245   					{
;;;1246   						/* It is known that the task is in its ready list so
;;;1247   						there is no need to check again and the port level
;;;1248   						reset macro can be called directly. */
;;;1249   						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
00006e  f8d82010          LDR      r2,[r8,#0x10]  ; uxTopReadyPriority
000072  fa01f007          LSL      r0,r1,r7
000076  ea220000          BIC      r0,r2,r0
00007a  f8c80010          STR      r0,[r8,#0x10]  ; uxTopReadyPriority
                  |L17.126|
;;;1250   					}
;;;1251   					else
;;;1252   					{
;;;1253   						mtCOVERAGE_TEST_MARKER();
;;;1254   					}
;;;1255   					prvAddTaskToReadyList( pxTCB );
00007e  6ae0              LDR      r0,[r4,#0x2c]
000080  f8d82010          LDR      r2,[r8,#0x10]  ; uxTopReadyPriority
000084  4081              LSLS     r1,r1,r0
000086  4311              ORRS     r1,r1,r2
000088  f8c81010          STR      r1,[r8,#0x10]  ; uxTopReadyPriority
00008c  eb000080          ADD      r0,r0,r0,LSL #2
000090  eb050080          ADD      r0,r5,r0,LSL #2
000094  1d21              ADDS     r1,r4,#4
000096  f7fffffe          BL       vListInsertEnd
                  |L17.154|
;;;1256   				}
;;;1257   				else
;;;1258   				{
;;;1259   					mtCOVERAGE_TEST_MARKER();
;;;1260   				}
;;;1261   
;;;1262   				if( xYieldRequired == pdTRUE )
00009a  2e00              CMP      r6,#0
;;;1263   				{
;;;1264   					taskYIELD_IF_USING_PREEMPTION();
00009c  bf18              IT       NE
00009e  f7fffffe          BLNE     vPortYield
                  |L17.162|
;;;1265   				}
;;;1266   				else
;;;1267   				{
;;;1268   					mtCOVERAGE_TEST_MARKER();
;;;1269   				}
;;;1270   
;;;1271   				/* Remove compiler warning about unused variables when the port
;;;1272   				optimised task selection is not being used. */
;;;1273   				( void ) uxPriorityUsedOnEntry;
;;;1274   			}
;;;1275   		}
;;;1276   		taskEXIT_CRITICAL();
0000a2  e8bd41f0          POP      {r4-r8,lr}
0000a6  f7ffbffe          B.W      vPortExitCritical
;;;1277   	}
;;;1278   
                          ENDP

0000aa  0000              DCW      0x0000
                  |L17.172|
                          DCD      ||.data||
                  |L17.176|
                          DCD      ||.bss||

                          AREA ||i.vTaskResume||, CODE, READONLY, ALIGN=2

                  vTaskResume PROC
;;;1418   
;;;1419   	void vTaskResume( TaskHandle_t xTaskToResume )
000000  2800              CMP      r0,#0
;;;1420   	{
;;;1421   	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
;;;1422   
;;;1423   		/* It does not make sense to resume the calling task. */
;;;1424   		configASSERT( xTaskToResume );
;;;1425   
;;;1426   		/* The parameter cannot be NULL as it is impossible to resume the
;;;1427   		currently executing task. */
;;;1428   		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
;;;1429   		{
;;;1430   			taskENTER_CRITICAL();
;;;1431   			{
;;;1432   				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
;;;1433   				{
;;;1434   					traceTASK_RESUME( pxTCB );
;;;1435   
;;;1436   					/* As we are in a critical section we can access the ready
;;;1437   					lists even if the scheduler is suspended. */
;;;1438   					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
;;;1439   					prvAddTaskToReadyList( pxTCB );
;;;1440   
;;;1441   					/* We may have just resumed a higher priority task. */
;;;1442   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
;;;1443   					{
;;;1444   						/* This yield may not cause the task just resumed to run,
;;;1445   						but will leave the lists in the correct state for the
;;;1446   						next yield. */
;;;1447   						taskYIELD_IF_USING_PREEMPTION();
;;;1448   					}
;;;1449   					else
;;;1450   					{
;;;1451   						mtCOVERAGE_TEST_MARKER();
;;;1452   					}
;;;1453   				}
;;;1454   				else
;;;1455   				{
;;;1456   					mtCOVERAGE_TEST_MARKER();
;;;1457   				}
;;;1458   			}
;;;1459   			taskEXIT_CRITICAL();
;;;1460   		}
;;;1461   		else
;;;1462   		{
;;;1463   			mtCOVERAGE_TEST_MARKER();
;;;1464   		}
;;;1465   	}
000002  bf08              IT       EQ
000004  4770              BXEQ     lr
000006  b570              PUSH     {r4-r6,lr}            ;1420
000008  4d16              LDR      r5,|L18.100|
00000a  4604              MOV      r4,r0                 ;1420
00000c  6828              LDR      r0,[r5,#0]            ;1428  ; pxCurrentTCB
00000e  4284              CMP      r4,r0                 ;1428
000010  bf08              IT       EQ
000012  bd70              POPEQ    {r4-r6,pc}
000014  f7fffffe          BL       vPortEnterCritical
000018  4913              LDR      r1,|L18.104|
00001a  6960              LDR      r0,[r4,#0x14]         ;1430
00001c  4288              CMP      r0,r1                 ;1430
00001e  d11c              BNE      |L18.90|
000020  6aa0              LDR      r0,[r4,#0x28]         ;1430
000022  3928              SUBS     r1,r1,#0x28           ;1430
000024  4288              CMP      r0,r1                 ;1430
000026  d018              BEQ      |L18.90|
000028  b9b8              CBNZ     r0,|L18.90|
00002a  1d20              ADDS     r0,r4,#4              ;1438
00002c  f7fffffe          BL       uxListRemove
000030  6ae0              LDR      r0,[r4,#0x2c]         ;1439
000032  2101              MOVS     r1,#1                 ;1439
000034  692a              LDR      r2,[r5,#0x10]         ;1439  ; uxTopReadyPriority
000036  4081              LSLS     r1,r1,r0              ;1439
000038  4311              ORRS     r1,r1,r2              ;1439
00003a  6129              STR      r1,[r5,#0x10]         ;1439  ; uxTopReadyPriority
00003c  490b              LDR      r1,|L18.108|
00003e  eb000080          ADD      r0,r0,r0,LSL #2       ;1439
000042  eb010080          ADD      r0,r1,r0,LSL #2       ;1439
000046  1d21              ADDS     r1,r4,#4              ;1439
000048  f7fffffe          BL       vListInsertEnd
00004c  6ae0              LDR      r0,[r4,#0x2c]         ;1442
00004e  6829              LDR      r1,[r5,#0]            ;1442  ; pxCurrentTCB
000050  6ac9              LDR      r1,[r1,#0x2c]         ;1442
000052  4288              CMP      r0,r1                 ;1442
000054  bf28              IT       CS                    ;1447
000056  f7fffffe          BLCS     vPortYield
                  |L18.90|
00005a  e8bd4070          POP      {r4-r6,lr}            ;1459
00005e  f7ffbffe          B.W      vPortExitCritical
;;;1466   
                          ENDP

000062  0000              DCW      0x0000
                  |L18.100|
                          DCD      ||.data||
                  |L18.104|
                          DCD      ||.bss||+0xb4
                  |L18.108|
                          DCD      ||.bss||

                          AREA ||i.vTaskSetTimeOutState||, CODE, READONLY, ALIGN=2

                  vTaskSetTimeOutState PROC
;;;2545   
;;;2546   void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
000000  4902              LDR      r1,|L19.12|
;;;2547   {
;;;2548   	configASSERT( pxTimeOut );
;;;2549   	pxTimeOut->xOverflowCount = xNumOfOverflows;
000002  6a0a              LDR      r2,[r1,#0x20]  ; xNumOfOverflows
;;;2550   	pxTimeOut->xTimeOnEntering = xTickCount;
000004  6002              STR      r2,[r0,#0]
000006  68c9              LDR      r1,[r1,#0xc]  ; xTickCount
000008  6041              STR      r1,[r0,#4]
;;;2551   }
00000a  4770              BX       lr
;;;2552   /*-----------------------------------------------------------*/
                          ENDP

                  |L19.12|
                          DCD      ||.data||

                          AREA ||i.vTaskStartScheduler||, CODE, READONLY, ALIGN=2

                  vTaskStartScheduler PROC
;;;1542   
;;;1543   void vTaskStartScheduler( void )
000000  b510              PUSH     {r4,lr}
;;;1544   {
000002  b084              SUB      sp,sp,#0x10
;;;1545   BaseType_t xReturn;
;;;1546   
;;;1547   	/* Add the idle task at the lowest priority. */
;;;1548   	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
;;;1549   	{
;;;1550   		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
;;;1551   		be returned by the xTaskGetIdleTaskHandle() function. */
;;;1552   		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
;;;1553   	}
;;;1554   	#else
;;;1555   	{
;;;1556   		/* Create the idle task without storing its handle. */
;;;1557   		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
000004  2400              MOVS     r4,#0
000006  9400              STR      r4,[sp,#0]
000008  9401              STR      r4,[sp,#4]
00000a  9402              STR      r4,[sp,#8]
00000c  4623              MOV      r3,r4
00000e  2280              MOVS     r2,#0x80
000010  a10c              ADR      r1,|L20.68|
000012  480e              LDR      r0,|L20.76|
000014  9403              STR      r4,[sp,#0xc]
000016  f7fffffe          BL       xTaskGenericCreate
;;;1558   	}
;;;1559   	#endif /* INCLUDE_xTaskGetIdleTaskHandle */
;;;1560   
;;;1561   	#if ( configUSE_TIMERS == 1 )
;;;1562   	{
;;;1563   		if( xReturn == pdPASS )
00001a  2801              CMP      r0,#1
;;;1564   		{
;;;1565   			xReturn = xTimerCreateTimerTask();
;;;1566   		}
;;;1567   		else
;;;1568   		{
;;;1569   			mtCOVERAGE_TEST_MARKER();
;;;1570   		}
;;;1571   	}
;;;1572   	#endif /* configUSE_TIMERS */
;;;1573   
;;;1574   	if( xReturn == pdPASS )
;;;1575   	{
;;;1576   		/* Interrupts are turned off here, to ensure a tick does not occur
;;;1577   		before or during the call to xPortStartScheduler().  The stacks of
;;;1578   		the created tasks contain a status word with interrupts switched on
;;;1579   		so interrupts will automatically get re-enabled when the first task
;;;1580   		starts to run. */
;;;1581   		portDISABLE_INTERRUPTS();
;;;1582   
;;;1583   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;1584   		{
;;;1585   			/* Switch Newlib's _impure_ptr variable to point to the _reent
;;;1586   			structure specific to the task that will run first. */
;;;1587   			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
;;;1588   		}
;;;1589   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;1590   
;;;1591   		xSchedulerRunning = pdTRUE;
;;;1592   		xTickCount = ( TickType_t ) 0U;
;;;1593   
;;;1594   		/* If configGENERATE_RUN_TIME_STATS is defined then the following
;;;1595   		macro must be defined to configure the timer/counter used to generate
;;;1596   		the run time counter time base. */
;;;1597   		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
;;;1598   
;;;1599   		/* Setting up the timer tick is hardware specific and thus in the
;;;1600   		portable interface. */
;;;1601   		if( xPortStartScheduler() != pdFALSE )
;;;1602   		{
;;;1603   			/* Should not reach here as if the scheduler is running the
;;;1604   			function will not return. */
;;;1605   		}
;;;1606   		else
;;;1607   		{
;;;1608   			/* Should only reach here if a task calls xTaskEndScheduler(). */
;;;1609   		}
;;;1610   	}
;;;1611   	else
;;;1612   	{
;;;1613   		/* This line will only be reached if the kernel could not be started,
;;;1614   		because there was not enough FreeRTOS heap to create the idle task
;;;1615   		or the timer task. */
;;;1616   		configASSERT( xReturn );
;;;1617   	}
;;;1618   }
00001c  bf1c              ITT      NE
00001e  b004              ADDNE    sp,sp,#0x10
000020  bd10              POPNE    {r4,pc}
000022  f7fffffe          BL       xTimerCreateTimerTask
000026  2801              CMP      r0,#1                 ;1574
000028  bf1c              ITT      NE
00002a  b004              ADDNE    sp,sp,#0x10
00002c  bd10              POPNE    {r4,pc}
00002e  f7fffffe          BL       ulPortSetInterruptMask
000032  4807              LDR      r0,|L20.80|
000034  2101              MOVS     r1,#1                 ;1591
000036  6141              STR      r1,[r0,#0x14]         ;1591  ; xSchedulerRunning
000038  60c4              STR      r4,[r0,#0xc]          ;1592  ; xTickCount
00003a  b004              ADD      sp,sp,#0x10           ;1601
00003c  e8bd4010          POP      {r4,lr}               ;1601
000040  f7ffbffe          B.W      xPortStartScheduler
;;;1619   /*-----------------------------------------------------------*/
                          ENDP

                  |L20.68|
000044  49444c45          DCB      "IDLE",0
000048  00      
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0
                  |L20.76|
                          DCD      prvIdleTask
                  |L20.80|
                          DCD      ||.data||

                          AREA ||i.vTaskSuspend||, CODE, READONLY, ALIGN=2

                  vTaskSuspend PROC
;;;1283   
;;;1284   	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1285   	{
000004  4604              MOV      r4,r0
;;;1286   	TCB_t *pxTCB;
;;;1287   
;;;1288   		taskENTER_CRITICAL();
000006  f7fffffe          BL       vPortEnterCritical
;;;1289   		{
;;;1290   			/* If null is passed in here then it is the running task that is
;;;1291   			being suspended. */
;;;1292   			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
00000a  4d34              LDR      r5,|L21.220|
00000c  2c00              CMP      r4,#0
00000e  bf08              IT       EQ
000010  682c              LDREQ    r4,[r5,#0]  ; pxCurrentTCB
;;;1293   
;;;1294   			traceTASK_SUSPEND( pxTCB );
;;;1295   
;;;1296   			/* Remove task from the ready/delayed list and place in the
;;;1297   			suspended list. */
;;;1298   			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000012  1d20              ADDS     r0,r4,#4
000014  f7fffffe          BL       uxListRemove
;;;1299   			{
;;;1300   				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
000018  4e31              LDR      r6,|L21.224|
00001a  2701              MOVS     r7,#1
00001c  b958              CBNZ     r0,|L21.54|
00001e  6ae0              LDR      r0,[r4,#0x2c]
000020  eb000180          ADD      r1,r0,r0,LSL #2
000024  f8561021          LDR      r1,[r6,r1,LSL #2]
000028  b929              CBNZ     r1,|L21.54|
00002a  6929              LDR      r1,[r5,#0x10]  ; uxTopReadyPriority
00002c  fa07f000          LSL      r0,r7,r0
000030  ea210000          BIC      r0,r1,r0
000034  6128              STR      r0,[r5,#0x10]  ; uxTopReadyPriority
                  |L21.54|
;;;1301   			}
;;;1302   			else
;;;1303   			{
;;;1304   				mtCOVERAGE_TEST_MARKER();
;;;1305   			}
;;;1306   
;;;1307   			/* Is the task waiting on an event also? */
;;;1308   			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
000036  6aa0              LDR      r0,[r4,#0x28]
000038  2800              CMP      r0,#0
;;;1309   			{
;;;1310   				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
00003a  bf1c              ITT      NE
00003c  f1040018          ADDNE    r0,r4,#0x18
000040  f7fffffe          BLNE     uxListRemove
;;;1311   			}
;;;1312   			else
;;;1313   			{
;;;1314   				mtCOVERAGE_TEST_MARKER();
;;;1315   			}
;;;1316   
;;;1317   			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
000044  1d21              ADDS     r1,r4,#4
000046  4827              LDR      r0,|L21.228|
000048  f7fffffe          BL       vListInsertEnd
;;;1318   		}
;;;1319   		taskEXIT_CRITICAL();
00004c  f7fffffe          BL       vPortExitCritical
;;;1320   
;;;1321   		if( pxTCB == pxCurrentTCB )
000050  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000052  4284              CMP      r4,r0
;;;1322   		{
;;;1323   			if( xSchedulerRunning != pdFALSE )
;;;1324   			{
;;;1325   				/* The current task has just been suspended. */
;;;1326   				configASSERT( uxSchedulerSuspended == 0 );
;;;1327   				portYIELD_WITHIN_API();
;;;1328   			}
;;;1329   			else
;;;1330   			{
;;;1331   				/* The scheduler is not running, but the task that was pointed
;;;1332   				to by pxCurrentTCB has just been suspended and pxCurrentTCB
;;;1333   				must be adjusted to point to a different task. */
;;;1334   				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
;;;1335   				{
;;;1336   					/* No other tasks are ready, so set pxCurrentTCB back to
;;;1337   					NULL so when the next task is created pxCurrentTCB will
;;;1338   					be set to point to it no matter what its relative priority
;;;1339   					is. */
;;;1340   					pxCurrentTCB = NULL;
;;;1341   				}
;;;1342   				else
;;;1343   				{
;;;1344   					vTaskSwitchContext();
;;;1345   				}
;;;1346   			}
;;;1347   		}
;;;1348   		else
;;;1349   		{
;;;1350   			if( xSchedulerRunning != pdFALSE )
000054  6968              LDR      r0,[r5,#0x14]  ; xSchedulerRunning
000056  d12a              BNE      |L21.174|
000058  b118              CBZ      r0,|L21.98|
00005a  e8bd41f0          POP      {r4-r8,lr}            ;1327
00005e  f7ffbffe          B.W      vPortYield
                  |L21.98|
000062  4820              LDR      r0,|L21.228|
000064  68aa              LDR      r2,[r5,#8]            ;1334  ; uxCurrentNumberOfTasks
000066  6801              LDR      r1,[r0,#0]            ;1334  ; xSuspendedTaskList
000068  2000              MOVS     r0,#0                 ;1334
00006a  4291              CMP      r1,r2                 ;1334
00006c  bf04              ITT      EQ                    ;1340
00006e  6028              STREQ    r0,[r5,#0]            ;1340  ; pxCurrentTCB
;;;1351   			{
;;;1352   				/* A task other than the currently running task was suspended,
;;;1353   				reset the next expected unblock time in case it referred to the
;;;1354   				task that is now in the Suspended state. */
;;;1355   				taskENTER_CRITICAL();
;;;1356   				{
;;;1357   					prvResetNextTaskUnblockTime();
;;;1358   				}
;;;1359   				taskEXIT_CRITICAL();
;;;1360   			}
;;;1361   			else
;;;1362   			{
;;;1363   				mtCOVERAGE_TEST_MARKER();
;;;1364   			}
;;;1365   		}
;;;1366   	}
000070  e8bd81f0          POPEQ    {r4-r8,pc}
000074  6ae9              LDR      r1,[r5,#0x2c]  ; uxSchedulerSuspended
000076  2900              CMP      r1,#0
000078  bf1c              ITT      NE
00007a  61ef              STRNE    r7,[r5,#0x1c]  ; xYieldPending
00007c  e8bd81f0          POPNE    {r4-r8,pc}
000080  61e8              STR      r0,[r5,#0x1c]  ; xYieldPending
000082  6928              LDR      r0,[r5,#0x10]  ; uxTopReadyPriority
000084  fab0f080          CLZ      r0,r0
000088  f1c0001f          RSB      r0,r0,#0x1f
00008c  eb000080          ADD      r0,r0,r0,LSL #2
000090  eb060080          ADD      r0,r6,r0,LSL #2
000094  f1000208          ADD      r2,r0,#8
000098  6841              LDR      r1,[r0,#4]
00009a  6849              LDR      r1,[r1,#4]
00009c  6041              STR      r1,[r0,#4]
00009e  4291              CMP      r1,r2
0000a0  bf04              ITT      EQ
0000a2  6849              LDREQ    r1,[r1,#4]
0000a4  6041              STREQ    r1,[r0,#4]
0000a6  68c8              LDR      r0,[r1,#0xc]
0000a8  6028              STR      r0,[r5,#0]  ; pxCurrentTCB
0000aa  e8bd81f0          POP      {r4-r8,pc}
                  |L21.174|
0000ae  2800              CMP      r0,#0                 ;1350
0000b0  bf08              IT       EQ
0000b2  e8bd81f0          POPEQ    {r4-r8,pc}
0000b6  f7fffffe          BL       vPortEnterCritical
0000ba  6b28              LDR      r0,[r5,#0x30]         ;1355  ; pxDelayedTaskList
0000bc  6800              LDR      r0,[r0,#0]            ;1355
0000be  2800              CMP      r0,#0                 ;1355
0000c0  bf0f              ITEEE    EQ                    ;1355
0000c2  f04f30ff          MOVEQ    r0,#0xffffffff        ;1355
0000c6  6b28              LDRNE    r0,[r5,#0x30]         ;1355  ; pxDelayedTaskList
0000c8  68c0              LDRNE    r0,[r0,#0xc]          ;1355
0000ca  68c0              LDRNE    r0,[r0,#0xc]          ;1355
0000cc  bf18              IT       NE                    ;1355
0000ce  6840              LDRNE    r0,[r0,#4]            ;1355
0000d0  62a8              STR      r0,[r5,#0x28]         ;1355  ; xNextTaskUnblockTime
0000d2  e8bd41f0          POP      {r4-r8,lr}            ;1359
0000d6  f7ffbffe          B.W      vPortExitCritical
;;;1367   
                          ENDP

0000da  0000              DCW      0x0000
                  |L21.220|
                          DCD      ||.data||
                  |L21.224|
                          DCD      ||.bss||
                  |L21.228|
                          DCD      ||.bss||+0xb4

                          AREA ||i.vTaskSuspendAll||, CODE, READONLY, ALIGN=2

                  vTaskSuspendAll PROC
;;;1631   
;;;1632   void vTaskSuspendAll( void )
000000  4802              LDR      r0,|L22.12|
;;;1633   {
;;;1634   	/* A critical section is not required as the variable is of type
;;;1635   	BaseType_t.  Please read Richard Barry's reply in the following link to a
;;;1636   	post in the FreeRTOS support forum before reporting this as a bug! -
;;;1637   	http://goo.gl/wu4acr */
;;;1638   	++uxSchedulerSuspended;
000002  6ac1              LDR      r1,[r0,#0x2c]  ; uxSchedulerSuspended
000004  1c49              ADDS     r1,r1,#1
000006  62c1              STR      r1,[r0,#0x2c]  ; uxSchedulerSuspended
;;;1639   }
000008  4770              BX       lr
;;;1640   /*----------------------------------------------------------*/
                          ENDP

00000a  0000              DCW      0x0000
                  |L22.12|
                          DCD      ||.data||

                          AREA ||i.vTaskSwitchContext||, CODE, READONLY, ALIGN=2

                  vTaskSwitchContext PROC
;;;2201   
;;;2202   void vTaskSwitchContext( void )
000000  4a0f              LDR      r2,|L23.64|
;;;2203   {
;;;2204   	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
000002  6ad0              LDR      r0,[r2,#0x2c]  ; uxSchedulerSuspended
000004  2800              CMP      r0,#0
;;;2205   	{
;;;2206   		/* The scheduler is currently suspended - do not allow a context
;;;2207   		switch. */
;;;2208   		xYieldPending = pdTRUE;
000006  bf1e              ITTT     NE
000008  2001              MOVNE    r0,#1
00000a  61d0              STRNE    r0,[r2,#0x1c]  ; xYieldPending
;;;2209   	}
;;;2210   	else
;;;2211   	{
;;;2212   		xYieldPending = pdFALSE;
;;;2213   		traceTASK_SWITCHED_OUT();
;;;2214   
;;;2215   		#if ( configGENERATE_RUN_TIME_STATS == 1 )
;;;2216   		{
;;;2217   				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
;;;2218   					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
;;;2219   				#else
;;;2220   					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
;;;2221   				#endif
;;;2222   
;;;2223   				/* Add the amount of time the task has been running to the
;;;2224   				accumulated	time so far.  The time the task started running was
;;;2225   				stored in ulTaskSwitchedInTime.  Note that there is no overflow
;;;2226   				protection here	so count values are only valid until the timer
;;;2227   				overflows.  The guard against negative values is to protect
;;;2228   				against suspect run time stat counter implementations - which
;;;2229   				are provided by the application, not the kernel. */
;;;2230   				if( ulTotalRunTime > ulTaskSwitchedInTime )
;;;2231   				{
;;;2232   					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
;;;2233   				}
;;;2234   				else
;;;2235   				{
;;;2236   					mtCOVERAGE_TEST_MARKER();
;;;2237   				}
;;;2238   				ulTaskSwitchedInTime = ulTotalRunTime;
;;;2239   		}
;;;2240   		#endif /* configGENERATE_RUN_TIME_STATS */
;;;2241   
;;;2242   		/* Check for stack overflow, if configured. */
;;;2243   		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
;;;2244   		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
;;;2245   
;;;2246   		/* Select a new task to run using either the generic C or port
;;;2247   		optimised asm code. */
;;;2248   		taskSELECT_HIGHEST_PRIORITY_TASK();
;;;2249   		traceTASK_SWITCHED_IN();
;;;2250   
;;;2251   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;2252   		{
;;;2253   			/* Switch Newlib's _impure_ptr variable to point to the _reent
;;;2254   			structure specific to this task. */
;;;2255   			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
;;;2256   		}
;;;2257   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;2258   	}
;;;2259   }
00000c  4770              BXNE     lr
00000e  2000              MOVS     r0,#0                 ;2212
000010  61d0              STR      r0,[r2,#0x1c]         ;2212  ; xYieldPending
000012  6910              LDR      r0,[r2,#0x10]         ;2248  ; uxTopReadyPriority
000014  490b              LDR      r1,|L23.68|
000016  fab0f080          CLZ      r0,r0                 ;2248
00001a  f1c0001f          RSB      r0,r0,#0x1f           ;2248
00001e  eb000080          ADD      r0,r0,r0,LSL #2       ;2248
000022  eb010080          ADD      r0,r1,r0,LSL #2       ;2248
000026  f1000308          ADD      r3,r0,#8              ;2248
00002a  6841              LDR      r1,[r0,#4]            ;2248
00002c  6849              LDR      r1,[r1,#4]            ;2248
00002e  6041              STR      r1,[r0,#4]            ;2248
000030  4299              CMP      r1,r3                 ;2248
000032  bf04              ITT      EQ                    ;2248
000034  6849              LDREQ    r1,[r1,#4]            ;2248
000036  6041              STREQ    r1,[r0,#4]            ;2248
000038  68c8              LDR      r0,[r1,#0xc]          ;2248
00003a  6010              STR      r0,[r2,#0]            ;2248  ; pxCurrentTCB
00003c  4770              BX       lr
;;;2260   /*-----------------------------------------------------------*/
                          ENDP

00003e  0000              DCW      0x0000
                  |L23.64|
                          DCD      ||.data||
                  |L23.68|
                          DCD      ||.bss||

                          AREA ||i.xTaskCheckForTimeOut||, CODE, READONLY, ALIGN=2

                  xTaskCheckForTimeOut PROC
;;;2553   
;;;2554   BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;2555   {
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;2556   BaseType_t xReturn;
;;;2557   
;;;2558   	configASSERT( pxTimeOut );
;;;2559   	configASSERT( pxTicksToWait );
;;;2560   
;;;2561   	taskENTER_CRITICAL();
000006  f7fffffe          BL       vPortEnterCritical
;;;2562   	{
;;;2563   		/* Minor optimisation.  The tick count cannot change in this block. */
;;;2564   		const TickType_t xConstTickCount = xTickCount;
00000a  4910              LDR      r1,|L24.76|
00000c  68ca              LDR      r2,[r1,#0xc]  ; xTickCount
;;;2565   
;;;2566   		#if ( INCLUDE_vTaskSuspend == 1 )
;;;2567   			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
;;;2568   			the maximum block time then the task should block indefinitely, and
;;;2569   			therefore never time out. */
;;;2570   			if( *pxTicksToWait == portMAX_DELAY )
00000e  6828              LDR      r0,[r5,#0]
000010  f1b03fff          CMP      r0,#0xffffffff
;;;2571   			{
;;;2572   				xReturn = pdFALSE;
000014  bf08              IT       EQ
000016  2400              MOVEQ    r4,#0
000018  d014              BEQ      |L24.68|
;;;2573   			}
;;;2574   			else /* We are not blocking indefinitely, perform the checks below. */
;;;2575   		#endif
;;;2576   
;;;2577   		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
00001a  6823              LDR      r3,[r4,#0]
00001c  f8d1c020          LDR      r12,[r1,#0x20]  ; xNumOfOverflows
000020  4563              CMP      r3,r12
000022  d002              BEQ      |L24.42|
000024  6863              LDR      r3,[r4,#4]
000026  4293              CMP      r3,r2
000028  d90b              BLS      |L24.66|
                  |L24.42|
;;;2578   		{
;;;2579   			/* The tick count is greater than the time at which vTaskSetTimeout()
;;;2580   			was called, but has also overflowed since vTaskSetTimeOut() was called.
;;;2581   			It must have wrapped all the way around and gone past us again. This
;;;2582   			passed since vTaskSetTimeout() was called. */
;;;2583   			xReturn = pdTRUE;
;;;2584   		}
;;;2585   		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
00002a  6863              LDR      r3,[r4,#4]
00002c  1ad2              SUBS     r2,r2,r3
00002e  4290              CMP      r0,r2
000030  d907              BLS      |L24.66|
;;;2586   		{
;;;2587   			/* Not a genuine timeout. Adjust parameters for time remaining. */
;;;2588   			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
000032  1a80              SUBS     r0,r0,r2
000034  6028              STR      r0,[r5,#0]
000036  6a08              LDR      r0,[r1,#0x20]  ; xNumOfOverflows
000038  6020              STR      r0,[r4,#0]
00003a  68c8              LDR      r0,[r1,#0xc]  ; xTickCount
;;;2589   			vTaskSetTimeOutState( pxTimeOut );
;;;2590   			xReturn = pdFALSE;
00003c  6060              STR      r0,[r4,#4]
00003e  2400              MOVS     r4,#0
000040  e000              B        |L24.68|
                  |L24.66|
;;;2591   		}
;;;2592   		else
;;;2593   		{
;;;2594   			xReturn = pdTRUE;
000042  2401              MOVS     r4,#1
                  |L24.68|
;;;2595   		}
;;;2596   	}
;;;2597   	taskEXIT_CRITICAL();
000044  f7fffffe          BL       vPortExitCritical
;;;2598   
;;;2599   	return xReturn;
000048  4620              MOV      r0,r4
;;;2600   }
00004a  bd70              POP      {r4-r6,pc}
;;;2601   /*-----------------------------------------------------------*/
                          ENDP

                  |L24.76|
                          DCD      ||.data||

                          AREA ||i.xTaskGenericCreate||, CODE, READONLY, ALIGN=2

                  xTaskGenericCreate PROC
;;;550    
;;;551    BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;552    {
000004  4683              MOV      r11,r0
000006  e9dd700b          LDRD     r7,r0,[sp,#0x2c]
00000a  9e0a              LDR      r6,[sp,#0x28]
00000c  469a              MOV      r10,r3
00000e  4615              MOV      r5,r2
000010  4688              MOV      r8,r1
000012  2800              CMP      r0,#0
000014  bf04              ITT      EQ
000016  00a8              LSLEQ    r0,r5,#2
000018  f7fffffe          BLEQ     pvPortMalloc
00001c  ea5f0900          MOVS     r9,r0
000020  bf08              IT       EQ
000022  2400              MOVEQ    r4,#0
000024  d009              BEQ      |L25.58|
000026  204c              MOVS     r0,#0x4c
000028  f7fffffe          BL       pvPortMalloc
00002c  0004              MOVS     r4,r0
00002e  bf0a              ITET     EQ
000030  4648              MOVEQ    r0,r9
000032  f8c49030          STRNE    r9,[r4,#0x30]
000036  f7fffffe          BLEQ     vPortFree
                  |L25.58|
;;;553    BaseType_t xReturn;
;;;554    TCB_t * pxNewTCB;
;;;555    StackType_t *pxTopOfStack;
;;;556    
;;;557    	configASSERT( pxTaskCode );
;;;558    	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
;;;559    
;;;560    	/* Allocate the memory required by the TCB and stack for the new task,
;;;561    	checking that the allocation was successful. */
;;;562    	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
;;;563    
;;;564    	if( pxNewTCB != NULL )
00003a  2c00              CMP      r4,#0
;;;565    	{
;;;566    		#if( portUSING_MPU_WRAPPERS == 1 )
;;;567    			/* Should the task be created in privileged mode? */
;;;568    			BaseType_t xRunPrivileged;
;;;569    			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
;;;570    			{
;;;571    				xRunPrivileged = pdTRUE;
;;;572    			}
;;;573    			else
;;;574    			{
;;;575    				xRunPrivileged = pdFALSE;
;;;576    			}
;;;577    			uxPriority &= ~portPRIVILEGE_BIT;
;;;578    
;;;579    			if( puxStackBuffer != NULL )
;;;580    			{
;;;581    				/* The application provided its own stack.  Note this so no
;;;582    				attempt is made to delete the stack should that task be
;;;583    				deleted. */
;;;584    				pxNewTCB->xUsingStaticallyAllocatedStack = pdTRUE;
;;;585    			}
;;;586    			else
;;;587    			{
;;;588    				/* The stack was allocated dynamically.  Note this so it can be
;;;589    				deleted again if the task is deleted. */
;;;590    				pxNewTCB->xUsingStaticallyAllocatedStack = pdFALSE;
;;;591    			}
;;;592    		#endif /* portUSING_MPU_WRAPPERS == 1 */
;;;593    
;;;594    		/* Calculate the top of stack address.  This depends on whether the
;;;595    		stack grows from high memory to low (as per the 80x86) or vice versa.
;;;596    		portSTACK_GROWTH is used to make the result positive or negative as
;;;597    		required by the port. */
;;;598    		#if( portSTACK_GROWTH < 0 )
;;;599    		{
;;;600    			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
;;;601    			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
;;;602    
;;;603    			/* Check the alignment of the calculated top of stack is correct. */
;;;604    			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
;;;605    		}
;;;606    		#else /* portSTACK_GROWTH */
;;;607    		{
;;;608    			pxTopOfStack = pxNewTCB->pxStack;
;;;609    
;;;610    			/* Check the alignment of the stack buffer is correct. */
;;;611    			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
;;;612    
;;;613    			/* If we want to use stack checking on architectures that use
;;;614    			a positive stack growth direction then we also need to store the
;;;615    			other extreme of the stack space. */
;;;616    			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
;;;617    		}
;;;618    		#endif /* portSTACK_GROWTH */
;;;619    
;;;620    		/* Setup the newly allocated TCB with the initial state of the task. */
;;;621    		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
;;;622    
;;;623    		/* Initialize the TCB stack to look as if the task was already running,
;;;624    		but had been interrupted by the scheduler.  The return address is set
;;;625    		to the start of the task function. Once the stack has been initialised
;;;626    		the	top of stack variable is updated. */
;;;627    		#if( portUSING_MPU_WRAPPERS == 1 )
;;;628    		{
;;;629    			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
;;;630    		}
;;;631    		#else /* portUSING_MPU_WRAPPERS */
;;;632    		{
;;;633    			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
;;;634    		}
;;;635    		#endif /* portUSING_MPU_WRAPPERS */
;;;636    
;;;637    		if( ( void * ) pxCreatedTask != NULL )
;;;638    		{
;;;639    			/* Pass the TCB out - in an anonymous way.  The calling function/
;;;640    			task can use this as a handle to delete the task later if
;;;641    			required.*/
;;;642    			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
;;;643    		}
;;;644    		else
;;;645    		{
;;;646    			mtCOVERAGE_TEST_MARKER();
;;;647    		}
;;;648    
;;;649    		/* Ensure interrupts don't access the task lists while they are being
;;;650    		updated. */
;;;651    		taskENTER_CRITICAL();
;;;652    		{
;;;653    			uxCurrentNumberOfTasks++;
;;;654    			if( pxCurrentTCB == NULL )
;;;655    			{
;;;656    				/* There are no other tasks, or all the other tasks are in
;;;657    				the suspended state - make this the current task. */
;;;658    				pxCurrentTCB =  pxNewTCB;
;;;659    
;;;660    				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
;;;661    				{
;;;662    					/* This is the first task to be created so do the preliminary
;;;663    					initialisation required.  We will not recover if this call
;;;664    					fails, but we will report the failure. */
;;;665    					prvInitialiseTaskLists();
;;;666    				}
;;;667    				else
;;;668    				{
;;;669    					mtCOVERAGE_TEST_MARKER();
;;;670    				}
;;;671    			}
;;;672    			else
;;;673    			{
;;;674    				/* If the scheduler is not already running, make this task the
;;;675    				current task if it is the highest priority task to be created
;;;676    				so far. */
;;;677    				if( xSchedulerRunning == pdFALSE )
;;;678    				{
;;;679    					if( pxCurrentTCB->uxPriority <= uxPriority )
;;;680    					{
;;;681    						pxCurrentTCB = pxNewTCB;
;;;682    					}
;;;683    					else
;;;684    					{
;;;685    						mtCOVERAGE_TEST_MARKER();
;;;686    					}
;;;687    				}
;;;688    				else
;;;689    				{
;;;690    					mtCOVERAGE_TEST_MARKER();
;;;691    				}
;;;692    			}
;;;693    
;;;694    			uxTaskNumber++;
;;;695    
;;;696    			#if ( configUSE_TRACE_FACILITY == 1 )
;;;697    			{
;;;698    				/* Add a counter into the TCB for tracing only. */
;;;699    				pxNewTCB->uxTCBNumber = uxTaskNumber;
;;;700    			}
;;;701    			#endif /* configUSE_TRACE_FACILITY */
;;;702    			traceTASK_CREATE( pxNewTCB );
;;;703    
;;;704    			prvAddTaskToReadyList( pxNewTCB );
;;;705    
;;;706    			xReturn = pdPASS;
;;;707    			portSETUP_TCB( pxNewTCB );
;;;708    		}
;;;709    		taskEXIT_CRITICAL();
;;;710    	}
;;;711    	else
;;;712    	{
;;;713    		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
00003c  bf08              IT       EQ
00003e  f04f34ff          MOVEQ    r4,#0xffffffff
000042  d06e              BEQ      |L25.290|
000044  f06f0103          MVN      r1,#3                 ;600
000048  eb010185          ADD      r1,r1,r5,LSL #2       ;600
00004c  6b20              LDR      r0,[r4,#0x30]         ;600
00004e  4635              MOV      r5,r6                 ;621
000050  4408              ADD      r0,r0,r1              ;600
000052  f0200907          BIC      r9,r0,#7              ;601
000056  2000              MOVS     r0,#0                 ;601
                  |L25.88|
000058  1821              ADDS     r1,r4,r0              ;601
00005a  f8182000          LDRB     r2,[r8,r0]            ;601
00005e  f8812034          STRB     r2,[r1,#0x34]         ;601
000062  f8181000          LDRB     r1,[r8,r0]            ;601
000066  2900              CMP      r1,#0                 ;601
000068  bf1c              ITT      NE                    ;601
00006a  1c40              ADDNE    r0,r0,#1              ;601
00006c  2810              CMPNE    r0,#0x10              ;601
00006e  d3f3              BCC      |L25.88|
000070  f04f0800          MOV      r8,#0                 ;601
000074  f8848043          STRB     r8,[r4,#0x43]         ;601
000078  2d05              CMP      r5,#5                 ;601
00007a  bf28              IT       CS                    ;601
00007c  2504              MOVCS    r5,#4                 ;601
00007e  1d20              ADDS     r0,r4,#4              ;601
000080  62e5              STR      r5,[r4,#0x2c]         ;601
000082  f7fffffe          BL       vListInitialiseItem
000086  f1040018          ADD      r0,r4,#0x18           ;601
00008a  f7fffffe          BL       vListInitialiseItem
00008e  6124              STR      r4,[r4,#0x10]         ;601
000090  f1c50105          RSB      r1,r5,#5              ;601
000094  6264              STR      r4,[r4,#0x24]         ;601
000096  61a1              STR      r1,[r4,#0x18]         ;601
000098  f8c48044          STR      r8,[r4,#0x44]         ;601
00009c  f8848048          STRB     r8,[r4,#0x48]         ;601
0000a0  4652              MOV      r2,r10                ;633
0000a2  4659              MOV      r1,r11                ;633
0000a4  4648              MOV      r0,r9                 ;633
0000a6  f7fffffe          BL       pxPortInitialiseStack
0000aa  6020              STR      r0,[r4,#0]            ;637
0000ac  2f00              CMP      r7,#0                 ;637
0000ae  bf18              IT       NE                    ;642
0000b0  603c              STRNE    r4,[r7,#0]            ;642
0000b2  f7fffffe          BL       vPortEnterCritical
0000b6  f8df80c4          LDR      r8,|L25.380|
0000ba  f8d80008          LDR      r0,[r8,#8]            ;653  ; uxCurrentNumberOfTasks
0000be  1c40              ADDS     r0,r0,#1              ;653
0000c0  f8c80008          STR      r0,[r8,#8]            ;653  ; uxCurrentNumberOfTasks
0000c4  f8d80000          LDR      r0,[r8,#0]            ;654  ; pxCurrentTCB
0000c8  4f2d              LDR      r7,|L25.384|
0000ca  b118              CBZ      r0,|L25.212|
0000cc  f8d80014          LDR      r0,[r8,#0x14]         ;677  ; xSchedulerRunning
0000d0  b340              CBZ      r0,|L25.292|
0000d2  e02f              B        |L25.308|
                  |L25.212|
0000d4  f8c84000          STR      r4,[r8,#0]            ;658  ; pxCurrentTCB
0000d8  f8d80008          LDR      r0,[r8,#8]            ;660  ; uxCurrentNumberOfTasks
0000dc  2801              CMP      r0,#1                 ;660
0000de  bf08              IT       EQ                    ;660
0000e0  2500              MOVEQ    r5,#0                 ;660
0000e2  d127              BNE      |L25.308|
                  |L25.228|
0000e4  eb050085          ADD      r0,r5,r5,LSL #2       ;660
0000e8  eb070080          ADD      r0,r7,r0,LSL #2       ;660
0000ec  f7fffffe          BL       vListInitialise
0000f0  1c6d              ADDS     r5,r5,#1              ;660
0000f2  2d05              CMP      r5,#5                 ;660
0000f4  d3f6              BCC      |L25.228|
0000f6  4823              LDR      r0,|L25.388|
0000f8  f7fffffe          BL       vListInitialise
0000fc  4822              LDR      r0,|L25.392|
0000fe  f7fffffe          BL       vListInitialise
000102  4822              LDR      r0,|L25.396|
000104  f7fffffe          BL       vListInitialise
000108  4821              LDR      r0,|L25.400|
00010a  f7fffffe          BL       vListInitialise
00010e  4821              LDR      r0,|L25.404|
000110  f7fffffe          BL       vListInitialise
000114  481b              LDR      r0,|L25.388|
000116  f8c80030          STR      r0,[r8,#0x30]         ;660  ; pxDelayedTaskList
00011a  3014              ADDS     r0,r0,#0x14           ;660
00011c  f8c80034          STR      r0,[r8,#0x34]         ;660  ; pxOverflowDelayedTaskList
000120  e008              B        |L25.308|
                  |L25.290|
000122  e028              B        |L25.374|
                  |L25.292|
000124  e7ff              B        |L25.294|
                  |L25.294|
000126  f8d80000          LDR      r0,[r8,#0]            ;679  ; pxCurrentTCB
00012a  6ac0              LDR      r0,[r0,#0x2c]         ;679
00012c  42b0              CMP      r0,r6                 ;679
00012e  bf98              IT       LS                    ;681
000130  f8c84000          STRLS    r4,[r8,#0]            ;681  ; pxCurrentTCB
                  |L25.308|
000134  f8d80024          LDR      r0,[r8,#0x24]         ;694  ; uxTaskNumber
000138  2101              MOVS     r1,#1                 ;704
00013a  1c40              ADDS     r0,r0,#1              ;694
00013c  f8c80024          STR      r0,[r8,#0x24]         ;704  ; uxTaskNumber
000140  6ae0              LDR      r0,[r4,#0x2c]         ;704
000142  f8d82010          LDR      r2,[r8,#0x10]         ;704  ; uxTopReadyPriority
000146  4081              LSLS     r1,r1,r0              ;704
000148  4311              ORRS     r1,r1,r2              ;704
00014a  f8c81010          STR      r1,[r8,#0x10]         ;704  ; uxTopReadyPriority
00014e  eb000080          ADD      r0,r0,r0,LSL #2       ;704
000152  eb070080          ADD      r0,r7,r0,LSL #2       ;704
000156  1d21              ADDS     r1,r4,#4              ;704
000158  f7fffffe          BL       vListInsertEnd
00015c  2401              MOVS     r4,#1                 ;706
00015e  f7fffffe          BL       vPortExitCritical
;;;714    		traceTASK_CREATE_FAILED();
;;;715    	}
;;;716    
;;;717    	if( xReturn == pdPASS )
;;;718    	{
;;;719    		if( xSchedulerRunning != pdFALSE )
000162  f8d80014          LDR      r0,[r8,#0x14]  ; xSchedulerRunning
000166  b130              CBZ      r0,|L25.374|
;;;720    		{
;;;721    			/* If the created task is of a higher priority than the current task
;;;722    			then it should run now. */
;;;723    			if( pxCurrentTCB->uxPriority < uxPriority )
000168  f8d80000          LDR      r0,[r8,#0]  ; pxCurrentTCB
00016c  6ac0              LDR      r0,[r0,#0x2c]
00016e  42b0              CMP      r0,r6
;;;724    			{
;;;725    				taskYIELD_IF_USING_PREEMPTION();
000170  bf38              IT       CC
000172  f7fffffe          BLCC     vPortYield
                  |L25.374|
;;;726    			}
;;;727    			else
;;;728    			{
;;;729    				mtCOVERAGE_TEST_MARKER();
;;;730    			}
;;;731    		}
;;;732    		else
;;;733    		{
;;;734    			mtCOVERAGE_TEST_MARKER();
;;;735    		}
;;;736    	}
;;;737    
;;;738    	return xReturn;
000176  4620              MOV      r0,r4
;;;739    }
000178  e8bd9ff0          POP      {r4-r12,pc}
;;;740    /*-----------------------------------------------------------*/
                          ENDP

                  |L25.380|
                          DCD      ||.data||
                  |L25.384|
                          DCD      ||.bss||
                  |L25.388|
                          DCD      ||.bss||+0x64
                  |L25.392|
                          DCD      ||.bss||+0x78
                  |L25.396|
                          DCD      ||.bss||+0x8c
                  |L25.400|
                          DCD      ||.bss||+0xa0
                  |L25.404|
                          DCD      ||.bss||+0xb4

                          AREA ||i.xTaskGenericNotify||, CODE, READONLY, ALIGN=2

                  xTaskGenericNotify PROC
;;;4103   
;;;4104   	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4105   	{
000004  461e              MOV      r6,r3
000006  4690              MOV      r8,r2
000008  460d              MOV      r5,r1
00000a  4604              MOV      r4,r0
;;;4106   	TCB_t * pxTCB;
;;;4107   	eNotifyValue eOriginalNotifyState;
;;;4108   	BaseType_t xReturn = pdPASS;
00000c  2701              MOVS     r7,#1
;;;4109   
;;;4110   		configASSERT( xTaskToNotify );
;;;4111   		pxTCB = ( TCB_t * ) xTaskToNotify;
;;;4112   
;;;4113   		taskENTER_CRITICAL();
00000e  f7fffffe          BL       vPortEnterCritical
;;;4114   		{
;;;4115   			if( pulPreviousNotificationValue != NULL )
000012  2e00              CMP      r6,#0
;;;4116   			{
;;;4117   				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
000014  bf1c              ITT      NE
000016  6c60              LDRNE    r0,[r4,#0x44]
000018  6030              STRNE    r0,[r6,#0]
;;;4118   			}
;;;4119   
;;;4120   			eOriginalNotifyState = pxTCB->eNotifyState;
00001a  f8940048          LDRB     r0,[r4,#0x48]
;;;4121   
;;;4122   			pxTCB->eNotifyState = eNotified;
00001e  2102              MOVS     r1,#2
000020  f8841048          STRB     r1,[r4,#0x48]
;;;4123   
;;;4124   			switch( eAction )
000024  f1b80f05          CMP      r8,#5
000028  d210              BCS      |L26.76|
00002a  e8dff008          TBB      [pc,r8]
00002e  0f03              DCB      0x0f,0x03
000030  060e0a00          DCB      0x06,0x0e,0x0a,0x00
;;;4125   			{
;;;4126   				case eSetBits	:
;;;4127   					pxTCB->ulNotifiedValue |= ulValue;
000034  6c61              LDR      r1,[r4,#0x44]
000036  4329              ORRS     r1,r1,r5
;;;4128   					break;
000038  e001              B        |L26.62|
;;;4129   
;;;4130   				case eIncrement	:
;;;4131   					( pxTCB->ulNotifiedValue )++;
00003a  6c61              LDR      r1,[r4,#0x44]
00003c  1c49              ADDS     r1,r1,#1
                  |L26.62|
00003e  6461              STR      r1,[r4,#0x44]         ;4127
000040  e004              B        |L26.76|
;;;4132   					break;
;;;4133   
;;;4134   				case eSetValueWithOverwrite	:
;;;4135   					pxTCB->ulNotifiedValue = ulValue;
;;;4136   					break;
;;;4137   
;;;4138   				case eSetValueWithoutOverwrite :
;;;4139   					if( eOriginalNotifyState != eNotified )
000042  2802              CMP      r0,#2
;;;4140   					{
;;;4141   						pxTCB->ulNotifiedValue = ulValue;
;;;4142   					}
;;;4143   					else
;;;4144   					{
;;;4145   						/* The value could not be written to the task. */
;;;4146   						xReturn = pdFAIL;
000044  bf08              IT       EQ
000046  2700              MOVEQ    r7,#0
000048  d01b              BEQ      |L26.130|
00004a  6465              STR      r5,[r4,#0x44]         ;4141
                  |L26.76|
;;;4147   					}
;;;4148   					break;
;;;4149   
;;;4150   				case eNoAction:
;;;4151   					/* The task is being notified without its notify value being
;;;4152   					updated. */
;;;4153   					break;
;;;4154   			}
;;;4155   
;;;4156   
;;;4157   			/* If the task is in the blocked state specifically to wait for a
;;;4158   			notification then unblock it now. */
;;;4159   			if( eOriginalNotifyState == eWaitingNotification )
00004c  2801              CMP      r0,#1
00004e  d118              BNE      |L26.130|
;;;4160   			{
;;;4161   				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
000050  1d20              ADDS     r0,r4,#4
000052  f7fffffe          BL       uxListRemove
;;;4162   				prvAddTaskToReadyList( pxTCB );
000056  4d0d              LDR      r5,|L26.140|
000058  6ae0              LDR      r0,[r4,#0x2c]
00005a  2101              MOVS     r1,#1
00005c  692a              LDR      r2,[r5,#0x10]  ; uxTopReadyPriority
00005e  4081              LSLS     r1,r1,r0
000060  4311              ORRS     r1,r1,r2
000062  6129              STR      r1,[r5,#0x10]  ; uxTopReadyPriority
000064  490a              LDR      r1,|L26.144|
000066  eb000080          ADD      r0,r0,r0,LSL #2
00006a  eb010080          ADD      r0,r1,r0,LSL #2
00006e  1d21              ADDS     r1,r4,#4
000070  f7fffffe          BL       vListInsertEnd
;;;4163   
;;;4164   				/* The task should not have been on an event list. */
;;;4165   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
;;;4166   
;;;4167   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
000074  6ae0              LDR      r0,[r4,#0x2c]
000076  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000078  6ac9              LDR      r1,[r1,#0x2c]
00007a  4288              CMP      r0,r1
;;;4168   				{
;;;4169   					/* The notified task has a priority above the currently
;;;4170   					executing task so a yield is required. */
;;;4171   					taskYIELD_IF_USING_PREEMPTION();
00007c  bf88              IT       HI
00007e  f7fffffe          BLHI     vPortYield
                  |L26.130|
;;;4172   				}
;;;4173   				else
;;;4174   				{
;;;4175   					mtCOVERAGE_TEST_MARKER();
;;;4176   				}
;;;4177   			}
;;;4178   			else
;;;4179   			{
;;;4180   				mtCOVERAGE_TEST_MARKER();
;;;4181   			}
;;;4182   		}
;;;4183   		taskEXIT_CRITICAL();
000082  f7fffffe          BL       vPortExitCritical
;;;4184   
;;;4185   		return xReturn;
000086  4638              MOV      r0,r7
;;;4186   	}
000088  e8bd81f0          POP      {r4-r8,pc}
;;;4187   
                          ENDP

                  |L26.140|
                          DCD      ||.data||
                  |L26.144|
                          DCD      ||.bss||

                          AREA ||i.xTaskGetSchedulerState||, CODE, READONLY, ALIGN=2

                  xTaskGetSchedulerState PROC
;;;3360   
;;;3361   	BaseType_t xTaskGetSchedulerState( void )
000000  4805              LDR      r0,|L27.24|
;;;3362   	{
;;;3363   	BaseType_t xReturn;
;;;3364   
;;;3365   		if( xSchedulerRunning == pdFALSE )
000002  6941              LDR      r1,[r0,#0x14]  ; xSchedulerRunning
000004  2900              CMP      r1,#0
;;;3366   		{
;;;3367   			xReturn = taskSCHEDULER_NOT_STARTED;
000006  bf04              ITT      EQ
000008  2001              MOVEQ    r0,#1
;;;3368   		}
;;;3369   		else
;;;3370   		{
;;;3371   			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
;;;3372   			{
;;;3373   				xReturn = taskSCHEDULER_RUNNING;
;;;3374   			}
;;;3375   			else
;;;3376   			{
;;;3377   				xReturn = taskSCHEDULER_SUSPENDED;
;;;3378   			}
;;;3379   		}
;;;3380   
;;;3381   		return xReturn;
;;;3382   	}
00000a  4770              BXEQ     lr
00000c  6ac0              LDR      r0,[r0,#0x2c]         ;3371  ; uxSchedulerSuspended
00000e  2800              CMP      r0,#0                 ;3371
000010  bf0c              ITE      EQ                    ;3373
000012  2002              MOVEQ    r0,#2                 ;3373
000014  2000              MOVNE    r0,#0                 ;3377
000016  4770              BX       lr
;;;3383   
                          ENDP

                  |L27.24|
                          DCD      ||.data||

                          AREA ||i.xTaskGetTickCount||, CODE, READONLY, ALIGN=2

                  xTaskGetTickCount PROC
;;;1762   
;;;1763   TickType_t xTaskGetTickCount( void )
000000  4801              LDR      r0,|L28.8|
;;;1764   {
;;;1765   TickType_t xTicks;
;;;1766   
;;;1767   	/* Critical section required if running on a 16 bit processor. */
;;;1768   	portTICK_TYPE_ENTER_CRITICAL();
;;;1769   	{
;;;1770   		xTicks = xTickCount;
000002  68c0              LDR      r0,[r0,#0xc]  ; xTickCount
;;;1771   	}
;;;1772   	portTICK_TYPE_EXIT_CRITICAL();
;;;1773   
;;;1774   	return xTicks;
;;;1775   }
000004  4770              BX       lr
;;;1776   /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L28.8|
                          DCD      ||.data||

                          AREA ||i.xTaskGetTickCountFromISR||, CODE, READONLY, ALIGN=2

                  xTaskGetTickCountFromISR PROC
;;;1777   
;;;1778   TickType_t xTaskGetTickCountFromISR( void )
000000  4801              LDR      r0,|L29.8|
;;;1779   {
;;;1780   TickType_t xReturn;
;;;1781   UBaseType_t uxSavedInterruptStatus;
;;;1782   
;;;1783   	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;1784   	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;1785   	above the maximum system call priority are kept permanently enabled, even
;;;1786   	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;1787   	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;1788   	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1789   	failure if a FreeRTOS API function is called from an interrupt that has been
;;;1790   	assigned a priority above the configured maximum system call priority.
;;;1791   	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;1792   	that have been assigned a priority at or (logically) below the maximum
;;;1793   	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;1794   	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;1795   	More information (albeit Cortex-M specific) is provided on the following
;;;1796   	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1797   	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;1798   
;;;1799   	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
;;;1800   	{
;;;1801   		xReturn = xTickCount;
000002  68c0              LDR      r0,[r0,#0xc]  ; xTickCount
;;;1802   	}
;;;1803   	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;1804   
;;;1805   	return xReturn;
;;;1806   }
000004  4770              BX       lr
;;;1807   /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L29.8|
                          DCD      ||.data||

                          AREA ||i.xTaskIncrementTick||, CODE, READONLY, ALIGN=2

                  xTaskIncrementTick PROC
;;;1937   
;;;1938   BaseType_t xTaskIncrementTick( void )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1939   {
;;;1940   TCB_t * pxTCB;
;;;1941   TickType_t xItemValue;
;;;1942   BaseType_t xSwitchRequired = pdFALSE;
;;;1943   
;;;1944   	/* Called by the portable layer each time a tick interrupt occurs.
;;;1945   	Increments the tick then checks to see if the new tick value will cause any
;;;1946   	tasks to be unblocked. */
;;;1947   	traceTASK_INCREMENT_TICK( xTickCount );
;;;1948   	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000004  4f32              LDR      r7,|L30.208|
000006  2500              MOVS     r5,#0                 ;1942
000008  6af8              LDR      r0,[r7,#0x2c]  ; uxSchedulerSuspended
00000a  b148              CBZ      r0,|L30.32|
;;;1949   	{
;;;1950   		/* Increment the RTOS tick, switching the delayed and overflowed
;;;1951   		delayed lists if it wraps to 0. */
;;;1952   		++xTickCount;
;;;1953   
;;;1954   		{
;;;1955   			/* Minor optimisation.  The tick count cannot change in this
;;;1956   			block. */
;;;1957   			const TickType_t xConstTickCount = xTickCount;
;;;1958   
;;;1959   			if( xConstTickCount == ( TickType_t ) 0U )
;;;1960   			{
;;;1961   				taskSWITCH_DELAYED_LISTS();
;;;1962   			}
;;;1963   			else
;;;1964   			{
;;;1965   				mtCOVERAGE_TEST_MARKER();
;;;1966   			}
;;;1967   
;;;1968   			/* See if this tick has made a timeout expire.  Tasks are stored in
;;;1969   			the	queue in the order of their wake time - meaning once one task
;;;1970   			has been found whose block time has not expired there is no need to
;;;1971   			look any further down the list. */
;;;1972   			if( xConstTickCount >= xNextTaskUnblockTime )
;;;1973   			{
;;;1974   				for( ;; )
;;;1975   				{
;;;1976   					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
;;;1977   					{
;;;1978   						/* The delayed list is empty.  Set xNextTaskUnblockTime
;;;1979   						to the maximum possible value so it is extremely
;;;1980   						unlikely that the
;;;1981   						if( xTickCount >= xNextTaskUnblockTime ) test will pass
;;;1982   						next time through. */
;;;1983   						xNextTaskUnblockTime = portMAX_DELAY;
;;;1984   						break;
;;;1985   					}
;;;1986   					else
;;;1987   					{
;;;1988   						/* The delayed list is not empty, get the value of the
;;;1989   						item at the head of the delayed list.  This is the time
;;;1990   						at which the task at the head of the delayed list must
;;;1991   						be removed from the Blocked state. */
;;;1992   						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
;;;1993   						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
;;;1994   
;;;1995   						if( xConstTickCount < xItemValue )
;;;1996   						{
;;;1997   							/* It is not time to unblock this item yet, but the
;;;1998   							item value is the time at which the task at the head
;;;1999   							of the blocked list must be removed from the Blocked
;;;2000   							state -	so record the item value in
;;;2001   							xNextTaskUnblockTime. */
;;;2002   							xNextTaskUnblockTime = xItemValue;
;;;2003   							break;
;;;2004   						}
;;;2005   						else
;;;2006   						{
;;;2007   							mtCOVERAGE_TEST_MARKER();
;;;2008   						}
;;;2009   
;;;2010   						/* It is time to remove the item from the Blocked state. */
;;;2011   						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
;;;2012   
;;;2013   						/* Is the task waiting on an event also?  If so remove
;;;2014   						it from the event list. */
;;;2015   						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
;;;2016   						{
;;;2017   							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
;;;2018   						}
;;;2019   						else
;;;2020   						{
;;;2021   							mtCOVERAGE_TEST_MARKER();
;;;2022   						}
;;;2023   
;;;2024   						/* Place the unblocked task into the appropriate ready
;;;2025   						list. */
;;;2026   						prvAddTaskToReadyList( pxTCB );
;;;2027   
;;;2028   						/* A task being unblocked cannot cause an immediate
;;;2029   						context switch if preemption is turned off. */
;;;2030   						#if (  configUSE_PREEMPTION == 1 )
;;;2031   						{
;;;2032   							/* Preemption is on, but a context switch should
;;;2033   							only be performed if the unblocked task has a
;;;2034   							priority that is equal to or higher than the
;;;2035   							currently executing task. */
;;;2036   							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
;;;2037   							{
;;;2038   								xSwitchRequired = pdTRUE;
;;;2039   							}
;;;2040   							else
;;;2041   							{
;;;2042   								mtCOVERAGE_TEST_MARKER();
;;;2043   							}
;;;2044   						}
;;;2045   						#endif /* configUSE_PREEMPTION */
;;;2046   					}
;;;2047   				}
;;;2048   			}
;;;2049   		}
;;;2050   
;;;2051   		/* Tasks of equal priority to the currently running task will share
;;;2052   		processing time (time slice) if preemption is on, and the application
;;;2053   		writer has not explicitly turned time slicing off. */
;;;2054   		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
;;;2055   		{
;;;2056   			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
;;;2057   			{
;;;2058   				xSwitchRequired = pdTRUE;
;;;2059   			}
;;;2060   			else
;;;2061   			{
;;;2062   				mtCOVERAGE_TEST_MARKER();
;;;2063   			}
;;;2064   		}
;;;2065   		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
;;;2066   
;;;2067   		#if ( configUSE_TICK_HOOK == 1 )
;;;2068   		{
;;;2069   			/* Guard against the tick hook being called when the pended tick
;;;2070   			count is being unwound (when the scheduler is being unlocked). */
;;;2071   			if( uxPendedTicks == ( UBaseType_t ) 0U )
;;;2072   			{
;;;2073   				vApplicationTickHook();
;;;2074   			}
;;;2075   			else
;;;2076   			{
;;;2077   				mtCOVERAGE_TEST_MARKER();
;;;2078   			}
;;;2079   		}
;;;2080   		#endif /* configUSE_TICK_HOOK */
;;;2081   	}
;;;2082   	else
;;;2083   	{
;;;2084   		++uxPendedTicks;
00000c  69b8              LDR      r0,[r7,#0x18]  ; uxPendedTicks
00000e  1c40              ADDS     r0,r0,#1
000010  61b8              STR      r0,[r7,#0x18]  ; uxPendedTicks
                  |L30.18|
;;;2085   
;;;2086   		/* The tick hook gets called at regular intervals, even if the
;;;2087   		scheduler is locked. */
;;;2088   		#if ( configUSE_TICK_HOOK == 1 )
;;;2089   		{
;;;2090   			vApplicationTickHook();
;;;2091   		}
;;;2092   		#endif
;;;2093   	}
;;;2094   
;;;2095   	#if ( configUSE_PREEMPTION == 1 )
;;;2096   	{
;;;2097   		if( xYieldPending != pdFALSE )
000012  69f8              LDR      r0,[r7,#0x1c]  ; xYieldPending
000014  2800              CMP      r0,#0
;;;2098   		{
;;;2099   			xSwitchRequired = pdTRUE;
000016  bf18              IT       NE
000018  2501              MOVNE    r5,#1
;;;2100   		}
;;;2101   		else
;;;2102   		{
;;;2103   			mtCOVERAGE_TEST_MARKER();
;;;2104   		}
;;;2105   	}
;;;2106   	#endif /* configUSE_PREEMPTION */
;;;2107   
;;;2108   	return xSwitchRequired;
00001a  4628              MOV      r0,r5
;;;2109   }
00001c  e8bd87f0          POP      {r4-r10,pc}
                  |L30.32|
000020  68f8              LDR      r0,[r7,#0xc]          ;1952  ; xTickCount
000022  1c40              ADDS     r0,r0,#1              ;1952
000024  60f8              STR      r0,[r7,#0xc]          ;1952  ; xTickCount
000026  68fe              LDR      r6,[r7,#0xc]          ;1957  ; xTickCount
000028  f04f39ff          MOV      r9,#0xffffffff        ;1957
00002c  b996              CBNZ     r6,|L30.84|
00002e  6b38              LDR      r0,[r7,#0x30]         ;1961  ; pxDelayedTaskList
000030  6b79              LDR      r1,[r7,#0x34]         ;1961  ; pxOverflowDelayedTaskList
000032  6339              STR      r1,[r7,#0x30]         ;1961  ; pxDelayedTaskList
000034  6378              STR      r0,[r7,#0x34]         ;1961  ; pxOverflowDelayedTaskList
000036  6a38              LDR      r0,[r7,#0x20]         ;1961  ; xNumOfOverflows
000038  1c40              ADDS     r0,r0,#1              ;1961
00003a  6238              STR      r0,[r7,#0x20]         ;1961  ; xNumOfOverflows
00003c  6b38              LDR      r0,[r7,#0x30]         ;1961  ; pxDelayedTaskList
00003e  6800              LDR      r0,[r0,#0]            ;1961
000040  2800              CMP      r0,#0                 ;1961
000042  bf08              IT       EQ                    ;1961
000044  f8c79028          STREQ    r9,[r7,#0x28]         ;1961  ; xNextTaskUnblockTime
000048  d004              BEQ      |L30.84|
00004a  6b38              LDR      r0,[r7,#0x30]         ;1961  ; pxDelayedTaskList
00004c  68c0              LDR      r0,[r0,#0xc]          ;1961
00004e  68c0              LDR      r0,[r0,#0xc]          ;1961
000050  6840              LDR      r0,[r0,#4]            ;1961
000052  62b8              STR      r0,[r7,#0x28]         ;1961  ; xNextTaskUnblockTime
                  |L30.84|
000054  6ab8              LDR      r0,[r7,#0x28]         ;1972  ; xNextTaskUnblockTime
000056  f8df807c          LDR      r8,|L30.212|
00005a  4286              CMP      r6,r0                 ;1972
00005c  bf28              IT       CS                    ;2026
00005e  f04f0a01          MOVCS    r10,#1                ;2026
000062  d30c              BCC      |L30.126|
                  |L30.100|
000064  6b38              LDR      r0,[r7,#0x30]         ;1976  ; pxDelayedTaskList
000066  6800              LDR      r0,[r0,#0]            ;1976
000068  b138              CBZ      r0,|L30.122|
00006a  6b38              LDR      r0,[r7,#0x30]         ;1992  ; pxDelayedTaskList
00006c  68c0              LDR      r0,[r0,#0xc]          ;1992
00006e  68c4              LDR      r4,[r0,#0xc]          ;1993
000070  6860              LDR      r0,[r4,#4]            ;1995
000072  4286              CMP      r6,r0                 ;1995
000074  d20d              BCS      |L30.146|
000076  62b8              STR      r0,[r7,#0x28]         ;2002  ; xNextTaskUnblockTime
000078  e001              B        |L30.126|
                  |L30.122|
00007a  f8c79028          STR      r9,[r7,#0x28]         ;1983  ; xNextTaskUnblockTime
                  |L30.126|
00007e  6838              LDR      r0,[r7,#0]            ;2056  ; pxCurrentTCB
000080  6ac0              LDR      r0,[r0,#0x2c]         ;2056
000082  eb000080          ADD      r0,r0,r0,LSL #2       ;2056
000086  f8580020          LDR      r0,[r8,r0,LSL #2]     ;2056
00008a  2801              CMP      r0,#1                 ;2056
00008c  bf88              IT       HI                    ;2058
00008e  2501              MOVHI    r5,#1                 ;2058
000090  e7bf              B        |L30.18|
                  |L30.146|
000092  1d20              ADDS     r0,r4,#4              ;2011
000094  f7fffffe          BL       uxListRemove
000098  6aa0              LDR      r0,[r4,#0x28]         ;2015
00009a  2800              CMP      r0,#0                 ;2015
00009c  bf1c              ITT      NE                    ;2017
00009e  f1040018          ADDNE    r0,r4,#0x18           ;2017
0000a2  f7fffffe          BLNE     uxListRemove
0000a6  6ae0              LDR      r0,[r4,#0x2c]         ;2026
0000a8  693a              LDR      r2,[r7,#0x10]         ;2026  ; uxTopReadyPriority
0000aa  fa0af100          LSL      r1,r10,r0             ;2026
0000ae  4311              ORRS     r1,r1,r2              ;2026
0000b0  6139              STR      r1,[r7,#0x10]         ;2026  ; uxTopReadyPriority
0000b2  eb000080          ADD      r0,r0,r0,LSL #2       ;2026
0000b6  eb080080          ADD      r0,r8,r0,LSL #2       ;2026
0000ba  1d21              ADDS     r1,r4,#4              ;2026
0000bc  f7fffffe          BL       vListInsertEnd
0000c0  6ae0              LDR      r0,[r4,#0x2c]         ;2036
0000c2  6839              LDR      r1,[r7,#0]            ;2036  ; pxCurrentTCB
0000c4  6ac9              LDR      r1,[r1,#0x2c]         ;2036
0000c6  4288              CMP      r0,r1                 ;2036
0000c8  bf28              IT       CS                    ;2038
0000ca  2501              MOVCS    r5,#1                 ;2038
0000cc  e7ca              B        |L30.100|
;;;2110   /*-----------------------------------------------------------*/
                          ENDP

0000ce  0000              DCW      0x0000
                  |L30.208|
                          DCD      ||.data||
                  |L30.212|
                          DCD      ||.bss||

                          AREA ||i.xTaskNotifyFromISR||, CODE, READONLY, ALIGN=2

                  xTaskNotifyFromISR PROC
;;;4192   
;;;4193   	BaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;4194   	{
000004  461e              MOV      r6,r3
000006  4691              MOV      r9,r2
000008  460d              MOV      r5,r1
00000a  4604              MOV      r4,r0
;;;4195   	TCB_t * pxTCB;
;;;4196   	eNotifyValue eOriginalNotifyState;
;;;4197   	BaseType_t xReturn = pdPASS;
00000c  2701              MOVS     r7,#1
;;;4198   	UBaseType_t uxSavedInterruptStatus;
;;;4199   
;;;4200   		configASSERT( xTaskToNotify );
;;;4201   
;;;4202   		/* RTOS ports that support interrupt nesting have the concept of a
;;;4203   		maximum	system call (or maximum API call) interrupt priority.
;;;4204   		Interrupts that are	above the maximum system call priority are keep
;;;4205   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;4206   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;4207   		is defined in FreeRTOSConfig.h then
;;;4208   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;4209   		failure if a FreeRTOS API function is called from an interrupt that has
;;;4210   		been assigned a priority above the configured maximum system call
;;;4211   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;4212   		from interrupts	that have been assigned a priority at or (logically)
;;;4213   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;4214   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;4215   		simple as possible.  More information (albeit Cortex-M specific) is
;;;4216   		provided on the following link:
;;;4217   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;4218   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;4219   
;;;4220   		pxTCB = ( TCB_t * ) xTaskToNotify;
;;;4221   
;;;4222   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
00000e  f7fffffe          BL       ulPortSetInterruptMask
000012  4680              MOV      r8,r0
;;;4223   		{
;;;4224   			eOriginalNotifyState = pxTCB->eNotifyState;
000014  f8940048          LDRB     r0,[r4,#0x48]
;;;4225   
;;;4226   			pxTCB->eNotifyState = eNotified;
000018  2102              MOVS     r1,#2
00001a  f8841048          STRB     r1,[r4,#0x48]
;;;4227   
;;;4228   			switch( eAction )
00001e  f1b90f05          CMP      r9,#5
000022  d210              BCS      |L31.70|
000024  e8dff009          TBB      [pc,r9]
000028  0f03060e          DCB      0x0f,0x03,0x06,0x0e
00002c  0a00              DCB      0x0a,0x00
;;;4229   			{
;;;4230   				case eSetBits	:
;;;4231   					pxTCB->ulNotifiedValue |= ulValue;
00002e  6c61              LDR      r1,[r4,#0x44]
000030  4329              ORRS     r1,r1,r5
;;;4232   					break;
000032  e001              B        |L31.56|
;;;4233   
;;;4234   				case eIncrement	:
;;;4235   					( pxTCB->ulNotifiedValue )++;
000034  6c61              LDR      r1,[r4,#0x44]
000036  1c49              ADDS     r1,r1,#1
                  |L31.56|
000038  6461              STR      r1,[r4,#0x44]         ;4231
00003a  e004              B        |L31.70|
;;;4236   					break;
;;;4237   
;;;4238   				case eSetValueWithOverwrite	:
;;;4239   					pxTCB->ulNotifiedValue = ulValue;
;;;4240   					break;
;;;4241   
;;;4242   				case eSetValueWithoutOverwrite :
;;;4243   					if( eOriginalNotifyState != eNotified )
00003c  2802              CMP      r0,#2
;;;4244   					{
;;;4245   						pxTCB->ulNotifiedValue = ulValue;
;;;4246   					}
;;;4247   					else
;;;4248   					{
;;;4249   						/* The value could not be written to the task. */
;;;4250   						xReturn = pdFAIL;
00003e  bf08              IT       EQ
000040  2700              MOVEQ    r7,#0
000042  d017              BEQ      |L31.116|
000044  6465              STR      r5,[r4,#0x44]         ;4245
                  |L31.70|
;;;4251   					}
;;;4252   					break;
;;;4253   
;;;4254   				case eNoAction :
;;;4255   					/* The task is being notified without its notify value being
;;;4256   					updated. */
;;;4257   					break;
;;;4258   			}
;;;4259   
;;;4260   
;;;4261   			/* If the task is in the blocked state specifically to wait for a
;;;4262   			notification then unblock it now. */
;;;4263   			if( eOriginalNotifyState == eWaitingNotification )
000046  2801              CMP      r0,#1
000048  d114              BNE      |L31.116|
;;;4264   			{
;;;4265   				/* The task should not have been on an event list. */
;;;4266   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
;;;4267   
;;;4268   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
00004a  4d15              LDR      r5,|L31.160|
00004c  6ae8              LDR      r0,[r5,#0x2c]  ; uxSchedulerSuspended
00004e  f04f0901          MOV      r9,#1                 ;4197
000052  2800              CMP      r0,#0
;;;4269   				{
;;;4270   					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
;;;4271   					prvAddTaskToReadyList( pxTCB );
;;;4272   				}
;;;4273   				else
;;;4274   				{
;;;4275   					/* The delayed and ready lists cannot be accessed, so hold
;;;4276   					this task pending until the scheduler is resumed. */
;;;4277   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
000054  bf1c              ITT      NE
000056  f1040118          ADDNE    r1,r4,#0x18
00005a  4812              LDRNE    r0,|L31.164|
00005c  d010              BEQ      |L31.128|
                  |L31.94|
00005e  f7fffffe          BL       vListInsertEnd
;;;4278   				}
;;;4279   
;;;4280   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
000062  6ae0              LDR      r0,[r4,#0x2c]
000064  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000066  6ac9              LDR      r1,[r1,#0x2c]
000068  4288              CMP      r0,r1
00006a  d903              BLS      |L31.116|
;;;4281   				{
;;;4282   					/* The notified task has a priority above the currently
;;;4283   					executing task so a yield is required. */
;;;4284   					if( pxHigherPriorityTaskWoken != NULL )
00006c  2e00              CMP      r6,#0
;;;4285   					{
;;;4286   						*pxHigherPriorityTaskWoken = pdTRUE;
00006e  bf18              IT       NE
000070  f8c69000          STRNE    r9,[r6,#0]
                  |L31.116|
;;;4287   					}
;;;4288   				}
;;;4289   				else
;;;4290   				{
;;;4291   					mtCOVERAGE_TEST_MARKER();
;;;4292   				}
;;;4293   			}
;;;4294   		}
;;;4295   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
000074  4640              MOV      r0,r8
000076  f7fffffe          BL       vPortClearInterruptMask
;;;4296   
;;;4297   		return xReturn;
00007a  4638              MOV      r0,r7
;;;4298   	}
00007c  e8bd87f0          POP      {r4-r10,pc}
                  |L31.128|
000080  1d20              ADDS     r0,r4,#4              ;4270
000082  f7fffffe          BL       uxListRemove
000086  6ae0              LDR      r0,[r4,#0x2c]         ;4271
000088  692a              LDR      r2,[r5,#0x10]         ;4271  ; uxTopReadyPriority
00008a  fa09f100          LSL      r1,r9,r0              ;4271
00008e  4311              ORRS     r1,r1,r2              ;4271
000090  6129              STR      r1,[r5,#0x10]         ;4271  ; uxTopReadyPriority
000092  4905              LDR      r1,|L31.168|
000094  eb000080          ADD      r0,r0,r0,LSL #2       ;4271
000098  eb010080          ADD      r0,r1,r0,LSL #2       ;4271
00009c  1d21              ADDS     r1,r4,#4              ;4271
00009e  e7de              B        |L31.94|
;;;4299   
                          ENDP

                  |L31.160|
                          DCD      ||.data||
                  |L31.164|
                          DCD      ||.bss||+0x8c
                  |L31.168|
                          DCD      ||.bss||

                          AREA ||i.xTaskNotifyWait||, CODE, READONLY, ALIGN=2

                  xTaskNotifyWait PROC
;;;3982   
;;;3983   	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;3984   	{
000004  461c              MOV      r4,r3
000006  4615              MOV      r5,r2
000008  460f              MOV      r7,r1
00000a  4680              MOV      r8,r0
;;;3985   	TickType_t xTimeToWake;
;;;3986   	BaseType_t xReturn;
;;;3987   
;;;3988   		taskENTER_CRITICAL();
00000c  f7fffffe          BL       vPortEnterCritical
;;;3989   		{
;;;3990   			/* Only block if a notification is not already pending. */
;;;3991   			if( pxCurrentTCB->eNotifyState != eNotified )
000010  4e25              LDR      r6,|L32.168|
000012  6830              LDR      r0,[r6,#0]  ; pxCurrentTCB
000014  f8900048          LDRB     r0,[r0,#0x48]
000018  2802              CMP      r0,#2
00001a  d021              BEQ      |L32.96|
;;;3992   			{
;;;3993   				/* Clear bits in the task's notification value as bits may get
;;;3994   				set	by the notifying task or interrupt.  This can be used to
;;;3995   				clear the value to zero. */
;;;3996   				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
00001c  6833              LDR      r3,[r6,#0]  ; pxCurrentTCB
00001e  6c58              LDR      r0,[r3,#0x44]
000020  ea200008          BIC      r0,r0,r8
000024  6458              STR      r0,[r3,#0x44]
;;;3997   
;;;3998   				/* Mark this task as waiting for a notification. */
;;;3999   				pxCurrentTCB->eNotifyState = eWaitingNotification;
000026  6830              LDR      r0,[r6,#0]  ; pxCurrentTCB
000028  f04f0801          MOV      r8,#1
00002c  f8808048          STRB     r8,[r0,#0x48]
;;;4000   
;;;4001   				if( xTicksToWait > ( TickType_t ) 0 )
000030  b1b4              CBZ      r4,|L32.96|
;;;4002   				{
;;;4003   					/* The task is going to block.  First it must be removed
;;;4004   					from the	ready list. */
;;;4005   					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000032  6830              LDR      r0,[r6,#0]  ; pxCurrentTCB
000034  1d00              ADDS     r0,r0,#4
000036  f7fffffe          BL       uxListRemove
00003a  b940              CBNZ     r0,|L32.78|
;;;4006   					{
;;;4007   						/* The current task must be in a ready list, so there is
;;;4008   						no need to check, and the port reset macro can be called
;;;4009   						directly. */
;;;4010   						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
00003c  6830              LDR      r0,[r6,#0]  ; pxCurrentTCB
00003e  6931              LDR      r1,[r6,#0x10]  ; uxTopReadyPriority
000040  f890002c          LDRB     r0,[r0,#0x2c]
000044  fa08f000          LSL      r0,r8,r0
000048  ea210000          BIC      r0,r1,r0
00004c  6130              STR      r0,[r6,#0x10]  ; uxTopReadyPriority
                  |L32.78|
;;;4011   					}
;;;4012   					else
;;;4013   					{
;;;4014   						mtCOVERAGE_TEST_MARKER();
;;;4015   					}
;;;4016   
;;;4017   					#if ( INCLUDE_vTaskSuspend == 1 )
;;;4018   					{
;;;4019   						if( xTicksToWait == portMAX_DELAY )
00004e  f1b43fff          CMP      r4,#0xffffffff
000052  d022              BEQ      |L32.154|
;;;4020   						{
;;;4021   							/* Add the task to the suspended task list instead
;;;4022   							of a delayed task list to ensure the task is not
;;;4023   							woken by a timing event.  It will block
;;;4024   							indefinitely. */
;;;4025   							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
;;;4026   						}
;;;4027   						else
;;;4028   						{
;;;4029   							/* Calculate the time at which the task should be
;;;4030   							woken if no notification events occur.  This may
;;;4031   							overflow but this doesn't matter, the scheduler will
;;;4032   							handle it. */
;;;4033   							xTimeToWake = xTickCount + xTicksToWait;
000054  68f0              LDR      r0,[r6,#0xc]  ; xTickCount
000056  4420              ADD      r0,r0,r4
;;;4034   							prvAddCurrentTaskToDelayedList( xTimeToWake );
000058  f7fffffe          BL       prvAddCurrentTaskToDelayedList
                  |L32.92|
;;;4035   						}
;;;4036   					}
;;;4037   					#else /* INCLUDE_vTaskSuspend */
;;;4038   					{
;;;4039   							/* Calculate the time at which the task should be
;;;4040   							woken if the event does not occur.  This may
;;;4041   							overflow but this doesn't matter, the scheduler will
;;;4042   							handle it. */
;;;4043   							xTimeToWake = xTickCount + xTicksToWait;
;;;4044   							prvAddCurrentTaskToDelayedList( xTimeToWake );
;;;4045   					}
;;;4046   					#endif /* INCLUDE_vTaskSuspend */
;;;4047   
;;;4048   					/* All ports are written to allow a yield in a critical
;;;4049   					section (some will yield immediately, others wait until the
;;;4050   					critical section exits) - but it is not something that
;;;4051   					application code should ever do. */
;;;4052   					portYIELD_WITHIN_API();
00005c  f7fffffe          BL       vPortYield
                  |L32.96|
;;;4053   				}
;;;4054   				else
;;;4055   				{
;;;4056   					mtCOVERAGE_TEST_MARKER();
;;;4057   				}
;;;4058   			}
;;;4059   			else
;;;4060   			{
;;;4061   				mtCOVERAGE_TEST_MARKER();
;;;4062   			}
;;;4063   		}
;;;4064   		taskEXIT_CRITICAL();
000060  f7fffffe          BL       vPortExitCritical
;;;4065   
;;;4066   		taskENTER_CRITICAL();
000064  f7fffffe          BL       vPortEnterCritical
;;;4067   		{
;;;4068   			if( pulNotificationValue != NULL )
000068  b115              CBZ      r5,|L32.112|
;;;4069   			{
;;;4070   				/* Output the current notification value, which may or may not
;;;4071   				have changed. */
;;;4072   				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
00006a  6830              LDR      r0,[r6,#0]  ; pxCurrentTCB
00006c  6c40              LDR      r0,[r0,#0x44]
00006e  6028              STR      r0,[r5,#0]
                  |L32.112|
;;;4073   			}
;;;4074   
;;;4075   			/* If eNotifyValue is set then either the task never entered the
;;;4076   			blocked state (because a notification was already pending) or the
;;;4077   			task unblocked because of a notification.  Otherwise the task
;;;4078   			unblocked because of a timeout. */
;;;4079   			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
000070  6830              LDR      r0,[r6,#0]  ; pxCurrentTCB
000072  f8900048          LDRB     r0,[r0,#0x48]
000076  2801              CMP      r0,#1
;;;4080   			{
;;;4081   				/* A notification was not received. */
;;;4082   				xReturn = pdFALSE;
000078  bf08              IT       EQ
00007a  2400              MOVEQ    r4,#0
00007c  d004              BEQ      |L32.136|
;;;4083   			}
;;;4084   			else
;;;4085   			{
;;;4086   				/* A notification was already pending or a notification was
;;;4087   				received while the task was waiting. */
;;;4088   				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
00007e  6830              LDR      r0,[r6,#0]  ; pxCurrentTCB
000080  6c41              LDR      r1,[r0,#0x44]
000082  43b9              BICS     r1,r1,r7
000084  6441              STR      r1,[r0,#0x44]
;;;4089   				xReturn = pdTRUE;
000086  2401              MOVS     r4,#1
                  |L32.136|
;;;4090   			}
;;;4091   
;;;4092   			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
000088  6831              LDR      r1,[r6,#0]  ; pxCurrentTCB
00008a  2000              MOVS     r0,#0
00008c  f8810048          STRB     r0,[r1,#0x48]
;;;4093   		}
;;;4094   		taskEXIT_CRITICAL();
000090  f7fffffe          BL       vPortExitCritical
;;;4095   
;;;4096   		return xReturn;
000094  4620              MOV      r0,r4
;;;4097   	}
000096  e8bd81f0          POP      {r4-r8,pc}
                  |L32.154|
00009a  6830              LDR      r0,[r6,#0]            ;4025  ; pxCurrentTCB
00009c  1d01              ADDS     r1,r0,#4              ;4025
00009e  4803              LDR      r0,|L32.172|
0000a0  f7fffffe          BL       vListInsertEnd
0000a4  e7da              B        |L32.92|
;;;4098   
                          ENDP

0000a6  0000              DCW      0x0000
                  |L32.168|
                          DCD      ||.data||
                  |L32.172|
                          DCD      ||.bss||+0xb4

                          AREA ||i.xTaskRemoveFromEventList||, CODE, READONLY, ALIGN=2

                  xTaskRemoveFromEventList PROC
;;;2432   
;;;2433   BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
000000  b570              PUSH     {r4-r6,lr}
;;;2434   {
;;;2435   TCB_t *pxUnblockedTCB;
;;;2436   BaseType_t xReturn;
;;;2437   
;;;2438   	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
;;;2439   	called from a critical section within an ISR. */
;;;2440   
;;;2441   	/* The event list is sorted in priority order, so the first in the list can
;;;2442   	be removed as it is known to be the highest priority.  Remove the TCB from
;;;2443   	the delayed list, and add it to the ready list.
;;;2444   
;;;2445   	If an event is for a queue that is locked then this function will never
;;;2446   	get called - the lock count on the queue will get modified instead.  This
;;;2447   	means exclusive access to the event list is guaranteed here.
;;;2448   
;;;2449   	This function assumes that a check has already been made to ensure that
;;;2450   	pxEventList is not empty. */
;;;2451   	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
000002  68c0              LDR      r0,[r0,#0xc]
;;;2452   	configASSERT( pxUnblockedTCB );
;;;2453   	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
000004  68c4              LDR      r4,[r0,#0xc]
000006  f1040018          ADD      r0,r4,#0x18
00000a  f7fffffe          BL       uxListRemove
;;;2454   
;;;2455   	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
00000e  4d12              LDR      r5,|L33.88|
000010  6ae8              LDR      r0,[r5,#0x2c]  ; uxSchedulerSuspended
;;;2456   	{
;;;2457   		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
;;;2458   		prvAddTaskToReadyList( pxUnblockedTCB );
000012  2601              MOVS     r6,#1
000014  2800              CMP      r0,#0                 ;2455
;;;2459   	}
;;;2460   	else
;;;2461   	{
;;;2462   		/* The delayed and ready lists cannot be accessed, so hold this task
;;;2463   		pending until the scheduler is resumed. */
;;;2464   		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
000016  bf1c              ITT      NE
000018  f1040118          ADDNE    r1,r4,#0x18
00001c  480f              LDRNE    r0,|L33.92|
00001e  d00a              BEQ      |L33.54|
                  |L33.32|
000020  f7fffffe          BL       vListInsertEnd
;;;2465   	}
;;;2466   
;;;2467   	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
000024  6ae0              LDR      r0,[r4,#0x2c]
000026  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000028  6ac9              LDR      r1,[r1,#0x2c]
00002a  4288              CMP      r0,r1
;;;2468   	{
;;;2469   		/* Return true if the task removed from the event list has a higher
;;;2470   		priority than the calling task.  This allows the calling task to know if
;;;2471   		it should force a context switch now. */
;;;2472   		xReturn = pdTRUE;
00002c  bf86              ITTE     HI
00002e  2001              MOVHI    r0,#1
;;;2473   
;;;2474   		/* Mark that a yield is pending in case the user is not using the
;;;2475   		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
;;;2476   		xYieldPending = pdTRUE;
000030  61ee              STRHI    r6,[r5,#0x1c]  ; xYieldPending
;;;2477   	}
;;;2478   	else
;;;2479   	{
;;;2480   		xReturn = pdFALSE;
000032  2000              MOVLS    r0,#0
;;;2481   	}
;;;2482   
;;;2483   	#if( configUSE_TICKLESS_IDLE == 1 )
;;;2484   	{
;;;2485   		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
;;;2486   		might be set to the blocked task's time out time.  If the task is
;;;2487   		unblocked for a reason other than a timeout xNextTaskUnblockTime is
;;;2488   		normally left unchanged, because it is automatically get reset to a new
;;;2489   		value when the tick count equals xNextTaskUnblockTime.  However if
;;;2490   		tickless idling is used it might be more important to enter sleep mode
;;;2491   		at the earliest possible time - so reset xNextTaskUnblockTime here to
;;;2492   		ensure it is updated at the earliest possible time. */
;;;2493   		prvResetNextTaskUnblockTime();
;;;2494   	}
;;;2495   	#endif
;;;2496   
;;;2497   	return xReturn;
;;;2498   }
000034  bd70              POP      {r4-r6,pc}
                  |L33.54|
000036  1d20              ADDS     r0,r4,#4              ;2457
000038  f7fffffe          BL       uxListRemove
00003c  6ae0              LDR      r0,[r4,#0x2c]         ;2458
00003e  692a              LDR      r2,[r5,#0x10]         ;2458  ; uxTopReadyPriority
000040  fa06f100          LSL      r1,r6,r0              ;2458
000044  4311              ORRS     r1,r1,r2              ;2458
000046  6129              STR      r1,[r5,#0x10]         ;2458  ; uxTopReadyPriority
000048  4905              LDR      r1,|L33.96|
00004a  eb000080          ADD      r0,r0,r0,LSL #2       ;2458
00004e  eb010080          ADD      r0,r1,r0,LSL #2       ;2458
000052  1d21              ADDS     r1,r4,#4              ;2458
000054  e7e4              B        |L33.32|
;;;2499   /*-----------------------------------------------------------*/
                          ENDP

000056  0000              DCW      0x0000
                  |L33.88|
                          DCD      ||.data||
                  |L33.92|
                          DCD      ||.bss||+0x8c
                  |L33.96|
                          DCD      ||.bss||

                          AREA ||i.xTaskRemoveFromUnorderedEventList||, CODE, READONLY, ALIGN=2

                  xTaskRemoveFromUnorderedEventList PROC
;;;2500   
;;;2501   BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
000000  b570              PUSH     {r4-r6,lr}
;;;2502   {
;;;2503   TCB_t *pxUnblockedTCB;
;;;2504   BaseType_t xReturn;
;;;2505   
;;;2506   	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
;;;2507   	the event flags implementation. */
;;;2508   	configASSERT( uxSchedulerSuspended != pdFALSE );
;;;2509   
;;;2510   	/* Store the new item value in the event list. */
;;;2511   	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
000002  f0414100          ORR      r1,r1,#0x80000000
;;;2512   
;;;2513   	/* Remove the event list form the event flag.  Interrupts do not access
;;;2514   	event flags. */
;;;2515   	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
000006  6001              STR      r1,[r0,#0]
;;;2516   	configASSERT( pxUnblockedTCB );
;;;2517   	( void ) uxListRemove( pxEventListItem );
000008  68c4              LDR      r4,[r0,#0xc]
00000a  f7fffffe          BL       uxListRemove
;;;2518   
;;;2519   	/* Remove the task from the delayed list and add it to the ready list.  The
;;;2520   	scheduler is suspended so interrupts will not be accessing the ready
;;;2521   	lists. */
;;;2522   	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
00000e  1d20              ADDS     r0,r4,#4
000010  f7fffffe          BL       uxListRemove
;;;2523   	prvAddTaskToReadyList( pxUnblockedTCB );
000014  4d0c              LDR      r5,|L34.72|
000016  6ae0              LDR      r0,[r4,#0x2c]
000018  2601              MOVS     r6,#1
00001a  692a              LDR      r2,[r5,#0x10]  ; uxTopReadyPriority
00001c  fa06f100          LSL      r1,r6,r0
000020  4311              ORRS     r1,r1,r2
000022  6129              STR      r1,[r5,#0x10]  ; uxTopReadyPriority
000024  4909              LDR      r1,|L34.76|
000026  eb000080          ADD      r0,r0,r0,LSL #2
00002a  eb010080          ADD      r0,r1,r0,LSL #2
00002e  1d21              ADDS     r1,r4,#4
000030  f7fffffe          BL       vListInsertEnd
;;;2524   
;;;2525   	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
000034  6ae0              LDR      r0,[r4,#0x2c]
000036  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000038  6ac9              LDR      r1,[r1,#0x2c]
00003a  4288              CMP      r0,r1
;;;2526   	{
;;;2527   		/* Return true if the task removed from the event list has
;;;2528   		a higher priority than the calling task.  This allows
;;;2529   		the calling task to know if it should force a context
;;;2530   		switch now. */
;;;2531   		xReturn = pdTRUE;
00003c  bf86              ITTE     HI
00003e  2001              MOVHI    r0,#1
;;;2532   
;;;2533   		/* Mark that a yield is pending in case the user is not using the
;;;2534   		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
;;;2535   		xYieldPending = pdTRUE;
000040  61ee              STRHI    r6,[r5,#0x1c]  ; xYieldPending
;;;2536   	}
;;;2537   	else
;;;2538   	{
;;;2539   		xReturn = pdFALSE;
000042  2000              MOVLS    r0,#0
;;;2540   	}
;;;2541   
;;;2542   	return xReturn;
;;;2543   }
000044  bd70              POP      {r4-r6,pc}
;;;2544   /*-----------------------------------------------------------*/
                          ENDP

000046  0000              DCW      0x0000
                  |L34.72|
                          DCD      ||.data||
                  |L34.76|
                          DCD      ||.bss||

                          AREA ||i.xTaskResumeAll||, CODE, READONLY, ALIGN=2

                  xTaskResumeAll PROC
;;;1669   
;;;1670   BaseType_t xTaskResumeAll( void )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1671   {
;;;1672   TCB_t *pxTCB;
;;;1673   BaseType_t xAlreadyYielded = pdFALSE;
000004  f04f0800          MOV      r8,#0
;;;1674   
;;;1675   	/* If uxSchedulerSuspended is zero then this function does not match a
;;;1676   	previous call to vTaskSuspendAll(). */
;;;1677   	configASSERT( uxSchedulerSuspended );
;;;1678   
;;;1679   	/* It is possible that an ISR caused a task to be removed from an event
;;;1680   	list while the scheduler was suspended.  If this was the case then the
;;;1681   	removed task will have been added to the xPendingReadyList.  Once the
;;;1682   	scheduler has been resumed it is safe to move all the pending ready
;;;1683   	tasks from this list into their appropriate ready list. */
;;;1684   	taskENTER_CRITICAL();
000008  f7fffffe          BL       vPortEnterCritical
;;;1685   	{
;;;1686   		--uxSchedulerSuspended;
00000c  4d26              LDR      r5,|L35.168|
00000e  6ae8              LDR      r0,[r5,#0x2c]  ; uxSchedulerSuspended
000010  1e40              SUBS     r0,r0,#1
000012  62e8              STR      r0,[r5,#0x2c]  ; uxSchedulerSuspended
;;;1687   
;;;1688   		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000014  6ae8              LDR      r0,[r5,#0x2c]  ; uxSchedulerSuspended
000016  2800              CMP      r0,#0
000018  d141              BNE      |L35.158|
;;;1689   		{
;;;1690   			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
00001a  68a8              LDR      r0,[r5,#8]  ; uxCurrentNumberOfTasks
00001c  2800              CMP      r0,#0
00001e  d03e              BEQ      |L35.158|
;;;1691   			{
;;;1692   				/* Move any readied tasks from the pending list into the
;;;1693   				appropriate ready list. */
;;;1694   				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
000020  4f22              LDR      r7,|L35.172|
;;;1695   				{
;;;1696   					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
;;;1697   					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
;;;1698   					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
;;;1699   					prvAddTaskToReadyList( pxTCB );
000022  2601              MOVS     r6,#1
000024  6838              LDR      r0,[r7,#0]            ;1694  ; xPendingReadyList
000026  2800              CMP      r0,#0                 ;1694
000028  bf18              IT       NE
00002a  f8df9084          LDRNE    r9,|L35.176|
00002e  d01e              BEQ      |L35.110|
                  |L35.48|
000030  68f8              LDR      r0,[r7,#0xc]          ;1696  ; xPendingReadyList
000032  68c4              LDR      r4,[r0,#0xc]          ;1697
000034  f1040018          ADD      r0,r4,#0x18           ;1697
000038  f7fffffe          BL       uxListRemove
00003c  1d20              ADDS     r0,r4,#4              ;1698
00003e  f7fffffe          BL       uxListRemove
000042  6ae0              LDR      r0,[r4,#0x2c]
000044  692a              LDR      r2,[r5,#0x10]  ; uxTopReadyPriority
000046  fa06f100          LSL      r1,r6,r0
00004a  4311              ORRS     r1,r1,r2
00004c  6129              STR      r1,[r5,#0x10]  ; uxTopReadyPriority
00004e  eb000080          ADD      r0,r0,r0,LSL #2
000052  eb090080          ADD      r0,r9,r0,LSL #2
000056  1d21              ADDS     r1,r4,#4
000058  f7fffffe          BL       vListInsertEnd
;;;1700   
;;;1701   					/* If the moved task has a priority higher than the current
;;;1702   					task then a yield must be performed. */
;;;1703   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
00005c  6ae0              LDR      r0,[r4,#0x2c]
00005e  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000060  6ac9              LDR      r1,[r1,#0x2c]
000062  4288              CMP      r0,r1
;;;1704   					{
;;;1705   						xYieldPending = pdTRUE;
000064  bf28              IT       CS
000066  61ee              STRCS    r6,[r5,#0x1c]  ; xYieldPending
000068  6838              LDR      r0,[r7,#0]            ;1694  ; xPendingReadyList
00006a  2800              CMP      r0,#0                 ;1694
00006c  d1e0              BNE      |L35.48|
                  |L35.110|
;;;1706   					}
;;;1707   					else
;;;1708   					{
;;;1709   						mtCOVERAGE_TEST_MARKER();
;;;1710   					}
;;;1711   				}
;;;1712   
;;;1713   				/* If any ticks occurred while the scheduler was suspended then
;;;1714   				they should be processed now.  This ensures the tick count does
;;;1715   				not	slip, and that any delayed tasks are resumed at the correct
;;;1716   				time. */
;;;1717   				if( uxPendedTicks > ( UBaseType_t ) 0U )
00006e  69a8              LDR      r0,[r5,#0x18]  ; uxPendedTicks
000070  2800              CMP      r0,#0
;;;1718   				{
;;;1719   					while( uxPendedTicks > ( UBaseType_t ) 0U )
000072  bf1c              ITT      NE
000074  69a8              LDRNE    r0,[r5,#0x18]  ; uxPendedTicks
000076  2800              CMPNE    r0,#0
000078  d00a              BEQ      |L35.144|
                  |L35.122|
;;;1720   					{
;;;1721   						if( xTaskIncrementTick() != pdFALSE )
00007a  f7fffffe          BL       xTaskIncrementTick
00007e  2800              CMP      r0,#0
;;;1722   						{
;;;1723   							xYieldPending = pdTRUE;
000080  bf18              IT       NE
000082  61ee              STRNE    r6,[r5,#0x1c]  ; xYieldPending
;;;1724   						}
;;;1725   						else
;;;1726   						{
;;;1727   							mtCOVERAGE_TEST_MARKER();
;;;1728   						}
;;;1729   						--uxPendedTicks;
000084  69a8              LDR      r0,[r5,#0x18]  ; uxPendedTicks
000086  1e40              SUBS     r0,r0,#1
000088  61a8              STR      r0,[r5,#0x18]  ; uxPendedTicks
00008a  69a8              LDR      r0,[r5,#0x18]         ;1719  ; uxPendedTicks
00008c  2800              CMP      r0,#0                 ;1719
00008e  d1f4              BNE      |L35.122|
                  |L35.144|
;;;1730   					}
;;;1731   				}
;;;1732   				else
;;;1733   				{
;;;1734   					mtCOVERAGE_TEST_MARKER();
;;;1735   				}
;;;1736   
;;;1737   				if( xYieldPending == pdTRUE )
000090  69e8              LDR      r0,[r5,#0x1c]  ; xYieldPending
000092  2801              CMP      r0,#1
;;;1738   				{
;;;1739   					#if( configUSE_PREEMPTION != 0 )
;;;1740   					{
;;;1741   						xAlreadyYielded = pdTRUE;
000094  bf04              ITT      EQ
000096  f04f0801          MOVEQ    r8,#1
;;;1742   					}
;;;1743   					#endif
;;;1744   					taskYIELD_IF_USING_PREEMPTION();
00009a  f7fffffe          BLEQ     vPortYield
                  |L35.158|
;;;1745   				}
;;;1746   				else
;;;1747   				{
;;;1748   					mtCOVERAGE_TEST_MARKER();
;;;1749   				}
;;;1750   			}
;;;1751   		}
;;;1752   		else
;;;1753   		{
;;;1754   			mtCOVERAGE_TEST_MARKER();
;;;1755   		}
;;;1756   	}
;;;1757   	taskEXIT_CRITICAL();
00009e  f7fffffe          BL       vPortExitCritical
;;;1758   
;;;1759   	return xAlreadyYielded;
0000a2  4640              MOV      r0,r8
;;;1760   }
0000a4  e8bd87f0          POP      {r4-r10,pc}
;;;1761   /*-----------------------------------------------------------*/
                          ENDP

                  |L35.168|
                          DCD      ||.data||
                  |L35.172|
                          DCD      ||.bss||+0x8c
                  |L35.176|
                          DCD      ||.bss||

                          AREA ||i.xTaskResumeFromISR||, CODE, READONLY, ALIGN=2

                  xTaskResumeFromISR PROC
;;;1472   
;;;1473   	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1474   	{
;;;1475   	BaseType_t xYieldRequired = pdFALSE;
000004  2500              MOVS     r5,#0
;;;1476   	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
000006  4604              MOV      r4,r0
;;;1477   	UBaseType_t uxSavedInterruptStatus;
;;;1478   
;;;1479   		configASSERT( xTaskToResume );
;;;1480   
;;;1481   		/* RTOS ports that support interrupt nesting have the concept of a
;;;1482   		maximum	system call (or maximum API call) interrupt priority.
;;;1483   		Interrupts that are	above the maximum system call priority are keep
;;;1484   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;1485   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;1486   		is defined in FreeRTOSConfig.h then
;;;1487   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1488   		failure if a FreeRTOS API function is called from an interrupt that has
;;;1489   		been assigned a priority above the configured maximum system call
;;;1490   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;1491   		from interrupts	that have been assigned a priority at or (logically)
;;;1492   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;1493   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;1494   		simple as possible.  More information (albeit Cortex-M specific) is
;;;1495   		provided on the following link:
;;;1496   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1497   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;1498   
;;;1499   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
000008  f7fffffe          BL       ulPortSetInterruptMask
00000c  4a17              LDR      r2,|L36.108|
00000e  6961              LDR      r1,[r4,#0x14]
000010  4606              MOV      r6,r0
000012  4291              CMP      r1,r2
000014  d124              BNE      |L36.96|
000016  6aa0              LDR      r0,[r4,#0x28]
000018  f1a20128          SUB      r1,r2,#0x28
00001c  4288              CMP      r0,r1
00001e  d01f              BEQ      |L36.96|
000020  b9f0              CBNZ     r0,|L36.96|
;;;1500   		{
;;;1501   			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
;;;1502   			{
;;;1503   				traceTASK_RESUME_FROM_ISR( pxTCB );
;;;1504   
;;;1505   				/* Check the ready lists can be accessed. */
;;;1506   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000022  4f13              LDR      r7,|L36.112|
000024  6af8              LDR      r0,[r7,#0x2c]  ; uxSchedulerSuspended
000026  2800              CMP      r0,#0
;;;1507   				{
;;;1508   					/* Ready lists can be accessed so move the task from the
;;;1509   					suspended list to the ready list directly. */
;;;1510   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
;;;1511   					{
;;;1512   						xYieldRequired = pdTRUE;
;;;1513   					}
;;;1514   					else
;;;1515   					{
;;;1516   						mtCOVERAGE_TEST_MARKER();
;;;1517   					}
;;;1518   
;;;1519   					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
;;;1520   					prvAddTaskToReadyList( pxTCB );
;;;1521   				}
;;;1522   				else
;;;1523   				{
;;;1524   					/* The delayed or ready lists cannot be accessed so the task
;;;1525   					is held in the pending ready list until the scheduler is
;;;1526   					unsuspended. */
;;;1527   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
000028  bf1c              ITT      NE
00002a  f1040118          ADDNE    r1,r4,#0x18
00002e  4811              LDRNE    r0,|L36.116|
000030  d114              BNE      |L36.92|
000032  6ae0              LDR      r0,[r4,#0x2c]         ;1510
000034  6839              LDR      r1,[r7,#0]            ;1510  ; pxCurrentTCB
000036  6ac9              LDR      r1,[r1,#0x2c]         ;1510
000038  4288              CMP      r0,r1                 ;1510
00003a  bf28              IT       CS                    ;1512
00003c  2501              MOVCS    r5,#1                 ;1512
00003e  1d20              ADDS     r0,r4,#4              ;1519
000040  f7fffffe          BL       uxListRemove
000044  6ae0              LDR      r0,[r4,#0x2c]         ;1520
000046  2101              MOVS     r1,#1                 ;1520
000048  693a              LDR      r2,[r7,#0x10]         ;1520  ; uxTopReadyPriority
00004a  4081              LSLS     r1,r1,r0              ;1520
00004c  4311              ORRS     r1,r1,r2              ;1520
00004e  6139              STR      r1,[r7,#0x10]         ;1520  ; uxTopReadyPriority
000050  4909              LDR      r1,|L36.120|
000052  eb000080          ADD      r0,r0,r0,LSL #2       ;1520
000056  eb010080          ADD      r0,r1,r0,LSL #2       ;1520
00005a  1d21              ADDS     r1,r4,#4              ;1520
                  |L36.92|
00005c  f7fffffe          BL       vListInsertEnd
                  |L36.96|
;;;1528   				}
;;;1529   			}
;;;1530   			else
;;;1531   			{
;;;1532   				mtCOVERAGE_TEST_MARKER();
;;;1533   			}
;;;1534   		}
;;;1535   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
000060  4630              MOV      r0,r6
000062  f7fffffe          BL       vPortClearInterruptMask
;;;1536   
;;;1537   		return xYieldRequired;
000066  4628              MOV      r0,r5
;;;1538   	}
000068  e8bd81f0          POP      {r4-r8,pc}
;;;1539   
                          ENDP

                  |L36.108|
                          DCD      ||.bss||+0xb4
                  |L36.112|
                          DCD      ||.data||
                  |L36.116|
                          DCD      ||.bss||+0x8c
                  |L36.120|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pxReadyTasksLists
                          %        100
                  xDelayedTaskList1
                          %        20
                  xDelayedTaskList2
                          %        20
                  xPendingReadyList
                          %        20
                  xTasksWaitingTermination
                          %        20
                  xSuspendedTaskList
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  pxCurrentTCB
                          DCD      0x00000000
                  uxTasksDeleted
                          DCD      0x00000000
                  uxCurrentNumberOfTasks
                          DCD      0x00000000
                  xTickCount
                          DCD      0x00000000
                  uxTopReadyPriority
                          DCD      0x00000000
                  xSchedulerRunning
                          DCD      0x00000000
                  uxPendedTicks
                          DCD      0x00000000
                  xYieldPending
                          DCD      0x00000000
                  xNumOfOverflows
                          DCD      0x00000000
                  uxTaskNumber
                          DCD      0x00000000
                  xNextTaskUnblockTime
                          DCD      0xffffffff
                  uxSchedulerSuspended
                          DCD      0x00000000
                  pxDelayedTaskList
                          DCD      0x00000000
                  pxOverflowDelayedTaskList
                          DCD      0x00000000
