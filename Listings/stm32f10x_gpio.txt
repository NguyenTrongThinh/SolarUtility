; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\objects\stm32f10x_gpio.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f10x_gpio.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\Driver -I.\Application -I.\System\FreeRTOS\include -I.\System\FreeRTOS\portable\MemMang -I.\System\FreeRTOS\portable\RVDS\ARM_CM3 -I.\System\Libraries\CMSIS\CM3\CoreSupport -I.\System\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I.\System\Libraries\STM32F10x_StdPeriph_Driver\inc -ID:\ARM\SolarUtility\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=516 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\objects\stm32f10x_gpio.crf System\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_gpio.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;107      */
;;;108    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  b510              PUSH     {r4,lr}
;;;109    {
;;;110      /* Check the parameters */
;;;111      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;112      
;;;113      if (GPIOx == GPIOA)
000002  f1a04180          SUB      r1,r0,#0x40000000
000006  f5b13184          SUBS     r1,r1,#0x10800
00000a  d01d              BEQ      |L1.72|
;;;114      {
;;;115        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
;;;116        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
;;;117      }
;;;118      else if (GPIOx == GPIOB)
00000c  f5b16180          SUBS     r1,r1,#0x400
000010  d024              BEQ      |L1.92|
;;;119      {
;;;120        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
;;;121        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
;;;122      }
;;;123      else if (GPIOx == GPIOC)
000012  f5b16180          SUBS     r1,r1,#0x400
000016  d02b              BEQ      |L1.112|
;;;124      {
;;;125        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
;;;126        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
;;;127      }
;;;128      else if (GPIOx == GPIOD)
000018  f5b16180          SUBS     r1,r1,#0x400
00001c  d032              BEQ      |L1.132|
;;;129      {
;;;130        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
;;;131        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
;;;132      }    
;;;133      else if (GPIOx == GPIOE)
00001e  f5b16180          SUBS     r1,r1,#0x400
000022  d039              BEQ      |L1.152|
;;;134      {
;;;135        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
;;;136        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
;;;137      } 
;;;138      else if (GPIOx == GPIOF)
000024  f5b16180          SUBS     r1,r1,#0x400
000028  d040              BEQ      |L1.172|
;;;139      {
;;;140        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
;;;141        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
;;;142      }
;;;143      else
;;;144      {
;;;145        if (GPIOx == GPIOG)
00002a  f5b16180          SUBS     r1,r1,#0x400
;;;146        {
;;;147          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
;;;148          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
;;;149        }
;;;150      }
;;;151    }
00002e  bf18              IT       NE
000030  bd10              POPNE    {r4,pc}
000032  2101              MOVS     r1,#1                 ;147
000034  0208              LSLS     r0,r1,#8              ;147
000036  f7fffffe          BL       RCC_APB2PeriphResetCmd
00003a  e8bd4010          POP      {r4,lr}               ;148
00003e  2100              MOVS     r1,#0                 ;148
000040  f44f7080          MOV      r0,#0x100             ;148
000044  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.72|
000048  2101              MOVS     r1,#1                 ;115
00004a  2004              MOVS     r0,#4                 ;115
00004c  f7fffffe          BL       RCC_APB2PeriphResetCmd
000050  2100              MOVS     r1,#0                 ;116
000052  e8bd4010          POP      {r4,lr}               ;116
000056  2004              MOVS     r0,#4                 ;116
000058  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.92|
00005c  2101              MOVS     r1,#1                 ;120
00005e  2008              MOVS     r0,#8                 ;120
000060  f7fffffe          BL       RCC_APB2PeriphResetCmd
000064  2100              MOVS     r1,#0                 ;121
000066  e8bd4010          POP      {r4,lr}               ;121
00006a  2008              MOVS     r0,#8                 ;121
00006c  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.112|
000070  2101              MOVS     r1,#1                 ;125
000072  2010              MOVS     r0,#0x10              ;125
000074  f7fffffe          BL       RCC_APB2PeriphResetCmd
000078  2100              MOVS     r1,#0                 ;126
00007a  e8bd4010          POP      {r4,lr}               ;126
00007e  2010              MOVS     r0,#0x10              ;126
000080  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.132|
000084  2101              MOVS     r1,#1                 ;130
000086  2020              MOVS     r0,#0x20              ;130
000088  f7fffffe          BL       RCC_APB2PeriphResetCmd
00008c  2100              MOVS     r1,#0                 ;131
00008e  e8bd4010          POP      {r4,lr}               ;131
000092  2020              MOVS     r0,#0x20              ;131
000094  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.152|
000098  2101              MOVS     r1,#1                 ;135
00009a  2040              MOVS     r0,#0x40              ;135
00009c  f7fffffe          BL       RCC_APB2PeriphResetCmd
0000a0  2100              MOVS     r1,#0                 ;136
0000a2  e8bd4010          POP      {r4,lr}               ;136
0000a6  2040              MOVS     r0,#0x40              ;136
0000a8  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.172|
0000ac  2101              MOVS     r1,#1                 ;140
0000ae  2080              MOVS     r0,#0x80              ;140
0000b0  f7fffffe          BL       RCC_APB2PeriphResetCmd
0000b4  2100              MOVS     r1,#0                 ;141
0000b6  e8bd4010          POP      {r4,lr}               ;141
0000ba  2080              MOVS     r0,#0x80              ;141
0000bc  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
;;;152    
                          ENDP

                  GPIO_AFIODeInit PROC
;;;158      */
;;;159    void GPIO_AFIODeInit(void)
0000c0  b510              PUSH     {r4,lr}
;;;160    {
;;;161      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
0000c2  2101              MOVS     r1,#1
0000c4  4608              MOV      r0,r1
0000c6  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;162      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
0000ca  2100              MOVS     r1,#0
0000cc  e8bd4010          POP      {r4,lr}
0000d0  2001              MOVS     r0,#1
0000d2  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
;;;163    }
;;;164    
                          ENDP

                  GPIO_Init PROC
;;;172      */
;;;173    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
0000d6  e92d03f0          PUSH     {r4-r9}
;;;174    {
;;;175      uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
;;;176      uint32_t tmpreg = 0x00, pinmask = 0x00;
;;;177      /* Check the parameters */
;;;178      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;179      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;180      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
;;;181      
;;;182    /*---------------------------- GPIO Mode Configuration -----------------------*/
;;;183      currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
0000da  78cb              LDRB     r3,[r1,#3]
0000dc  f003020f          AND      r2,r3,#0xf
;;;184      if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
0000e0  f0130f10          TST      r3,#0x10
;;;185      { 
;;;186        /* Check the parameters */
;;;187        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;188        /* Output mode */
;;;189        currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
0000e4  bf1c              ITT      NE
0000e6  788b              LDRBNE   r3,[r1,#2]
0000e8  431a              ORRNE    r2,r2,r3
;;;190      }
;;;191    /*---------------------------- GPIO CRL Configuration ------------------------*/
;;;192      /* Configure the eight low port pins */
;;;193      if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
0000ea  780b              LDRB     r3,[r1,#0]
;;;194      {
;;;195        tmpreg = GPIOx->CRL;
;;;196        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
;;;197        {
;;;198          pos = ((uint32_t)0x01) << pinpos;
;;;199          /* Get the port pins position */
;;;200          currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
;;;201          if (currentpin == pos)
;;;202          {
;;;203            pos = pinpos << 2;
;;;204            /* Clear the corresponding low control register bits */
;;;205            pinmask = ((uint32_t)0x0F) << pos;
;;;206            tmpreg &= ~pinmask;
0000ec  f04f070f          MOV      r7,#0xf
0000f0  f0130fff          TST      r3,#0xff              ;193
0000f4  f04f0801          MOV      r8,#1                 ;198
0000f8  d01e              BEQ      |L1.312|
0000fa  6804              LDR      r4,[r0,#0]            ;195
0000fc  2300              MOVS     r3,#0                 ;196
0000fe  2508              MOVS     r5,#8                 ;196
                  |L1.256|
000100  880e              LDRH     r6,[r1,#0]            ;201
000102  fa08fc03          LSL      r12,r8,r3             ;198
000106  ea3c0606          BICS     r6,r12,r6             ;201
00010a  d111              BNE      |L1.304|
00010c  009e              LSLS     r6,r3,#2              ;201
00010e  fa07f906          LSL      r9,r7,r6
000112  ea240409          BIC      r4,r4,r9
;;;207            /* Write the mode configuration in the corresponding bits */
;;;208            tmpreg |= (currentmode << pos);
000116  fa02f606          LSL      r6,r2,r6
00011a  4334              ORRS     r4,r4,r6
;;;209            /* Reset the corresponding ODR bit */
;;;210            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
00011c  78ce              LDRB     r6,[r1,#3]
00011e  2e28              CMP      r6,#0x28
;;;211            {
;;;212              GPIOx->BRR = (((uint32_t)0x01) << pinpos);
000120  bf08              IT       EQ
000122  f8c0c014          STREQ    r12,[r0,#0x14]
000126  d003              BEQ      |L1.304|
;;;213            }
;;;214            else
;;;215            {
;;;216              /* Set the corresponding ODR bit */
;;;217              if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
000128  2e48              CMP      r6,#0x48
;;;218              {
;;;219                GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
00012a  bf08              IT       EQ
00012c  f8c0c010          STREQ    r12,[r0,#0x10]
                  |L1.304|
000130  1c5b              ADDS     r3,r3,#1
000132  1e6d              SUBS     r5,r5,#1
;;;220              }
;;;221            }
;;;222          }
;;;223        }
000134  d1e4              BNE      |L1.256|
;;;224        GPIOx->CRL = tmpreg;
000136  6004              STR      r4,[r0,#0]
                  |L1.312|
;;;225      }
;;;226    /*---------------------------- GPIO CRH Configuration ------------------------*/
;;;227      /* Configure the eight high port pins */
;;;228      if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
000138  880b              LDRH     r3,[r1,#0]
00013a  2bff              CMP      r3,#0xff
;;;229      {
;;;230        tmpreg = GPIOx->CRH;
;;;231        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
;;;232        {
;;;233          pos = (((uint32_t)0x01) << (pinpos + 0x08));
;;;234          /* Get the port pins position */
;;;235          currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
;;;236          if (currentpin == pos)
;;;237          {
;;;238            pos = pinpos << 2;
;;;239            /* Clear the corresponding high control register bits */
;;;240            pinmask = ((uint32_t)0x0F) << pos;
;;;241            tmpreg &= ~pinmask;
;;;242            /* Write the mode configuration in the corresponding bits */
;;;243            tmpreg |= (currentmode << pos);
;;;244            /* Reset the corresponding ODR bit */
;;;245            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
;;;246            {
;;;247              GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
;;;248            }
;;;249            /* Set the corresponding ODR bit */
;;;250            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
;;;251            {
;;;252              GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
;;;253            }
;;;254          }
;;;255        }
;;;256        GPIOx->CRH = tmpreg;
;;;257      }
;;;258    }
00013c  bf9c              ITT      LS
00013e  e8bd03f0          POPLS    {r4-r9}
000142  4770              BXLS     lr
000144  6844              LDR      r4,[r0,#4]            ;230
000146  f04f0c00          MOV      r12,#0                ;231
00014a  2508              MOVS     r5,#8                 ;231
                  |L1.332|
00014c  f10c0308          ADD      r3,r12,#8             ;233
000150  880e              LDRH     r6,[r1,#0]            ;236
000152  fa08f303          LSL      r3,r8,r3              ;233
000156  ea330606          BICS     r6,r3,r6              ;236
00015a  d007              BEQ      |L1.364|
                  |L1.348|
00015c  1e6d              SUBS     r5,r5,#1              ;236
00015e  f10c0c01          ADD      r12,r12,#1            ;236
000162  d1f3              BNE      |L1.332|
000164  6044              STR      r4,[r0,#4]            ;256
000166  e8bd03f0          POP      {r4-r9}
00016a  4770              BX       lr
                  |L1.364|
00016c  ea4f068c          LSL      r6,r12,#2
000170  fa07f906          LSL      r9,r7,r6              ;241
000174  ea240409          BIC      r4,r4,r9              ;241
000178  fa02f606          LSL      r6,r2,r6              ;243
00017c  4334              ORRS     r4,r4,r6              ;243
00017e  78ce              LDRB     r6,[r1,#3]            ;245
000180  2e28              CMP      r6,#0x28              ;245
000182  bf08              IT       EQ                    ;247
000184  6143              STREQ    r3,[r0,#0x14]         ;247
000186  78ce              LDRB     r6,[r1,#3]            ;250
000188  2e48              CMP      r6,#0x48              ;250
00018a  bf08              IT       EQ                    ;252
00018c  6103              STREQ    r3,[r0,#0x10]         ;252
00018e  e7e5              B        |L1.348|
;;;259    
                          ENDP

                  GPIO_StructInit PROC
;;;265      */
;;;266    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
000190  f64f71ff          MOV      r1,#0xffff
;;;267    {
;;;268      /* Reset GPIO init structure parameters values */
;;;269      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
000194  8001              STRH     r1,[r0,#0]
;;;270      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
000196  2102              MOVS     r1,#2
000198  7081              STRB     r1,[r0,#2]
;;;271      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
00019a  2104              MOVS     r1,#4
00019c  70c1              STRB     r1,[r0,#3]
;;;272    }
00019e  4770              BX       lr
;;;273    
                          ENDP

                  GPIO_ReadInputDataBit PROC
;;;280      */
;;;281    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
0001a0  4602              MOV      r2,r0
;;;282    {
;;;283      uint8_t bitstatus = 0x00;
0001a2  2000              MOVS     r0,#0
;;;284      
;;;285      /* Check the parameters */
;;;286      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;287      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;288      
;;;289      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
0001a4  6892              LDR      r2,[r2,#8]
0001a6  420a              TST      r2,r1
;;;290      {
;;;291        bitstatus = (uint8_t)Bit_SET;
0001a8  bf18              IT       NE
0001aa  2001              MOVNE    r0,#1
;;;292      }
;;;293      else
;;;294      {
;;;295        bitstatus = (uint8_t)Bit_RESET;
;;;296      }
;;;297      return bitstatus;
;;;298    }
0001ac  4770              BX       lr
;;;299    
                          ENDP

                  GPIO_ReadInputData PROC
;;;304      */
;;;305    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
0001ae  6880              LDR      r0,[r0,#8]
;;;306    {
;;;307      /* Check the parameters */
;;;308      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;309      
;;;310      return ((uint16_t)GPIOx->IDR);
0001b0  b280              UXTH     r0,r0
;;;311    }
0001b2  4770              BX       lr
;;;312    
                          ENDP

                  GPIO_ReadOutputDataBit PROC
;;;319      */
;;;320    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
0001b4  4602              MOV      r2,r0
;;;321    {
;;;322      uint8_t bitstatus = 0x00;
0001b6  2000              MOVS     r0,#0
;;;323      /* Check the parameters */
;;;324      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;325      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;326      
;;;327      if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
0001b8  68d2              LDR      r2,[r2,#0xc]
0001ba  420a              TST      r2,r1
;;;328      {
;;;329        bitstatus = (uint8_t)Bit_SET;
0001bc  bf18              IT       NE
0001be  2001              MOVNE    r0,#1
;;;330      }
;;;331      else
;;;332      {
;;;333        bitstatus = (uint8_t)Bit_RESET;
;;;334      }
;;;335      return bitstatus;
;;;336    }
0001c0  4770              BX       lr
;;;337    
                          ENDP

                  GPIO_ReadOutputData PROC
;;;342      */
;;;343    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
0001c2  68c0              LDR      r0,[r0,#0xc]
;;;344    {
;;;345      /* Check the parameters */
;;;346      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;347        
;;;348      return ((uint16_t)GPIOx->ODR);
0001c4  b280              UXTH     r0,r0
;;;349    }
0001c6  4770              BX       lr
;;;350    
                          ENDP

                  GPIO_SetBits PROC
;;;357      */
;;;358    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
0001c8  6101              STR      r1,[r0,#0x10]
;;;359    {
;;;360      /* Check the parameters */
;;;361      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;362      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;363      
;;;364      GPIOx->BSRR = GPIO_Pin;
;;;365    }
0001ca  4770              BX       lr
;;;366    
                          ENDP

                  GPIO_ResetBits PROC
;;;373      */
;;;374    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
0001cc  6141              STR      r1,[r0,#0x14]
;;;375    {
;;;376      /* Check the parameters */
;;;377      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;378      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;379      
;;;380      GPIOx->BRR = GPIO_Pin;
;;;381    }
0001ce  4770              BX       lr
;;;382    
                          ENDP

                  GPIO_WriteBit PROC
;;;393      */
;;;394    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
0001d0  2a00              CMP      r2,#0
;;;395    {
;;;396      /* Check the parameters */
;;;397      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;398      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;399      assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
;;;400      
;;;401      if (BitVal != Bit_RESET)
;;;402      {
;;;403        GPIOx->BSRR = GPIO_Pin;
0001d2  bf14              ITE      NE
0001d4  6101              STRNE    r1,[r0,#0x10]
;;;404      }
;;;405      else
;;;406      {
;;;407        GPIOx->BRR = GPIO_Pin;
0001d6  6141              STREQ    r1,[r0,#0x14]
;;;408      }
;;;409    }
0001d8  4770              BX       lr
;;;410    
                          ENDP

                  GPIO_Write PROC
;;;416      */
;;;417    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
0001da  60c1              STR      r1,[r0,#0xc]
;;;418    {
;;;419      /* Check the parameters */
;;;420      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;421      
;;;422      GPIOx->ODR = PortVal;
;;;423    }
0001dc  4770              BX       lr
;;;424    
                          ENDP

                  GPIO_PinLockConfig PROC
;;;431      */
;;;432    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
0001de  f4413280          ORR      r2,r1,#0x10000
;;;433    {
;;;434      uint32_t tmp = 0x00010000;
;;;435      
;;;436      /* Check the parameters */
;;;437      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;438      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;439      
;;;440      tmp |= GPIO_Pin;
;;;441      /* Set LCKK bit */
;;;442      GPIOx->LCKR = tmp;
0001e2  6182              STR      r2,[r0,#0x18]
;;;443      /* Reset LCKK bit */
;;;444      GPIOx->LCKR =  GPIO_Pin;
0001e4  6181              STR      r1,[r0,#0x18]
;;;445      /* Set LCKK bit */
;;;446      GPIOx->LCKR = tmp;
0001e6  6182              STR      r2,[r0,#0x18]
;;;447      /* Read LCKK bit*/
;;;448      tmp = GPIOx->LCKR;
0001e8  6981              LDR      r1,[r0,#0x18]
;;;449      /* Read LCKK bit*/
;;;450      tmp = GPIOx->LCKR;
0001ea  6980              LDR      r0,[r0,#0x18]
;;;451    }
0001ec  4770              BX       lr
;;;452    
                          ENDP

                  GPIO_EventOutputConfig PROC
;;;461      */
;;;462    void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
0001ee  4a2c              LDR      r2,|L1.672|
;;;463    {
;;;464      uint32_t tmpreg = 0x00;
;;;465      /* Check the parameters */
;;;466      assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
;;;467      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;468        
;;;469      tmpreg = AFIO->EVCR;
0001f0  6813              LDR      r3,[r2,#0]
;;;470      /* Clear the PORT[6:4] and PIN[3:0] bits */
;;;471      tmpreg &= EVCR_PORTPINCONFIG_MASK;
0001f2  f64f7c80          MOV      r12,#0xff80
0001f6  ea03030c          AND      r3,r3,r12
;;;472      tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
0001fa  ea431000          ORR      r0,r3,r0,LSL #4
;;;473      tmpreg |= GPIO_PinSource;
0001fe  4308              ORRS     r0,r0,r1
;;;474      AFIO->EVCR = tmpreg;
000200  6010              STR      r0,[r2,#0]
;;;475    }
000202  4770              BX       lr
;;;476    
                          ENDP

                  GPIO_EventOutputCmd PROC
;;;482      */
;;;483    void GPIO_EventOutputCmd(FunctionalState NewState)
000204  4927              LDR      r1,|L1.676|
;;;484    {
;;;485      /* Check the parameters */
;;;486      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;487      
;;;488      *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
000206  61c8              STR      r0,[r1,#0x1c]
;;;489    }
000208  4770              BX       lr
;;;490    
                          ENDP

                  GPIO_PinRemapConfig PROC
;;;548      */
;;;549    void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
00020a  b470              PUSH     {r4-r6}
;;;550    {
;;;551      uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
;;;552    
;;;553      /* Check the parameters */
;;;554      assert_param(IS_GPIO_REMAP(GPIO_Remap));
;;;555      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;556      
;;;557      if((GPIO_Remap & 0x80000000) == 0x80000000)
;;;558      {
;;;559        tmpreg = AFIO->MAPR2;
00020c  4a24              LDR      r2,|L1.672|
00020e  f0104f00          TST      r0,#0x80000000        ;557
000212  bf14              ITE      NE
000214  69d3              LDRNE    r3,[r2,#0x1c]
;;;560      }
;;;561      else
;;;562      {
;;;563        tmpreg = AFIO->MAPR;
000216  6853              LDREQ    r3,[r2,#4]
;;;564      }
;;;565    
;;;566      tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
000218  f3c04403          UBFX     r4,r0,#16,#4
;;;567      tmp = GPIO_Remap & LSB_MASK;
;;;568    
;;;569      if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
00021c  f44f1c40          MOV      r12,#0x300000
000220  ea3c0500          BICS     r5,r12,r0
;;;570      {
;;;571        tmpreg &= DBGAFR_SWJCFG_MASK;
;;;572        AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
;;;573      }
;;;574      else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
;;;575      {
;;;576        tmp1 = ((uint32_t)0x03) << tmpmask;
;;;577        tmpreg &= ~tmp1;
;;;578        tmpreg |= ~DBGAFR_SWJCFG_MASK;
;;;579      }
;;;580      else
;;;581      {
;;;582        tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
000224  ea4f5c50          LSR      r12,r0,#21
000228  ea4f1c0c          LSL      r12,r12,#4
00022c  b286              UXTH     r6,r0                 ;567
00022e  fa06fc0c          LSL      r12,r6,r12
000232  d016              BEQ      |L1.610|
000234  f4101f80          TST      r0,#0x100000          ;574
000238  bf08              IT       EQ
00023a  ea23030c          BICEQ    r3,r3,r12
00023e  d003              BEQ      |L1.584|
000240  2503              MOVS     r5,#3                 ;576
000242  fa05f404          LSL      r4,r5,r4              ;576
000246  43a3              BICS     r3,r3,r4              ;577
                  |L1.584|
000248  f0436370          ORR      r3,r3,#0xf000000      ;578
                  |L1.588|
;;;583        tmpreg |= ~DBGAFR_SWJCFG_MASK;
;;;584      }
;;;585    
;;;586      if (NewState != DISABLE)
00024c  2900              CMP      r1,#0
;;;587      {
;;;588        tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
00024e  bf18              IT       NE
000250  ea4c0303          ORRNE    r3,r12,r3
;;;589      }
;;;590    
;;;591      if((GPIO_Remap & 0x80000000) == 0x80000000)
000254  f0104f00          TST      r0,#0x80000000
;;;592      {
;;;593        AFIO->MAPR2 = tmpreg;
000258  bf14              ITE      NE
00025a  61d3              STRNE    r3,[r2,#0x1c]
;;;594      }
;;;595      else
;;;596      {
;;;597        AFIO->MAPR = tmpreg;
00025c  6053              STREQ    r3,[r2,#4]
;;;598      }  
;;;599    }
00025e  bc70              POP      {r4-r6}
000260  4770              BX       lr
                  |L1.610|
000262  6854              LDR      r4,[r2,#4]            ;572
000264  f0236370          BIC      r3,r3,#0xf000000      ;571
000268  f0246470          BIC      r4,r4,#0xf000000      ;572
00026c  6054              STR      r4,[r2,#4]            ;572
00026e  e7ed              B        |L1.588|
;;;600    
                          ENDP

                  GPIO_EXTILineConfig PROC
;;;608      */
;;;609    void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
000270  078a              LSLS     r2,r1,#30
;;;610    {
;;;611      uint32_t tmp = 0x00;
;;;612      /* Check the parameters */
;;;613      assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
;;;614      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;615      
;;;616      tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
;;;617      AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
000272  f0210103          BIC      r1,r1,#3
000276  f1014180          ADD      r1,r1,#0x40000000
00027a  f5013180          ADD      r1,r1,#0x10000
00027e  0f12              LSRS     r2,r2,#28             ;616
000280  230f              MOVS     r3,#0xf               ;616
000282  f8d1c008          LDR      r12,[r1,#8]
000286  4093              LSLS     r3,r3,r2              ;616
000288  ea2c0303          BIC      r3,r12,r3
00028c  608b              STR      r3,[r1,#8]
;;;618      AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
00028e  688b              LDR      r3,[r1,#8]
000290  4090              LSLS     r0,r0,r2
000292  4318              ORRS     r0,r0,r3
000294  6088              STR      r0,[r1,#8]
;;;619    }
000296  4770              BX       lr
;;;620    
                          ENDP

                  GPIO_ETH_MediaInterfaceConfig PROC
;;;629      */
;;;630    void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
000298  4902              LDR      r1,|L1.676|
;;;631    { 
;;;632      assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 
;;;633    
;;;634      /* Configure MII_RMII selection bit */ 
;;;635      *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
00029a  f8c100dc          STR      r0,[r1,#0xdc]
;;;636    }
00029e  4770              BX       lr
;;;637      
                          ENDP

                  |L1.672|
                          DCD      0x40010000
                  |L1.676|
                          DCD      0x42200000
