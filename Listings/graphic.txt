; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\graphic.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\graphic.d --cpu=Cortex-M3 --apcs=interwork -Otime --diag_suppress=9931 -I.\Driver -I.\Application -I.\System\FreeRTOS\include -I.\System\FreeRTOS\portable\MemMang -I.\System\FreeRTOS\portable\RVDS\ARM_CM3 -I.\System\Libraries\CMSIS\CM3\CoreSupport -I.\System\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I.\System\Libraries\STM32F10x_StdPeriph_Driver\inc -ID:\ARM\SolarUtility\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=516 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\objects\graphic.crf Driver\graphic.c]
                          THUMB

                          AREA ||i.GLCD_Circle||, CODE, READONLY, ALIGN=1

                  GLCD_Circle PROC
;;;26     //-------------------------------------------------------------------------------------------------
;;;27     void GLCD_Circle(unsigned char cx, unsigned char cy ,unsigned char radius)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;28     {
000004  4688              MOV      r8,r1
000006  4681              MOV      r9,r0
;;;29     int x, y, xchange, ychange, radiusError;
;;;30     x = radius;
000008  0014              MOVS     r4,r2
;;;31     y = 0;
;;;32     xchange = 1 - 2 * radius;
00000a  f04f0101          MOV      r1,#1
00000e  f04f0500          MOV      r5,#0                 ;31
000012  f1c40000          RSB      r0,r4,#0
000016  b083              SUB      sp,sp,#0xc            ;28
000018  eb010740          ADD      r7,r1,r0,LSL #1
;;;33     ychange = 1;
00001c  468a              MOV      r10,r1
;;;34     radiusError = 0;
00001e  462e              MOV      r6,r5
;;;35     while(x >= y)
;;;36       {
;;;37       GLCD_SetPixel(cx+x, cy+y, color); 
;;;38       GLCD_SetPixel(cx-x, cy+y, color); 
;;;39       GLCD_SetPixel(cx-x, cy-y, color);
;;;40       GLCD_SetPixel(cx+x, cy-y, color); 
;;;41       GLCD_SetPixel(cx+y, cy+x, color); 
;;;42       GLCD_SetPixel(cx-y, cy+x, color); 
;;;43       GLCD_SetPixel(cx-y, cy-x, color); 
;;;44       GLCD_SetPixel(cx+y, cy-x, color); 
;;;45       y++;
;;;46       radiusError += ychange;
;;;47       ychange += 2;
;;;48       if ( 2*radiusError + xchange > 0 )
;;;49         {
;;;50         x--;
;;;51     	radiusError += xchange;
;;;52     	xchange += 2;
;;;53     	}
;;;54       }
;;;55     }
000020  bf44              ITT      MI
000022  b003              ADDMI    sp,sp,#0xc
000024  e8bd8ff0          POPMI    {r4-r11,pc}
                  |L1.40|
000028  eb080b05          ADD      r11,r8,r5             ;37
00002c  eb090004          ADD      r0,r9,r4              ;37
000030  9001              STR      r0,[sp,#4]            ;37
000032  f00b01ff          AND      r1,r11,#0xff          ;37
000036  b2c0              UXTB     r0,r0                 ;37
000038  2201              MOVS     r2,#1                 ;37
00003a  f7fffffe          BL       GLCD_SetPixel
00003e  eba90004          SUB      r0,r9,r4              ;38
000042  9000              STR      r0,[sp,#0]            ;38
000044  f00b01ff          AND      r1,r11,#0xff          ;38
000048  b2c0              UXTB     r0,r0                 ;38
00004a  2201              MOVS     r2,#1                 ;38
00004c  f7fffffe          BL       GLCD_SetPixel
000050  9800              LDR      r0,[sp,#0]            ;39
000052  eba80b05          SUB      r11,r8,r5             ;39
000056  f00b01ff          AND      r1,r11,#0xff          ;39
00005a  b2c0              UXTB     r0,r0                 ;39
00005c  2201              MOVS     r2,#1                 ;39
00005e  f7fffffe          BL       GLCD_SetPixel
000062  9801              LDR      r0,[sp,#4]            ;40
000064  f00b01ff          AND      r1,r11,#0xff          ;40
000068  b2c0              UXTB     r0,r0                 ;40
00006a  2201              MOVS     r2,#1                 ;40
00006c  f7fffffe          BL       GLCD_SetPixel
000070  eb090005          ADD      r0,r9,r5              ;41
000074  eb080b04          ADD      r11,r8,r4             ;41
000078  9001              STR      r0,[sp,#4]            ;41
00007a  f00b01ff          AND      r1,r11,#0xff          ;41
00007e  b2c0              UXTB     r0,r0                 ;41
000080  2201              MOVS     r2,#1                 ;41
000082  f7fffffe          BL       GLCD_SetPixel
000086  eba90005          SUB      r0,r9,r5              ;42
00008a  9000              STR      r0,[sp,#0]            ;42
00008c  f00b01ff          AND      r1,r11,#0xff          ;42
000090  b2c0              UXTB     r0,r0                 ;42
000092  2201              MOVS     r2,#1                 ;42
000094  f7fffffe          BL       GLCD_SetPixel
000098  9800              LDR      r0,[sp,#0]            ;43
00009a  eba80b04          SUB      r11,r8,r4             ;43
00009e  f00b01ff          AND      r1,r11,#0xff          ;43
0000a2  b2c0              UXTB     r0,r0                 ;43
0000a4  2201              MOVS     r2,#1                 ;43
0000a6  f7fffffe          BL       GLCD_SetPixel
0000aa  9801              LDR      r0,[sp,#4]            ;44
0000ac  f00b01ff          AND      r1,r11,#0xff          ;44
0000b0  b2c0              UXTB     r0,r0                 ;44
0000b2  2201              MOVS     r2,#1                 ;44
0000b4  f7fffffe          BL       GLCD_SetPixel
0000b8  4456              ADD      r6,r6,r10             ;46
0000ba  1c6d              ADDS     r5,r5,#1              ;46
0000bc  eb070046          ADD      r0,r7,r6,LSL #1       ;48
0000c0  f10a0a02          ADD      r10,r10,#2            ;46
0000c4  2800              CMP      r0,#0                 ;48
0000c6  dd02              BLE      |L1.206|
0000c8  443e              ADD      r6,r6,r7              ;51
0000ca  1e64              SUBS     r4,r4,#1              ;51
0000cc  1cbf              ADDS     r7,r7,#2              ;51
                  |L1.206|
0000ce  42ac              CMP      r4,r5                 ;35
0000d0  daaa              BGE      |L1.40|
0000d2  b003              ADD      sp,sp,#0xc
0000d4  e8bd8ff0          POP      {r4-r11,pc}
;;;56     //-------------------------------------------------------------------------------------------------
                          ENDP


                          AREA ||i.GLCD_Line||, CODE, READONLY, ALIGN=1

                  GLCD_Line PROC
;;;58     //-------------------------------------------------------------------------------------------------
;;;59     void GLCD_Line(int X1, int Y1,int X2,int Y2)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;60     {
;;;61     int CurrentX, CurrentY, Xinc, Yinc, 
;;;62         Dx, Dy, TwoDx, TwoDy, 
;;;63     	TwoDxAccumulatedError, TwoDyAccumulatedError;
;;;64     
;;;65     Dx = (X2-X1); // obliczenie sk³adowej poziomej
;;;66     Dy = (Y2-Y1); // obliczenie sk³adowej pionowej
;;;67     
;;;68     TwoDx = Dx + Dx; // podwojona sk³adowa pozioma
;;;69     TwoDy = Dy + Dy; // podwojona sk³adowa pionowa
;;;70     
;;;71     CurrentX = X1; // zaczynamy od X1
;;;72     CurrentY = Y1; // oraz Y1
;;;73     
;;;74     Xinc = 1; // ustalamy krok zwiêkszania pozycji w poziomie 
000004  f04f0b01          MOV      r11,#1
000008  9a02              LDR      r2,[sp,#8]            ;65
00000a  4605              MOV      r5,r0                 ;71
00000c  1a16              SUBS     r6,r2,r0              ;65
00000e  9a03              LDR      r2,[sp,#0xc]          ;66
000010  ea4f0946          LSL      r9,r6,#1              ;68
000014  eba20701          SUB      r7,r2,r1              ;66
000018  ea4f0847          LSL      r8,r7,#1              ;69
00001c  460c              MOV      r4,r1                 ;72
;;;75     Yinc = 1; // ustalamy krok zwiêkszania pozycji w pionie
00001e  46da              MOV      r10,r11
000020  d504              BPL      |L2.44|
;;;76     
;;;77     if(Dx < 0) // jesli sk³adowa pozioma jest ujemna 
;;;78       {
;;;79       Xinc = -1; // to bêdziemy siê "cofaæ" (krok ujemny)
000022  f04f3bff          MOV      r11,#0xffffffff
;;;80       Dx = -Dx;  // zmieniamy znak sk³adowej na dodatni
000026  4276              RSBS     r6,r6,#0
;;;81       TwoDx = -TwoDx; // jak równie¿ podwojonej sk³adowej
000028  f1c90900          RSB      r9,r9,#0
                  |L2.44|
;;;82       }
;;;83     
;;;84     if (Dy < 0) // jeœli sk³adowa pionowa jest ujemna
00002c  2f00              CMP      r7,#0
00002e  da04              BGE      |L2.58|
;;;85       {
;;;86       Yinc = -1; // to bêdziemy siê "cofaæ" (krok ujemny)
000030  f04f3aff          MOV      r10,#0xffffffff
;;;87       Dy = -Dy; // zmieniamy znak sk³adowej na dodatki
000034  427f              RSBS     r7,r7,#0
;;;88       TwoDy = -TwoDy; // jak równiez podwojonej sk³adowej
000036  f1c80800          RSB      r8,r8,#0
                  |L2.58|
;;;89       }
;;;90     
;;;91     GLCD_SetPixel(X1,Y1, color); // stawiamy pierwszy krok (zapalamy pierwszy piksel)
00003a  b2e1              UXTB     r1,r4
00003c  b2e8              UXTB     r0,r5
00003e  2201              MOVS     r2,#1
000040  f7fffffe          BL       GLCD_SetPixel
;;;92     
;;;93     if ((Dx != 0) || (Dy != 0)) // sprawdzamy czy linia sk³ada siê z wiêcej ni¿ jednego punktu ;)
000044  ea560007          ORRS     r0,r6,r7
;;;94       {
;;;95       // sprawdzamy czy sk³adowa pionowa jest mniejsza lub równa sk³adowej poziomej
;;;96       if (Dy <= Dx) // jeœli tak, to idziemy "po iksach"
;;;97         { 
;;;98         TwoDxAccumulatedError = 0; // zerujemy zmienn¹ 
;;;99         do // ruszamy w drogê
;;;100    	  {
;;;101          CurrentX += Xinc; // do aktualnej pozycji dodajemy krok 
;;;102          TwoDxAccumulatedError += TwoDy; // a tu dodajemy podwojon¹ sk³adow¹ pionow¹
;;;103          if(TwoDxAccumulatedError > Dx)  // jeœli TwoDxAccumulatedError jest wiêkszy od Dx
;;;104            {
;;;105            CurrentY += Yinc; // zwiêkszamy aktualn¹ pozycjê w pionie
;;;106            TwoDxAccumulatedError -= TwoDx; // i odejmujemy TwoDx
;;;107            }
;;;108           GLCD_SetPixel(CurrentX,CurrentY, color);// stawiamy nastêpny krok (zapalamy piksel)
;;;109           }while (CurrentX != X2); // idziemy tak d³ugo, a¿ osi¹gniemy punkt docelowy
;;;110         }
;;;111       else // w przeciwnym razie idziemy "po igrekach" 
;;;112          {
;;;113          TwoDyAccumulatedError = 0; 
;;;114          do 
;;;115    	    {
;;;116            CurrentY += Yinc; 
;;;117            TwoDyAccumulatedError += TwoDx;
;;;118            if(TwoDyAccumulatedError>Dy) 
;;;119              {
;;;120              CurrentX += Xinc;
;;;121              TwoDyAccumulatedError -= TwoDy;
;;;122              }
;;;123             GLCD_SetPixel(CurrentX,CurrentY, color); 
;;;124             }while (CurrentY != Y2);
;;;125        }
;;;126      }
;;;127    }
000048  bf04              ITT      EQ
00004a  b004              ADDEQ    sp,sp,#0x10
00004c  e8bd9ff0          POPEQ    {r4-r12,pc}
000050  42b7              CMP      r7,r6                 ;96
000052  bfd4              ITE      LE                    ;98
000054  2700              MOVLE    r7,#0                 ;98
000056  2600              MOVGT    r6,#0                 ;113
000058  dc11              BGT      |L2.126|
                  |L2.90|
00005a  4447              ADD      r7,r7,r8              ;102
00005c  445d              ADD      r5,r5,r11             ;101
00005e  42b7              CMP      r7,r6                 ;103
000060  bfc4              ITT      GT                    ;105
000062  4454              ADDGT    r4,r4,r10             ;105
000064  eba70709          SUBGT    r7,r7,r9              ;106
000068  b2e1              UXTB     r1,r4                 ;108
00006a  b2e8              UXTB     r0,r5                 ;108
00006c  2201              MOVS     r2,#1                 ;108
00006e  f7fffffe          BL       GLCD_SetPixel
000072  9802              LDR      r0,[sp,#8]            ;109
000074  4285              CMP      r5,r0                 ;109
000076  d1f0              BNE      |L2.90|
000078  b004              ADD      sp,sp,#0x10
00007a  e8bd9ff0          POP      {r4-r12,pc}
                  |L2.126|
00007e  444e              ADD      r6,r6,r9              ;117
000080  4454              ADD      r4,r4,r10             ;116
000082  42be              CMP      r6,r7                 ;118
000084  bfc4              ITT      GT                    ;120
000086  445d              ADDGT    r5,r5,r11             ;120
000088  eba60608          SUBGT    r6,r6,r8              ;121
00008c  b2e1              UXTB     r1,r4                 ;123
00008e  b2e8              UXTB     r0,r5                 ;123
000090  2201              MOVS     r2,#1                 ;123
000092  f7fffffe          BL       GLCD_SetPixel
000096  9803              LDR      r0,[sp,#0xc]          ;124
000098  4284              CMP      r4,r0                 ;124
00009a  d1f0              BNE      |L2.126|
00009c  b004              ADD      sp,sp,#0x10
00009e  e8bd9ff0          POP      {r4-r12,pc}
;;;128    //-------------------------------------------------------------------------------------------------
                          ENDP


                          AREA ||i.GLCD_Rectangle||, CODE, READONLY, ALIGN=1

                  GLCD_Rectangle PROC
;;;9      //-------------------------------------------------------------------------------------------------
;;;10     void GLCD_Rectangle(unsigned char x, unsigned char y, unsigned char b, unsigned char a)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;11     {
000004  001f              MOVS     r7,r3
000006  4616              MOV      r6,r2
000008  4688              MOV      r8,r1
00000a  4681              MOV      r9,r0
;;;12       unsigned char j; // zmienna pomocnicza
;;;13       // rysowanie linii pionowych (boki)
;;;14       for (j = 0; j < a; j++) {
00000c  f04f0400          MOV      r4,#0
;;;15     		GLCD_SetPixel(x, y + j, color);
;;;16     		GLCD_SetPixel(x + b - 1, y + j, color);
000010  bf1c              ITT      NE
000012  eb090006          ADDNE    r0,r9,r6
000016  f1a00a01          SUBNE    r10,r0,#1
00001a  d010              BEQ      |L3.62|
                  |L3.28|
00001c  eb080504          ADD      r5,r8,r4              ;15
000020  b2e9              UXTB     r1,r5                 ;15
000022  2201              MOVS     r2,#1                 ;15
000024  4648              MOV      r0,r9                 ;15
000026  f7fffffe          BL       GLCD_SetPixel
00002a  b2e9              UXTB     r1,r5
00002c  f00a00ff          AND      r0,r10,#0xff
000030  2201              MOVS     r2,#1
000032  f7fffffe          BL       GLCD_SetPixel
000036  1c60              ADDS     r0,r4,#1              ;14
000038  b2c4              UXTB     r4,r0                 ;14
00003a  42a7              CMP      r7,r4                 ;14
00003c  d8ee              BHI      |L3.28|
                  |L3.62|
;;;17     	}
;;;18       // rysowanie linii poziomych (podstawy)
;;;19       for (j = 0; j < b; j++)	{
00003e  2400              MOVS     r4,#0
000040  2e00              CMP      r6,#0
;;;20     		GLCD_SetPixel(x + j, y, color);
;;;21     		GLCD_SetPixel(x + j, y + a - 1, color);
000042  bf86              ITTE     HI
000044  eb080007          ADDHI    r0,r8,r7
000048  1e47              SUBHI    r7,r0,#1
;;;22     	}
;;;23     }
00004a  e8bd87f0          POPLS    {r4-r10,pc}
                  |L3.78|
00004e  eb090504          ADD      r5,r9,r4              ;20
000052  b2e8              UXTB     r0,r5                 ;20
000054  2201              MOVS     r2,#1                 ;20
000056  4641              MOV      r1,r8                 ;20
000058  f7fffffe          BL       GLCD_SetPixel
00005c  b2f9              UXTB     r1,r7                 ;21
00005e  b2e8              UXTB     r0,r5                 ;21
000060  2201              MOVS     r2,#1                 ;21
000062  f7fffffe          BL       GLCD_SetPixel
000066  1c60              ADDS     r0,r4,#1              ;19
000068  b2c4              UXTB     r4,r0                 ;19
00006a  42a6              CMP      r6,r4                 ;19
00006c  d8ef              BHI      |L3.78|
00006e  e8bd87f0          POP      {r4-r10,pc}
;;;24     //-------------------------------------------------------------------------------------------------
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  color
000000  01                DCB      0x01
