; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\ks0108.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\ks0108.d --cpu=Cortex-M3 --apcs=interwork -Otime --diag_suppress=9931 -I.\Driver -I.\Application -I.\System\FreeRTOS\include -I.\System\FreeRTOS\portable\MemMang -I.\System\FreeRTOS\portable\RVDS\ARM_CM3 -I.\System\Libraries\CMSIS\CM3\CoreSupport -I.\System\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I.\System\Libraries\STM32F10x_StdPeriph_Driver\inc -ID:\EmbeddedSystem\STM32F10xx\SolarUtility\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=515 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\objects\ks0108.crf Driver\KS0108.c]
                          THUMB

                          AREA ||i.GLCD_Bitmap||, CODE, READONLY, ALIGN=1

                  GLCD_Bitmap PROC
;;;103    //-------------------------------------------------------------------------------------------------
;;;104    void GLCD_Bitmap(char * bmp, unsigned char x, unsigned char y, unsigned char dx, unsigned char dy)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;105    {
;;;106    unsigned char i, j;
;;;107    for(j = 0; j < dy / 8; j++)
000004  2600              MOVS     r6,#0
000006  f8dd8020          LDR      r8,[sp,#0x20]
00000a  461f              MOV      r7,r3                 ;105
00000c  4691              MOV      r9,r2                 ;105
00000e  468a              MOV      r10,r1                ;105
000010  4605              MOV      r5,r0                 ;105
000012  ebb60fd8          CMP      r6,r8,LSR #3
;;;108      {
;;;109      GLCD_GoTo(x,y + j);
;;;110      for(i = 0; i < dx; i++) 
;;;111        GLCD_WriteData(GLCD_ReadByteFromROMMemory(bmp++));
;;;112      }
;;;113    }
000016  bf28              IT       CS
000018  e8bd87f0          POPCS    {r4-r10,pc}
                  |L1.28|
00001c  eb090006          ADD      r0,r9,r6              ;109
000020  b2c1              UXTB     r1,r0                 ;109
000022  4650              MOV      r0,r10                ;109
000024  f7fffffe          BL       GLCD_GoTo
000028  2400              MOVS     r4,#0                 ;110
00002a  2f00              CMP      r7,#0                 ;110
00002c  d909              BLS      |L1.66|
                  |L1.46|
00002e  4628              MOV      r0,r5                 ;111
000030  1c6d              ADDS     r5,r5,#1              ;111
000032  f7fffffe          BL       GLCD_ReadByteFromROMMemory
000036  f7fffffe          BL       GLCD_WriteData
00003a  1c60              ADDS     r0,r4,#1              ;110
00003c  b2c4              UXTB     r4,r0                 ;110
00003e  42a7              CMP      r7,r4                 ;110
000040  d8f5              BHI      |L1.46|
                  |L1.66|
000042  1c70              ADDS     r0,r6,#1              ;107
000044  b2c6              UXTB     r6,r0                 ;107
000046  ebb60fd8          CMP      r6,r8,LSR #3          ;107
00004a  d3e7              BCC      |L1.28|
00004c  e8bd87f0          POP      {r4-r10,pc}
;;;114    //-------------------------------------------------------------------------------------------------
                          ENDP


                          AREA ||i.GLCD_ClearScreen||, CODE, READONLY, ALIGN=1

                  GLCD_ClearScreen PROC
;;;54     //-------------------------------------------------------------------------------------------------
;;;55     void GLCD_ClearScreen(void)
000000  b570              PUSH     {r4-r6,lr}
;;;56     {
;;;57     unsigned char i, j;
;;;58     for(j = 0; j < KS0108_SCREEN_HEIGHT/8; j++)
000002  2500              MOVS     r5,#0
                  |L2.4|
;;;59     	{
;;;60     	GLCD_GoTo(0,j);
000004  4629              MOV      r1,r5
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       GLCD_GoTo
;;;61     	for(i = 0; i < KS0108_SCREEN_WIDTH; i++)
00000c  2400              MOVS     r4,#0
                  |L2.14|
;;;62      		GLCD_WriteData(0x00);
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       GLCD_WriteData
000014  1c60              ADDS     r0,r4,#1              ;61
000016  b2c4              UXTB     r4,r0                 ;61
000018  2c80              CMP      r4,#0x80              ;61
00001a  d3f8              BCC      |L2.14|
00001c  1c68              ADDS     r0,r5,#1              ;58
00001e  b2c5              UXTB     r5,r0                 ;58
000020  2d08              CMP      r5,#8                 ;58
000022  d3ef              BCC      |L2.4|
;;;63     	}
;;;64     }
000024  bd70              POP      {r4-r6,pc}
;;;65     //-------------------------------------------------------------------------------------------------
                          ENDP


                          AREA ||i.GLCD_GoTo||, CODE, READONLY, ALIGN=2

                  GLCD_GoTo PROC
;;;29     //-------------------------------------------------------------------------------------------------
;;;30     void GLCD_GoTo(unsigned char x, unsigned char y)
000000  b570              PUSH     {r4-r6,lr}
;;;31     {
000002  4606              MOV      r6,r0
;;;32     unsigned char i;
;;;33     screen_x = x;
000004  4812              LDR      r0,|L3.80|
000006  460d              MOV      r5,r1                 ;31
;;;34     screen_y = y;
;;;35     
;;;36     for(i = 0; i < KS0108_SCREEN_WIDTH/64; i++)
000008  2400              MOVS     r4,#0
00000a  7006              STRB     r6,[r0,#0]            ;33
00000c  7041              STRB     r1,[r0,#1]            ;34
                  |L3.14|
;;;37       {
;;;38       GLCD_WriteCommand(DISPLAY_SET_Y | 0,i);
00000e  4621              MOV      r1,r4
000010  2040              MOVS     r0,#0x40
000012  f7fffffe          BL       GLCD_WriteCommand
;;;39       GLCD_WriteCommand(DISPLAY_SET_X | y,i);
000016  f04500b8          ORR      r0,r5,#0xb8
00001a  4621              MOV      r1,r4
00001c  f7fffffe          BL       GLCD_WriteCommand
;;;40       GLCD_WriteCommand(DISPLAY_START_LINE | 0,i);
000020  4621              MOV      r1,r4
000022  20c0              MOVS     r0,#0xc0
000024  f7fffffe          BL       GLCD_WriteCommand
000028  1c60              ADDS     r0,r4,#1              ;36
00002a  b2c4              UXTB     r4,r0                 ;36
00002c  2c02              CMP      r4,#2                 ;36
00002e  d3ee              BCC      |L3.14|
;;;41       }
;;;42     GLCD_WriteCommand((DISPLAY_SET_Y | (x % 64)), (x / 64));
000030  09b4              LSRS     r4,r6,#6
000032  f006003f          AND      r0,r6,#0x3f
000036  f0400040          ORR      r0,r0,#0x40
00003a  4621              MOV      r1,r4
00003c  f7fffffe          BL       GLCD_WriteCommand
;;;43     GLCD_WriteCommand((DISPLAY_SET_X | y), (x / 64));
000040  f04500b8          ORR      r0,r5,#0xb8
000044  4621              MOV      r1,r4
000046  e8bd4070          POP      {r4-r6,lr}
00004a  f7ffbffe          B.W      GLCD_WriteCommand
;;;44     }
;;;45     //-------------------------------------------------------------------------------------------------
                          ENDP

00004e  0000              DCW      0x0000
                  |L3.80|
                          DCD      ||.data||

                          AREA ||i.GLCD_Initialize||, CODE, READONLY, ALIGN=1

                  GLCD_Initialize PROC
;;;19     //-------------------------------------------------------------------------------------------------
;;;20     void GLCD_Initialize(void)
000000  b510              PUSH     {r4,lr}
;;;21     {
;;;22     unsigned char i;
;;;23     GLCD_InitializePorts();
000002  f7fffffe          BL       GLCD_InitializePorts
;;;24     for(i = 0; i < 3; i++)
000006  2400              MOVS     r4,#0
                  |L4.8|
;;;25       GLCD_WriteCommand((DISPLAY_ON_CMD | ON), i);
000008  4621              MOV      r1,r4
00000a  203f              MOVS     r0,#0x3f
00000c  f7fffffe          BL       GLCD_WriteCommand
000010  1c60              ADDS     r0,r4,#1              ;24
000012  b2c4              UXTB     r4,r0                 ;24
000014  2c03              CMP      r4,#3                 ;24
000016  d3f7              BCC      |L4.8|
;;;26     }
000018  bd10              POP      {r4,pc}
;;;27     //-------------------------------------------------------------------------------------------------
                          ENDP


                          AREA ||i.GLCD_SetPixel||, CODE, READONLY, ALIGN=1

                  GLCD_SetPixel PROC
;;;86     //-------------------------------------------------------------------------------------------------
;;;87     void GLCD_SetPixel(unsigned char x, unsigned char y, unsigned char color)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;88     {
000004  460c              MOV      r4,r1
;;;89     unsigned char tmp;
;;;90     GLCD_GoTo(x, y/8);
000006  08cf              LSRS     r7,r1,#3
000008  4616              MOV      r6,r2                 ;88
00000a  4680              MOV      r8,r0                 ;88
00000c  4639              MOV      r1,r7
00000e  f7fffffe          BL       GLCD_GoTo
;;;91     tmp = GLCD_ReadData();
000012  f7fffffe          BL       GLCD_ReadData
000016  4639              MOV      r1,r7
;;;92     GLCD_GoTo(x, y/8);
000018  4640              MOV      r0,r8
00001a  f7fffffe          BL       GLCD_GoTo
;;;93     tmp = GLCD_ReadData();
00001e  f7fffffe          BL       GLCD_ReadData
000022  4605              MOV      r5,r0
000024  4639              MOV      r1,r7
;;;94     GLCD_GoTo(x, y/8);
000026  4640              MOV      r0,r8
000028  f7fffffe          BL       GLCD_GoTo
;;;95     if(color)
;;;96     	tmp |= (1 << (y%8));
00002c  f0040007          AND      r0,r4,#7
000030  2101              MOVS     r1,#1
000032  4081              LSLS     r1,r1,r0
000034  2e00              CMP      r6,#0                 ;95
000036  bf1a              ITTE     NE
000038  ea410005          ORRNE    r0,r1,r5
00003c  b2c0              UXTBNE   r0,r0
;;;97     else
;;;98     	tmp &= ~(1 << (y%8));
00003e  ea250001          BICEQ    r0,r5,r1
;;;99     GLCD_WriteData(tmp);
000042  e8bd41f0          POP      {r4-r8,lr}
000046  f7ffbffe          B.W      GLCD_WriteData
;;;100    }
;;;101    //-------------------------------------------------------------------------------------------------
                          ENDP


                          AREA ||i.GLCD_TextGoTo||, CODE, READONLY, ALIGN=1

                  GLCD_TextGoTo PROC
;;;47     //-------------------------------------------------------------------------------------------------
;;;48     void GLCD_TextGoTo(unsigned char x, unsigned char y)
000000  eb000040          ADD      r0,r0,r0,LSL #1
;;;49     {
;;;50     GLCD_GoTo(x*6,y);
000004  0640              LSLS     r0,r0,#25
000006  0e00              LSRS     r0,r0,#24
000008  f7ffbffe          B.W      GLCD_GoTo
;;;51     }
;;;52     //-------------------------------------------------------------------------------------------------
                          ENDP


                          AREA ||i.GLCD_WriteChar||, CODE, READONLY, ALIGN=2

                  GLCD_WriteChar PROC
;;;67     //-------------------------------------------------------------------------------------------------
;;;68     void GLCD_WriteChar(char charToWrite)
000000  b570              PUSH     {r4-r6,lr}
;;;69     {
000002  3820              SUBS     r0,r0,#0x20
;;;70     char i;
;;;71     charToWrite -= 32; 
000004  b2c0              UXTB     r0,r0
;;;72     for(i = 0; i < 5; i++) 
;;;73       GLCD_WriteData(GLCD_ReadByteFromROMMemory((char *)(font5x8 + (5 * charToWrite) + i))); 
000006  4909              LDR      r1,|L7.44|
000008  2400              MOVS     r4,#0                 ;72
00000a  eb000080          ADD      r0,r0,r0,LSL #2
00000e  1845              ADDS     r5,r0,r1
                  |L7.16|
000010  1928              ADDS     r0,r5,r4
000012  f7fffffe          BL       GLCD_ReadByteFromROMMemory
000016  f7fffffe          BL       GLCD_WriteData
00001a  1c60              ADDS     r0,r4,#1              ;72
00001c  b2c4              UXTB     r4,r0                 ;72
00001e  2c05              CMP      r4,#5                 ;72
000020  d3f6              BCC      |L7.16|
;;;74     GLCD_WriteData(0x00);
000022  e8bd4070          POP      {r4-r6,lr}
000026  2000              MOVS     r0,#0
000028  f7ffbffe          B.W      GLCD_WriteData
;;;75     }
;;;76     //-------------------------------------------------------------------------------------------------
                          ENDP

                  |L7.44|
                          DCD      ||.constdata||

                          AREA ||i.GLCD_WriteString||, CODE, READONLY, ALIGN=2

                  GLCD_WriteString PROC
;;;78     //-------------------------------------------------------------------------------------------------
;;;79     void GLCD_WriteString(char * stringToWrite)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;80     {
000004  4605              MOV      r5,r0
;;;81     while(*stringToWrite)
000006  7800              LDRB     r0,[r0,#0]
000008  2800              CMP      r0,#0
00000a  bf14              ITE      NE
00000c  4f0d              LDRNE    r7,|L8.68|
;;;82       GLCD_WriteChar(*stringToWrite++);
;;;83     }
00000e  e8bd81f0          POPEQ    {r4-r8,pc}
                  |L8.18|
000012  f8150b01          LDRB     r0,[r5],#1            ;82
000016  2400              MOVS     r4,#0                 ;82
000018  3820              SUBS     r0,r0,#0x20           ;82
00001a  b2c0              UXTB     r0,r0                 ;82
00001c  eb000080          ADD      r0,r0,r0,LSL #2       ;82
000020  19c6              ADDS     r6,r0,r7              ;82
                  |L8.34|
000022  1930              ADDS     r0,r6,r4              ;82
000024  f7fffffe          BL       GLCD_ReadByteFromROMMemory
000028  f7fffffe          BL       GLCD_WriteData
00002c  1c60              ADDS     r0,r4,#1              ;82
00002e  b2c4              UXTB     r4,r0                 ;82
000030  2c05              CMP      r4,#5                 ;82
000032  d3f6              BCC      |L8.34|
000034  2000              MOVS     r0,#0                 ;82
000036  f7fffffe          BL       GLCD_WriteData
00003a  7828              LDRB     r0,[r5,#0]            ;81
00003c  2800              CMP      r0,#0                 ;81
00003e  d1e8              BNE      |L8.18|
000040  e8bd81f0          POP      {r4-r8,pc}
;;;84     //-------------------------------------------------------------------------------------------------
                          ENDP

                  |L8.68|
                          DCD      ||.constdata||

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  font5x8
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  0000005f          DCB      0x00,0x00,0x00,0x5f
000008  00000007          DCB      0x00,0x00,0x00,0x07
00000c  00070014          DCB      0x00,0x07,0x00,0x14
000010  7f147f14          DCB      0x7f,0x14,0x7f,0x14
000014  242a7f2a          DCB      0x24,0x2a,0x7f,0x2a
000018  12231308          DCB      0x12,0x23,0x13,0x08
00001c  64623649          DCB      0x64,0x62,0x36,0x49
000020  55225000          DCB      0x55,0x22,0x50,0x00
000024  05030000          DCB      0x05,0x03,0x00,0x00
000028  001c2241          DCB      0x00,0x1c,0x22,0x41
00002c  00004122          DCB      0x00,0x00,0x41,0x22
000030  1c00082a          DCB      0x1c,0x00,0x08,0x2a
000034  1c2a0808          DCB      0x1c,0x2a,0x08,0x08
000038  083e0808          DCB      0x08,0x3e,0x08,0x08
00003c  00503000          DCB      0x00,0x50,0x30,0x00
000040  00080808          DCB      0x00,0x08,0x08,0x08
000044  08080030          DCB      0x08,0x08,0x00,0x30
000048  30000020          DCB      0x30,0x00,0x00,0x20
00004c  10080402          DCB      0x10,0x08,0x04,0x02
000050  3e514945          DCB      0x3e,0x51,0x49,0x45
000054  3e00427f          DCB      0x3e,0x00,0x42,0x7f
000058  40004261          DCB      0x40,0x00,0x42,0x61
00005c  51494621          DCB      0x51,0x49,0x46,0x21
000060  41454b31          DCB      0x41,0x45,0x4b,0x31
000064  1814127f          DCB      0x18,0x14,0x12,0x7f
000068  10274545          DCB      0x10,0x27,0x45,0x45
00006c  45393c4a          DCB      0x45,0x39,0x3c,0x4a
000070  49493001          DCB      0x49,0x49,0x30,0x01
000074  71090503          DCB      0x71,0x09,0x05,0x03
000078  36494949          DCB      0x36,0x49,0x49,0x49
00007c  36064949          DCB      0x36,0x06,0x49,0x49
000080  291e0036          DCB      0x29,0x1e,0x00,0x36
000084  36000000          DCB      0x36,0x00,0x00,0x00
000088  56360000          DCB      0x56,0x36,0x00,0x00
00008c  00081422          DCB      0x00,0x08,0x14,0x22
000090  41141414          DCB      0x41,0x14,0x14,0x14
000094  14144122          DCB      0x14,0x14,0x41,0x22
000098  14080002          DCB      0x14,0x08,0x00,0x02
00009c  01510906          DCB      0x01,0x51,0x09,0x06
0000a0  32497941          DCB      0x32,0x49,0x79,0x41
0000a4  3e7e1111          DCB      0x3e,0x7e,0x11,0x11
0000a8  117e7f49          DCB      0x11,0x7e,0x7f,0x49
0000ac  4949363e          DCB      0x49,0x49,0x36,0x3e
0000b0  41414122          DCB      0x41,0x41,0x41,0x22
0000b4  7f414122          DCB      0x7f,0x41,0x41,0x22
0000b8  1c7f4949          DCB      0x1c,0x7f,0x49,0x49
0000bc  49417f09          DCB      0x49,0x41,0x7f,0x09
0000c0  0901013e          DCB      0x09,0x01,0x01,0x3e
0000c4  41415132          DCB      0x41,0x41,0x51,0x32
0000c8  7f080808          DCB      0x7f,0x08,0x08,0x08
0000cc  7f00417f          DCB      0x7f,0x00,0x41,0x7f
0000d0  41002040          DCB      0x41,0x00,0x20,0x40
0000d4  413f017f          DCB      0x41,0x3f,0x01,0x7f
0000d8  08142241          DCB      0x08,0x14,0x22,0x41
0000dc  7f404040          DCB      0x7f,0x40,0x40,0x40
0000e0  407f0204          DCB      0x40,0x7f,0x02,0x04
0000e4  027f7f04          DCB      0x02,0x7f,0x7f,0x04
0000e8  08107f3e          DCB      0x08,0x10,0x7f,0x3e
0000ec  4141413e          DCB      0x41,0x41,0x41,0x3e
0000f0  7f090909          DCB      0x7f,0x09,0x09,0x09
0000f4  063e4151          DCB      0x06,0x3e,0x41,0x51
0000f8  215e7f09          DCB      0x21,0x5e,0x7f,0x09
0000fc  19294646          DCB      0x19,0x29,0x46,0x46
000100  49494931          DCB      0x49,0x49,0x49,0x31
000104  01017f01          DCB      0x01,0x01,0x7f,0x01
000108  013f4040          DCB      0x01,0x3f,0x40,0x40
00010c  403f1f20          DCB      0x40,0x3f,0x1f,0x20
000110  40201f7f          DCB      0x40,0x20,0x1f,0x7f
000114  2018207f          DCB      0x20,0x18,0x20,0x7f
000118  63140814          DCB      0x63,0x14,0x08,0x14
00011c  63030478          DCB      0x63,0x03,0x04,0x78
000120  04036151          DCB      0x04,0x03,0x61,0x51
000124  49454300          DCB      0x49,0x45,0x43,0x00
000128  007f4141          DCB      0x00,0x7f,0x41,0x41
00012c  02040810          DCB      0x02,0x04,0x08,0x10
000130  2041417f          DCB      0x20,0x41,0x41,0x7f
000134  00000402          DCB      0x00,0x00,0x04,0x02
000138  01020440          DCB      0x01,0x02,0x04,0x40
00013c  40404040          DCB      0x40,0x40,0x40,0x40
000140  00010204          DCB      0x00,0x01,0x02,0x04
000144  00205454          DCB      0x00,0x20,0x54,0x54
000148  54787f48          DCB      0x54,0x78,0x7f,0x48
00014c  44443838          DCB      0x44,0x44,0x38,0x38
000150  44444420          DCB      0x44,0x44,0x44,0x20
000154  38444448          DCB      0x38,0x44,0x44,0x48
000158  7f385454          DCB      0x7f,0x38,0x54,0x54
00015c  5418087e          DCB      0x54,0x18,0x08,0x7e
000160  09010208          DCB      0x09,0x01,0x02,0x08
000164  1454543c          DCB      0x14,0x54,0x54,0x3c
000168  7f080404          DCB      0x7f,0x08,0x04,0x04
00016c  7800447d          DCB      0x78,0x00,0x44,0x7d
000170  40002040          DCB      0x40,0x00,0x20,0x40
000174  443d0000          DCB      0x44,0x3d,0x00,0x00
000178  7f102844          DCB      0x7f,0x10,0x28,0x44
00017c  00417f40          DCB      0x00,0x41,0x7f,0x40
000180  007c0418          DCB      0x00,0x7c,0x04,0x18
000184  04787c08          DCB      0x04,0x78,0x7c,0x08
000188  04047838          DCB      0x04,0x04,0x78,0x38
00018c  44444438          DCB      0x44,0x44,0x44,0x38
000190  7c141414          DCB      0x7c,0x14,0x14,0x14
000194  08081414          DCB      0x08,0x08,0x14,0x14
000198  187c7c08          DCB      0x18,0x7c,0x7c,0x08
00019c  04040848          DCB      0x04,0x04,0x08,0x48
0001a0  54545420          DCB      0x54,0x54,0x54,0x20
0001a4  043f4440          DCB      0x04,0x3f,0x44,0x40
0001a8  203c4040          DCB      0x20,0x3c,0x40,0x40
0001ac  207c1c20          DCB      0x20,0x7c,0x1c,0x20
0001b0  40201c3c          DCB      0x40,0x20,0x1c,0x3c
0001b4  4030403c          DCB      0x40,0x30,0x40,0x3c
0001b8  44281028          DCB      0x44,0x28,0x10,0x28
0001bc  440c5050          DCB      0x44,0x0c,0x50,0x50
0001c0  503c4464          DCB      0x50,0x3c,0x44,0x64
0001c4  544c4400          DCB      0x54,0x4c,0x44,0x00
0001c8  08364100          DCB      0x08,0x36,0x41,0x00
0001cc  00007f00          DCB      0x00,0x00,0x7f,0x00
0001d0  00004136          DCB      0x00,0x00,0x41,0x36
0001d4  08000808          DCB      0x08,0x00,0x08,0x08
0001d8  2a1c0808          DCB      0x2a,0x1c,0x08,0x08
0001dc  1c2a0808          DCB      0x1c,0x2a,0x08,0x08

                          AREA ||.data||, DATA, ALIGN=0

                  screen_x
000000  00                DCB      0x00
                  screen_y
000001  00                DCB      0x00
